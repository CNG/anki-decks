Python byte code cache location	<code>.pyc</code> files alongside <code>.py</code> files, or in 3.2 and later, in subdirectory named <code>__pycache__</code>	y		
Can Python execute without <code>.py</code> file?	Yes, if the <code>.pyc</code> files are present			
Python byte code is saved for which files?	Anything imported, but not the top level file that is only run as a script.			
Python interactive interpreter automatically {{c1::<b>prints</b>}}		
Force Python to run a file again	from imp import reload # not required to import in 2.X<div>reload(<i>script</i>)</div><div><br /></div><div>import imp # not required to import in 2.X<div>imp.reload(<i>script</i>)</div></div>			
Reading file with <b>exec</b> in Python	2.X:<div><br /></div><div>execfile('module.py')</div><div><br /></div><div>exec(open('module.py')) # automatically reads</div><div><br /></div><div>3.X and 2.X:</div><div><br /></div><div>exec(open('module.py').read())</div>			
$ python <b>-i</b> m.py	Enter interactive interpreter mode after running script whether it ends successfully or not, allowing accessing variables and doing postmortem		y	
Python <b>Number</b> examples	1234, 3.1415, 3+4j, 0b111, Decimal(), Fraction()			
Python <b>String</b> examples	"'spam', ""Bob's"", b'a\x01c', u'sp\xc4m'"			
Python <b>List</b> examples	[1, [2, 'three'], 4.5], list(range(10))			
Python <b>Dictionary</b> examples	{'food': 'spam', 'taste': 'yum'}, dict(hours=10)			
Python <b>Tuple</b> examples	(1, 'spam', 4, 'U'), tuple('spam'), namedtuple			
Python <b>File </b>examples	open('eggs.txt'), open(r'C:\ham.bin', 'wb')			
Python <b>Set</b> examples	set('abc'), {'a', 'b', 'c'}			
Python other core types	Booleans, types, None			
Python program unit types	Functions, modules, classes			
Python implementation-related types	Compiled code, stack tracebacks			
Does Python have type declarations?	no			
Python exponentiation operator	2 <b>**</b> 100			
Python slice of all but last	<b>S[:-1]</b>	y		
Python repetition	S * 8	y		
Python string concatentation	S + 'ing'	y		
Are strings mutable in Python?	no			
Core Python types that are mutable	lists, dictionaries, sets			
Core Python types that are immutable	numbers, strings, tuples			
Python type that allows in place text changes	2.6+, 3.0+, only supports 8 bit wide characters:<div><br /></div><div>&gt;&gt;&gt; B = bytearray(b'spam')</div><div>&gt;&gt;&gt;&nbsp;B.extend(b'eggs') # 'b' needed in 3.X, not 2.X</div><div>&gt;&gt;&gt;&nbsp;B # B[i] = ord(x) works here too</div><div>bytearray(b'spameggs')</div><div>&gt;&gt;&gt;&nbsp;B.decode() # translate to normal string</div><div>'spameggs'</div>		y	
Python's basic substring search operation	<div>&gt;&gt;&gt;&nbsp;S = 'Spam'</div>&gt;&gt;&gt;&nbsp;S.<b>find</b>('pa')<div>1</div>			
Python string formatting expression	'%s, eggs, and %s' % ('spam', 'SPAM!') # works in 2.X and 3.X			
Python string formatting method	<div>'{0}, eggs, and {1}'.format('spam', 'SPAM!') # works in 2.6+ and 3.0+</div><div><br /></div><div>Numbers optional:</div><div>'{}, eggs, and {}'.format('spam', 'SPAM!') # works in 2.7+ and 3.1+</div><div><br /></div>		y	
In Python, lists all attributes available for any object	<b>dir</b>(S)			
Python raw string literal	r'C:\text\new'			
Python multiline string	"Use three quotes or doublequotes:<div><br /></div><div>msg = """"""</div><div>aaaaaa</div><div>bbb''''bbbbb""""bbbbb'bbbbb</div><div>ccccc</div><div>""""""</div>"			
Python strings and Unicode	3.X, normal str strings support Unicode:<div>&gt;&gt;&gt; 'sp\xc4m' # but in 2.X this works like 3.X byte strings</div><div>'spām'</div><div><br /></div><div>3.X byte strings are raw bytes, also works in 2.6+:</div><div>&gt;&gt;&gt; b'a\x01c'</div><div>b'a\x01c'</div><div><br /></div><div>2.X Unicode literal also works in 3.3+:</div><div>&gt;&gt;&gt; u'sp\u00c4m'</div><div><div>'spām'</div></div>			
Python short Unicode escape	\u			
Python long Unicode escape	\U			
Python 2.X/3.X files differences regarding Unicode	In 3.X, text files implement named encodings and accept and return str strings, but binary files instead deal in bytes strings for raw binary data.<div><br /></div><div>In 2.X, normal files' content is str bytes, and a special codecs module handles Unicode and represents content with the unicode type</div>			
Python List description	The Python list object is the most general <i>sequence</i> provided by the language. Lists are <b>positionally ordered</b> collections of arbitrarily typed objects, and they have no fixed size and are <b>mutable</b>.			
Python list comprehension expression example	&gt;&gt;&gt;&nbsp;M = [[1,2,3],[4,5,6],[7,8,9]]<div><div>&gt;&gt;&gt;&nbsp;col2 =&nbsp;<b>[row[1] for row in M]</b><div>&gt;&gt;&gt; col2</div><div>[2, 5, 8]</div></div></div><div><br /></div><div><div>&gt;&gt;&gt;&nbsp;col2 =&nbsp;<b>[row[1] for row in M in row[1] % 2 == 0] #filter out odd items</b><div>&gt;&gt;&gt; col2</div><div>[2, 8]</div></div></div><div><br /></div>	y		
Python expressions to collect values need wrapping in collection in 3.X	&gt;&gt;&gt; list(range(4)) # list() required in 3.X<div>[0, 1, 2, 3]</div>			
Python generator from comprehension	<div>&gt;&gt;&gt; G = (sum(row) for row in M) # wrap in parentheses</div><div>&gt;&gt;&gt; next(G)</div>	y		
Python comprehension syntax can make sets and dictionaries in which versions?	<b>2.7</b> and <b>3.X</b>:<div><br /></div><div>&gt;&gt;&gt; {sum(M[i]) for i in range(3)}</div><div>{0: 6, 1: 15, 2: 24}</div>			
Python dictionaries	Dictionaries are the only mapping type in Python's core objects set, and are also mutable: like lists, they may be changed in place and can grow and shrink on demand.<div><br /></div><div>&gt;&gt;&gt; D = {'food': 'Spam', 'quantity': 4, 'color': 'pink'}</div>		y	
Test if Python dictionary key exists	&gt;&gt;&gt; 'f' in D<div>False</div><div><br /></div><div>&gt;&gt;&gt; if not 'f' in D:</div><div>&nbsp; &nbsp; &nbsp; &nbsp;print('missing')</div><div><br /></div><div>missing</div><div><br /></div><div><br /></div><div>Can also avoid accessing nonexistent by using get() method, conditional index with a default, or in 2.X has_key() method, or try statement, or if/else ternary</div>	y	y	
What if we need sorted dictionary keys in Python?	Use dictionary keys() method and sort with list sort() method, then step through result with for loop<div><br /></div><div>&gt;&gt;&gt; Ks = list(D.keys())</div><div>&gt;&gt;&gt; Ks.sort()</div><div>['a', 'b', 'c']</div><div>&gt;&gt;&gt; for key in Ks:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print(key, '=&gt;', D[key]) # 3.X print, in 2.X remove parentheses</div><div><br /></div><div><div>a =&gt; 1</div></div><div><div>b =&gt; 2</div></div><div><div>c =&gt; 3</div></div>			
Python Tuple	immutable sequence, usually coded with parentheses instead of square brackets, which is built by commas. Parentheses aren't needed where commas don't otherwise matter, such as:<div><br /></div><div>&gt;&gt;&gt; T = 'spam', 3.0, [11, 22, 33]</div><div>&gt;&gt;&gt; T[1]</div><div>3.0</div><div><br /></div>	y		
Python set syntax	New in 3.X and 2.7, sets use {...}, as they are like keys in a valueless dictionary:<div><br /></div><div>&gt;&gt;&gt; X = set('spam')</div><div>&gt;&gt;&gt; Y = {'h', 'a', 'm'}</div><div>&gt;&gt;&gt; X, Y</div><div>({'m', 'a', 'p', 's'}, {'m', 'a', 'h'})</div><div><div><div><div>&gt;&gt;&gt; X &amp; Y # intersection</div><div>{'m', 'a'}</div></div><div><div>&gt;&gt;&gt; X | Y # union</div><div><div><div>{'m', 'h', 'a', 'p', 's'}</div></div><div><div><div>&gt;&gt;&gt; X - Y # difference</div><div>{'p', 's'}</div></div><div><div>&gt;&gt;&gt; X &gt; Y # superset</div><div><div><div>False</div></div><div><br /></div><div></div></div></div></div><div></div></div></div></div></div>		y	
Python objects and names commonly initialized with this value	None			
Python Booleans	True and False objects, essentially just 0 and 1 with custom display logic			
Python type differences 2.X and 3.X	<div>2.X:<div>&gt;&gt;&gt; type(L)</div><div>&lt;type 'list'&gt;</div><div>&gt;&gt;&gt; type(type(L))</div><div>&lt;type 'type'&gt;</div><div><br /></div><div>3.X:<div>&gt;&gt;&gt; type(L)</div><div>&lt;class 'list'&gt;</div><div>&gt;&gt;&gt; type(type(L))</div><div>&lt;class 'type'&gt;</div></div></div>		y	
Python type checking	<div><div>&gt;&gt;&gt; if type(L) == type([]):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print('yes')</div><div><br /></div><div>yes</div></div><div><div>&gt;&gt;&gt; if type(L) == list:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print('yes')</div><div><br /></div><div>yes</div></div><div><div>&gt;&gt;&gt; if isinstance(L, list):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; print('yes')</div><div><br /></div><div>yes</div></div>		y	
Find version available on Homebrew	brew search <i>keyword</i><div>brew info <i>result</i></div>			
Command line convert hex to decimal	"echo $((0x<i>15a</i>))<div><br /></div><div>printf '%d\n' 0x<i>15a</i></div><div><br /></div><div>perl -e 'printf (""%d\n"", 0x<i>15a</i>)'</div><div><br /></div><div>echo 'ibase=16;obase=A;<i>15A</i>' | bc</div><div><br /></div><div>Note that ibase and obase specify the input and the output notation respectively.&nbsp;By default, the notation for both is decimal unless you change it using ibase or obase.&nbsp;Because you change the notation to hex using ibase, your obase needs to be specified in hex (A in hex = 10 in decimal).&nbsp;The input number (15A) needs to be in UPPER case. 15a will give you a parse error.</div><div><br /></div>"	y	y	
lscpu	<div>Gathers CPU architecture information like number of CPUs, threads, cores, sockets, NUMA nodes, information about&nbsp;CPU caches, CPU family, model, bogoMIPS, byte order and stepping from sysfs and /proc/cpuinfo, &nbsp;and &nbsp;prints &nbsp;it &nbsp;in &nbsp;a&nbsp;human-readable format. &nbsp;It supports both online and offline CPUs. &nbsp;It can also print out in a parsable format, including how different caches are shared by different CPUs, which can be fed to other programs.</div>	y	y	
nproc	print the number of processing units available	y		command
$?	previous command return code in Bash	y		command
Simulate cron environment in a script	<div>Add this to your cron:</div><div><br /></div><div><code>30 08 * * * env &gt; ~/cronenv</code></div><div><br /></div><div>After it runs, do this:</div><div><br /></div><div><code>env - `cat ~/cronenv` /bin/sh</code></div><div><code><br /></code></div><div><code>note: if adding that to the global /etc/crontab, you'll need the username too:</code></div><div><code><br /></code></div><div><code>* * * * * root env &gt; ~/cronenv</code></div>	y	y	
Typical default cron environment	<div>HOME (user's home directory)</div><div>LOGNAME (user's login)</div><div>PATH=/usr/bin:/usr/sbin:. (usually no longer . for sec reasons)</div><div>SHELL=/usr/bin/sh</div>	y	y	
Connect forked Git repo to original	git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git			
Sync forked Git repo with original	<div># git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</div><div>git fetch upstream</div><div>git checkout master</div><div>git merge upstream/master</div>	y	y	
printf quoted	"printf ""%q\n"" ""$(tput bold)"""			
how to&nbsp;use find and xargs&nbsp;together	"<div>If you use find and xargs together, you should use -print0 to separate filenames with a null character rather than new lines. You then need to use -0 with xargs.</div><div><br /></div><div>david% touch ""foo bar""</div><div>david% find | xargs ls</div><div>ls: ./foo: No such file or directory</div><div>ls: bar: No such file or directory</div><div>david% find -print0 | xargs -0 ls</div><div>./foo bar</div>"			
prevent reading uninitialized variables in shell	set -o nounset<div>set -u</div>			
make shell exit on any nonzero return	set -e<div>set -o errexit</div>			
how to check $? if using set -e	"Can not do this:<div><div>command</div><div>if [ ""$?""-ne 0]; then echo ""command failed""; exit 1; fi</div></div><div><br /></div><div>Can do this:</div><div>command || { echo ""command failed""; exit 1; }</div><div><br /></div><div>Or:</div><div>if ! command; then echo ""command failed""; exit 1; fi</div><div><br /></div><div>Or:</div><div><div>set +e</div><div>command1</div><div>command2</div><div>set -e</div></div><div><br /></div>"			
disable pipe returning code of last command	set -o pipefail			
List all signals you can trap	kill -l			
Shell trap	"<div>if [ ! -e $lockfile ]; then</div><div>&nbsp; &nbsp;trap ""rm -f $lockfile; exit"" INT TERM EXIT</div><div>&nbsp; &nbsp;touch $lockfile</div><div>&nbsp; &nbsp;critical-section</div><div>&nbsp; &nbsp;rm $lockfile</div><div>&nbsp; &nbsp;trap - INT TERM EXIT</div><div>else</div><div>&nbsp; &nbsp;echo ""critical-section is already running""</div><div>fi</div>"			
Lockfile race condition solution	"<div>It’s worth pointing out that there is a slight race condition in the above lock example between the time we test for the lockfile and the time we create it. A possible solution to this is to use IO redirection and bash’s noclobber mode, which won’t redirect to an existing file. We can use something similar to:</div><div><br /></div><div>if ( set -o noclobber; echo ""$$"" &gt; ""$lockfile"") 2&gt; /dev/null;&nbsp;</div><div>then</div><div>&nbsp; &nbsp;trap 'rm -f ""$lockfile""; exit $?' INT TERM EXIT</div><div><br /></div><div>&nbsp; &nbsp;critical-section</div><div><br /></div><div>&nbsp; &nbsp;rm -f ""$lockfile""</div><div>&nbsp; &nbsp;trap - INT TERM EXIT</div><div>else</div><div>&nbsp; &nbsp;echo ""Failed to acquire lockfile: $lockfile.""&nbsp;</div><div>&nbsp; &nbsp;echo ""Held by $(cat $lockfile)""</div><div>fi</div>"			
find .. in shell history	grep \\.\\. ~/.zsh_history			
bash for range	for i in {1..1000}; do; echo i; done			
zsh synonym for true	:			
change to prevoius directory	cd -	y		
replace first &lt;old&gt; with &lt;new&gt; in current directory path	cd &lt;old&gt; &lt;new&gt;	y		
directory stack	pushd dirname<div><br /></div><div>popd</div>	y		
null byte in GNU sed	\x00	y		
null byte	\0	y		
echo -n	echo		-n			<div>suppress trailing newline</div>			
echo -e	echo		-e			enable interpretation of backslash-escaped characters			
echo -E	echo		-E			disable interpretation of backslash-escaped characters			
echo $?	echo	return status code			return status code	always <b>0</b>			
\a	backslash escaped alert (bell)	y		
\b	backslash escaped backspace	y		
\c	backslash escaped suppress trailing newline	y		
\e	backslash escaped escape character	y		
\f	backslash escaped form feed	y		
\n	backslash escaped new line	y		
\r	backslash escaped carriage return	y		
\t	backslash escaped horizontal tab	y		
\v	backslash escaped vertical tab	y		
\\	backslash escaped backslash	y		
\0<b><i>nnn</i></b>	<div>backslash escaped eight-bit character whose value is the octal value&nbsp;<b><i>nnn</i></b> (zero to three octal digits)</div>	y		
\x<b><i>HH</i></b>	<div>backslash escaped eight-bit character whose value is the hexadecimal&nbsp;value <i><b>HH</b></i> (one or two hex digits)</div>	y		
Zsh&nbsp;startup files	<div>$ZDOTDIR/.zshenv</div><div>$ZDOTDIR/.zprofile</div><div>$ZDOTDIR/.zshrc</div><div>$ZDOTDIR/.zlogin</div><div>$ZDOTDIR/.zlogout</div><div><br /></div><div>If ZDOTDIR is not set, then the value of HOME is used.</div><div><br /></div><div>`.zshenv' is sourced on all invocations of the shell, unless the -f option is set. It should contain commands to set the command search path, plus other important environment variables. `.zshenv' should not contain commands that produce output or assume the shell is attached to a tty.</div><div><br /></div><div>`.zshrc' is sourced in interactive shells. It should contain commands to set up aliases, functions, options, key bindings, etc.</div><div><br /></div><div>`.zlogin' is sourced in login shells. It should contain commands that should be executed only in login shells. `.zlogout' is sourced when login shells exit. `.zprofile' is similar to `.zlogin', except that it is sourced before `.zshrc'. `.zprofile' is meant as an alternative to `.zlogin' for ksh fans; the two are not intended to be used together, although this could certainly be done if desired. `.zlogin' is not the place for alias definitions, options, environment variable settings, etc.; as a general rule, it should not change the shell environment at all. Rather, it should be used to set the terminal type and run a series of external commands (fortune, msgs, etc).&nbsp;</div>			
unset shell function	<b>unset -f</b> my_function<div><b>unfunction</b> my_function (zsh)</div>			
<div>mv second_file.txt{.new,}</div>	mv second_file.txt.new second_file.txt	f		
grep --version	grep		-V	--version		Output the version number of <b>grep</b> and exit.			
grep --extended-regexp	grep	variant	-E	--extended-regexp	egrep	Interpret <u>PATTERN</u> as an extended regular expression (ERE).	<div>grep [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div>grep [<u>OPTIONS</u>] [-e <u>PATTERN</u> | -f <u>FILE</u>] [<u>FILE</u>...]</div>		
grep --fixed-strings	grep	variant	-F	--fixed-strings	fgrep	<div>Interpret <u>PATTERN</u> as a list of fixed strings (instead of regular expressions), separated by newlines, any of which is to be matched.</div>	<div>grep [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div>grep [<u>OPTIONS</u>] [-e <u>PATTERN</u> | -f <u>FILE</u>] [<u>FILE</u>...]</div>		
grep --basic-regexp	grep		-G <u>PATTERN</u>	--basic-regexp <u>PATTERN</u>		Interpret <u>PATTERN</u> as a basic regular expression (BRE). This is the default.			
grep --perl-regexp	grep		-P	--perl-regexp		<div>Interpret the pattern as a Perl-compatible regular expression (PCRE). This is highly experimental and <b>grep</b> may warn of unimplemented features.</div>	<div><div>grep [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div>grep [<u>OPTIONS</u>] [-e <u>PATTERN</u> | -f <u>FILE</u>] [<u>FILE</u>...]</div></div>		
grep --regexp	grep		-e <u>PATTERN</u>	--regexp=<u>PATTERN</u>		"<div>Use <u>PATTERN</u> as the pattern. If this option is used multiple times or is combined with the <b>-f</b> (<b>--file</b>) option, search for all patterns given. This option can be used to protect a pattern beginning with ""-"".</div>"	<div><div><b>grep</b> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><b>grep</b> [<u>OPTIONS</u>] [<b>-e</b> <u>PATTERN</u> | <b>-f</b> <u>FILE</u>] [<u>FILE</u>...]</div></div>		
grep --file	grep		-f <u>FILE</u>	--file=<u>FILE</u>		<div>Obtain patterns from <u>FILE</u>, one per line. If this option is used multiple times or is combined with the <b>-e</b> (<b>--regexp</b>) option, search for all patterns given. The empty file contains zero patterns, and therefore matches nothing.</div>	<div><div><b>grep</b> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><b>grep</b> [<u>OPTIONS</u>] [<b>-e</b> <u>PATTERN</u> | <b>-f</b> <u>FILE</u>] [<u>FILE</u>...]</div></div>		
grep --ignore-case	grep		-i	--ignore-case		Ignore case distinctions in both the <u>PATTERN</u> and the input files.	"<div><div><b><div>grep -i ""the"" demo_file</div></b></div></div>"		
grep --invert-match	grep		-v	--invert-match		Invert the sense of matching, to select non-matching lines.	<div><div><b>grep</b> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><b>grep</b> [<u>OPTIONS</u>] [<b>-e</b> <u>PATTERN</u> | <b>-f</b> <u>FILE</u>] [<u>FILE</u>...]</div></div>		
grep --word-regexp	grep		-w	--word-regexp		<div><div><div>Select only those lines containing matches that form whole words. The test is that the matching substring must either be at the beginning of the line, or preceded by a non-word constituent character. Similarly, it must be either at the end of the line or followed by a non-word constituent character. Word-constituent characters are letters, digits, and the underscore. This option has no effect if <b>-x</b> is also specified.</div></div></div>	<div><div><b>grep</b> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><b>grep</b> [<u>OPTIONS</u>] [<b>-e</b> <u>PATTERN</u> | <b>-f</b> <u>FILE</u>] [<u>FILE</u>...]</div></div>		
grep --line-regexp	grep		-x	--line-regexp		Select only those matches that exactly match the whole line. For a regular expression pattern, this is like parenthesizing the pattern and then surrounding it with <b>^</b> and <b>$</b>.	<div><div><b>grep</b> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><b>grep</b> [<u>OPTIONS</u>] [<b>-e</b> <u>PATTERN</u> | <b>-f</b> <u>FILE</u>] [<u>FILE</u>...]</div></div>		
grep -y	grep		-y			Obsolete synonym for <b>-i</b>.			
grep --count	grep		-c	--count		<div>Suppress normal output; instead print a count of matching lines for each input file. With the <b>-v</b>, <b>--invert-match</b> option (see below), count non-matching lines.</div>			
grep --color	grep	long option		--color[=<u>WHEN</u>]	grep &#8209;&#8209;colour[=<u>WHEN</u>]	<div>Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of context lines) with escape sequences to display them in color on the terminal. The colors are defined by the environment variable <b>GREP_COLORS</b>. The deprecated environment variable <b>GREP_COLOR</b> is still supported, but its setting does not have priority. <u>WHEN</u> is <b>never</b>, <b>always</b>, or <b>auto</b>.</div>			
grep --files-without-match	grep		-L	--files-without-match		<div>Suppress normal output; instead print the name of each input file from which no output would normally have been printed. The scanning will stop on the first match.</div>			
grep --files-with-matches	grep		-l	--files-with-matches		<div>Suppress normal output; instead print the name of each input file from which output would normally have been printed. The scanning will stop on the first match.</div>			
grep --max-count	grep		-m <u>NUM</u>	--max-count=<u>NUM</u>		<div>Stop reading a file after <u>NUM</u> matching lines. If the input is standard input from a regular file, and <u>NUM</u> matching lines are output, <b>grep</b> ensures that the standard input is positioned to just after the last matching line before exiting, regardless of the presence of trailing context lines. This enables a calling process to resume a search. When <b>grep</b> stops after <u>NUM</u> matching lines, it outputs any trailing context lines. When the <b>-c</b> or <b>--count</b> option is also used,<b> grep</b> does not output a count greater than <u>NUM</u>. When the <b>-v</b> or <b>--invert-match</b> option is also used, <b>grep</b> stops after outputting <u>NUM </u>non-matching lines.</div>			
grep --only-matching	grep		-o	--only-matching		Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.			
grep --quiet	grep	long option	-q	--quiet	grep --silent	<div>Quiet; do not write anything to standard output. Exit immediately with zero status if any match is found, even if an error was detected. Also see the <b>-s</b> or <b>--no-messages</b> option.</div>			
grep --no-messages	grep		-s	--no-messages		<div>Suppress error messages about nonexistent or unreadable files.</div>			
grep --byte-offset	grep		-b	--byte-offset		Print the 0-based byte offset within the input file before each line of output. If <b>-o</b> (<b>--only-matching</b>) is specified, print the offset of the matching part itself.			
grep --with-filename	grep		-H	--with-filename		Print the file name for each match. This is the default when there is more than one file to search.			
grep --no-filename	grep		-h	--no-filename		Suppress the prefixing of file names on output. This is the default when there is only one file (or only standard input) to search.			
grep --label	grep			--label=<u>LABEL</u>		Display input actually coming from standard input as input coming from file <u>LABEL</u>. This is especially useful when implementing tools like <b>zgrep</b>. See also the <b>-H</b> option.	<div><div><div>gzip -cd foo.gz | grep --label=foo -H something</div></div></div>		
grep --line-number	grep		-n	--line-number		<div>Prefix each line of output with the 1-based line number within its input file. (<b>-n</b> is specified by POSIX.) </div>			
grep --initial-tab	grep		-T	--initial-tab		<div>Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal. This is useful with options that prefix their output to the actual content: <b>-H</b>, <b>-n</b>, and<b> -b</b>. In order to improve the probability that lines from a single file will all start at the same column, this also causes the line number and byte offset (if present) to be printed in a minimum size field width. </div>			
grep --unix-byte-offsets	grep		-u	--unix-byte-offsets		<div>Report Unix-style byte offsets. This switch causes <b>grep</b> to report byte offsets as if the file were a Unix-style text file, i.e., with CR characters stripped off. This will produce results identical to running <b>grep</b> on a Unix machine. This option has no effect unless <b>-b</b> option is also used; it has no effect on platforms other than MS-DOS and MS -Windows. </div>			
grep --null	grep		-Z	--null		Output a zero byte (the ASCII <b>NUL</b> character) instead of the character that normally follows a file name. For example, <b>grep -lZ</b> outputs a zero byte after each file name instead of the usual newline. This option makes the output unambiguous, even in the presence of file names containing unusual characters like newlines. This option can be used with commands like <b>find -print0, perl -0, sort -z</b>, and <b>xargs -0</b> to process arbitrary file names, even those that contain newline characters.			
grep --after-context	grep		-A <u>NUM</u>	--after-context=<u>NUM</u>		<div>Print <u>NUM</u> lines of trailing context after matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the <b>-o</b> or <b>--only-matching</b> option, this has no effect and a warning is given. </div>	"<div><div><div><b>grep -A 3 -i ""example"" demo_text</b></div></div></div>"		
grep --before-context	grep		-B <u>NUM</u>	--before-context=<u>NUM</u>		<div>Print <u>NUM</u> lines of leading context before matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the <b>-o</b> or <b>--only-matching</b> option, this has no effect and a warning is given.</div>			
grep --context	grep		[-C |-]<u>NUM</u>	--context=<u>NUM</u>		<div>Print <u>NUM</u> lines of output context. Places a line containing a group separator (<b>--</b>) between contiguous groups of matches. With the <b>-o</b> or <b>--only-matching</b> option, this has no effect and a warning is given.</div>			
grep --recursive	grep		-(R|r)	--recursive		<div>Read all files under each directory, recursively; this is equivalent to the <b>-d recurse</b> option.</div>			
grep --include	grep			--include=<u>GLOB</u>		<div>Search only files whose base name matches <u>GLOB</u> (using wildcard matching as described under <b>&#8209;&#8209;exclude</b>). </div>			
grep --<b>exclude</b>	grep			--<b>exclude</b>=<u>GLOB</u>		Skip files whose base name matches <u>GLOB</u> (using wildcard matching). A file-name glob can use <b>*</b>, <b>?</b>, and <b>[...]</b> as wildcards, and <b>\</b> to quote a wildcard or backslash character literally.			
grep --<b>exclude-from</b>	grep			--<b>exclude-from=<u>FILE</u></b>		Skip files whose base name matches any of the file-name globs read from <u>FILE</u> (using wildcard matching as described under <b>--exclude</b>).			
grep --<b>exclude-dir</b>	grep			--<b>exclude-dir=<u>DIR</u></b>		Exclude directories matching the pattern <u>DIR</u> from recursive searches.			
grep -I	grep		-I			<div>Process a binary file as if it did not contain matching data; this is equivalent to the <b>--binary-files=without-match</b> option. </div>			
grep --text	grep		-a	--text		Process a binary file as if it were text; this is equivalent to the <b>--binary-files=text</b> option.			
grep --line-buffered	grep			--line-buffered		<div>Use line buffering on output. This can cause a performance penalty. </div>			
grep --binary	grep		-U	--binary		<div>Treat the <b>file</b>(s) as binary. By default, under MS-DOS and MS -Windows, <b>grep</b> guesses the file type by looking at the contents of the first 32KB read from the file. If <b>grep</b> decides the file is a text file, it strips the CR characters from the original file contents (to make regular expressions with <b>^</b> and <b>$</b> work correctly). Specifying <b>-U</b> overrules this guesswork, causing all files to be read and passed to the matching mechanism verbatim; if the file is a text file with CR/LF pairs at the end of each line, this will cause some regular expressions to fail. This option has no effect on platforms other than MS-DOS and MS -Windows. </div>			
grep --null-data	grep		-z	--null-data		<div>Treat the input as a set of lines, each terminated by a zero byte (the ASCII NUL character) instead of a newline. Like the <b>-Z</b> or <b>--null</b> option, this option can be used with commands like <b>sort -z</b> to process arbitrary file names. </div>			
rsync --version	rsync			--version		<div>Print the <b>rsync</b> version number and exit.</div>			
rsync --verbose	rsync		-v	--verbose		<div> This option increases the amount of information you are given during the transfer. By default, rsync works silently. A single <b>-v</b> will give you information about what files are being transferred and a brief summary at the end. Two <b>-v</b> options will give you information on what files are being skipped and slightly more information at the end. More than two <b>-v</b> options should only be used if you are debugging rsync. </div><div>Note that the names of the transferred files that are output are done using</div><div> a default <b>--out-format</b> of <b>lq%n%Lrq</b>, which tells you just the name of the file and, if the item is a link, where it points. At the single <b>-v</b> level of verbosity, this does not mention when a file gets its attributes changed. If you ask for an itemized list of changed attributes (either <b>--itemize-changes</b> or adding <b>lq%irq</b> to the <b>--out-format</b> setting), the output (on the client) increases to mention all items that are changed in any way. See the <b>--out-format</b> option for more details. </div>			
rsync --quiet	rsync		-q	--quiet		<div>This option decreases the amount of information you are given during the transfer, notably suppressing information messages from the remote server. This option is useful when invoking rsync from cron.</div>			
rsync --no-motd	rsync			--no-motd		<div>This option affects the information that is output by the client at the start of a daemon transfer. This suppresses the message-of-the-day (MOTD) text, but it also affects the list of modules that the daemon sends in response to the lqrsync host::rq request (due to a limitation in the rsync protocol), so omit this option if you want to request the list of modules from the daemon.</div>			
rsync --ignore-times	rsync		-I	--ignore-times		Normally rsync will skip any files that are already the same size and have the same modification timestamp. This option turns off this lqquick checkrq behavior, causing all files to be updated.			
rsync --checksum	rsync		-c	--checksum		<div>This changes the way rsync checks if the files have been changed and are in need of a transfer. Without this option, rsync uses a lqquick checkrq that (by default) checks if each file's size and time of last modification match between the sender and receiver. This option changes this to compare a 128-bit checksum for each file that has a matching size. Generating the checksums means that both sides will expend a lot of disk I/O reading all the data in the files in the transfer (and this is prior to any reading that will be done to transfer changed files), so this can slow things down significantly. </div><div>The sending side generates its checksums while it is doing the file-system</div><div> scan that builds the list of the available files. The receiver generates its checksums when it is scanning for changed files, and will checksum any file that has the same size as the corresponding sender's file: files with either a changed size or a changed checksum are selected for transfer. </div><div>Note that rsync always verifies that each transferred file was</div><div> correctly reconstructed on the receiving side by checking a whole-file checksum that is generated as the file is transferred, but that automatic after-the-transfer verification has nothing to do with this option's before-the-transfer lqDoes this file need to be updated?rq check. </div><div>For protocol 30 and beyond (first supported in 3.0.0), the checksum used is</div><div> MD5. For older protocols, the checksum used is MD4.</div>			
rsync --archive	rsync	expanded form	-a	--archive	rsync <b>-rlptgoD</b>	<div>This is equivalent to <b>-rlptgoD</b>. It is a quick way of saying you want recursion and want to preserve almost everything (with <b>-H</b> being a notable omission). The only exception to the above equivalence is when <b>--files-from</b> is specified, in which case <b>-r</b> is not implied.</div><div><br /></div><div>Note that <b>-a</b> does not preserve hardlinks, because finding multiply-linked files is expensive. You must separately specify <b>-H</b>.</div>			
rsync <b>--no-OPTION</b>	rsync			<b>--no-OPTION</b>		<div>You may turn off one or more implied options by prefixing the option name with lqno-rq. Not all options may be prefixed with a lqno-rq: only options that are implied by other options (e.g. <b>--no-D</b>, <b>--no-perms</b>) or have different defaults in various circumstances (e.g. <b>--no-whole-file, --no-blocking-io, --no-dirs</b>). You may specify either the short or the long option name after the lqno-rq prefix (e.g. <b>--no-R</b> is the same as <b>--no-relative</b>). </div><div><br /></div><div>For example: if you want to use <b>-a</b> (<b>--archive</b>) but don't want <b>-o</b> (<b>--owner</b>), instead of converting <b>-a</b> into <b>-rlptgD</b>, you could specify <b>-a --no-o</b> (or <b>-a --no-owner</b>).</div><div><br /></div><div>The order of the options is important: if you specify <b>--no-r -a</b>, the <b>-r</b> option would end up being turned on, the opposite of <b>-a --no-r</b>. Note also that the side-effects of the <b>--files-from</b> option are NOT positional, as it affects the default state of several options and slightly changes the meaning of<b> -a</b> (see the <b>--files-from</b> option for more details).</div>			
rsync <b>--size-only</b>	rsync			<b>--size-only</b>		<div>This modifies rsync's lqquick checkrq algorithm for finding files that need to be transferred, changing it from the default of transferring files with either a changed size or a changed last-modified time to just looking for files that have changed in size. This is useful when starting to use rsync after using another mirroring system which may not preserve timestamps exactly. </div>			
rsync <b>--modify-window</b>	rsync			<b>--modify-window</b>		<div>When comparing two timestamps, rsync treats the timestamps as being equal if they differ by no more than the modify-window value. This is normally 0 (for an exact match), but you may find it useful to set this to a larger value in some situations. In particular, when transferring to or from an MS Windows FAT filesystem (which represents times with a 2-second resolution), <b>--modify-window=1</b> is useful (allowing times to differ by up to 1 second).</div>			
rsync <b>--recursive</b>	rsync		<b>-r</b>	<b>--recursive</b>		<div>This tells rsync to copy directories recursively. See also <b>--dirs</b> (<b>-d</b>). </div><div><br /></div><div>Beginning with rsync 3.0.0, the recursive algorithm used is now an incremental scan that uses much less memory than before and begins the transfer after the scanning of the first few directories have been completed. This incremental scan only affects our recursion algorithm, and does not change a non-recursive transfer. It is also only possible when both ends of the transfer are at least version 3.0.0.</div><div><br /></div><div>Some options require <b>rsync</b> to know the full file list, so these options disable the incremental recursion mode. These include: <b>--delete-before, --delete-after, --prune-empty-dirs</b>, and <b>--delay-updates</b>. Because of this, the default delete mode when you specify <b>--delete</b> is now <b>--delete-during</b> when both ends of the connection are at least 3.0.0 (use <b>--del</b> or <b>--delete-during</b> to request this improved deletion mode explicitly). See also the <b>--delete-delay</b> option that is a better choice than using <b>--delete-after</b>.</div><div> </div><div>Incremental recursion can be disabled using the <b>--no-inc-recursive</b> option or its shorter <b>--no-i-r</b> alias. </div>			
rsync <b>--relative</b>	rsync		<b>-R</b>	<b>--relative</b>		"<div><div>Use relative paths. This means that the full path names specified on the command line are sent to the server rather than just the last parts of the filenames. This is particularly useful when you want to send several different directories at the same time. For example, if you used this command:</div><div><br /></div><div><b>rsync -av /foo/bar/baz.c remote:/tmp/</b></div><div><br /></div><div>this would create a file named <b>baz.c</b> in <b>/tmp/</b> on the remote machine. If instead you used</div><div><br /></div><div><b>rsync -avR /foo/bar/baz.c remote:/tmp/</b></div><div><br /></div><div>then a file named <b>/tmp/foo/bar/baz.c</b> would be created on the remote machine, preserving its full path. These extra path elements are called ""implied directories"" (i.e. the ""foo"" and the ""foo/bar"" directories in the above example).</div><div><br /></div><div>Beginning with <b>rsync</b> 3.0.0, <b>rsync</b> always sends these implied directories as real directories in the file list, even if a path element is really a symlink on the sending side. This prevents some really unexpected behaviors when copying the full path of a file that you didn't realize had a symlink in its path. If you want to duplicate a server-side symlink, include both the symlink via its path, and referent directory via its real path. If you're dealing with an older <b>rsync</b> on the sending side, you may need to use the <b>--no-implied-dirs</b> option.</div><div><br /></div><div>It is also possible to limit the amount of path information that is sent as implied directories for each path you specify. With a modern <b>rsync</b> on the sending side (beginning with 2.6.7), you can insert a dot and a slash into the source path, like this:</div><div><br /></div><div><b>rsync -avR /foo/./bar/baz.c remote:/tmp/</b></div><div><br /></div><div>That would create <b> /tmp/bar/baz.c</b> on the remote machine. (Note that the dot must be followed by a slash, so ""/foo/."" would not be abbreviated.) For older <b>rsync</b> versions, you would need to use a chdir to limit the source path. For example, when pushing files:</div><div><br /></div><div><b>(cd /foo; rsync -avR bar/baz.c remote:/tmp/)</b></div><div><br /></div><div><br /></div><div>(Note that the parens put the two commands into a sub-shell, so that the ""cd"" command doesn't remain in effect for future commands.) If you're pulling files from an older rsync, use this idiom (but only for a non-daemon transfer):</div><div><br /></div><div><b>rsync -avR --rsync-path=""cd /foo; rsync"" \</b></div><div><b> remote:bar/baz.c /tmp/</b></div></div>"			
rsync --info	rsync			--info=FLAGS		fine-grained informational verbosity			
rsync --debug	rsync			--debug=FLAGS		fine-grained debug verbosity			
rsync --msgs2stderr	rsync			--msgs2stderr		special output handling for debugging			
rsync --quiet	rsync		-q	--quiet		suppress non-error messages			
rsync --no-motd	rsync			--no-motd		suppress daemon-mode <u>MOTD</u> (see caveat)			
rsync --checksum	rsync		-c	--checksum		skip based on checksum, not mod-time & size			
rsync --archive	rsync		-a	--archive		archive mode; equals <b>-rlptgoD</b> (no <b>-H,-A,-X</b>)			
rsync --no-implied-dirs	rsync			--no-implied-dirs		don't send implied dirs with <b>--relative</b>			
rsync --backup	rsync		-b	--backup		make backups (see <b>--suffix</b> & <b>--backup-dir</b>)			
rsync --backup-dir	rsync			--backup-dir=DIR		make backups into hierarchy based in <u>DIR</u>			
rsync --suffix	rsync			--suffix=SUFFIX		backup suffix (default ~ w/o <b>--backup-dir</b>)			
rsync --update	rsync		-u	--update		skip files that are newer on the receiver			
rsync --inplace	rsync			--inplace		update destination files in-place			
rsync --append	rsync			--append		append data onto shorter files			
rsync --append-verify	rsync			--append-verify		<b>--append</b> w/old data in file checksum			
rsync --dirs	rsync		-d	--dirs		transfer directories without recursing			
rsync --links	rsync		-l	--links		copy symlinks as symlinks			
rsync --copy-links	rsync		-L	--copy-links		transform symlink into referent file/dir			
rsync --copy-unsafe-links	rsync			--copy-unsafe-links		"only ""unsafe"" symlinks are transformed"			
rsync --safe-links	rsync			--safe-links		ignore symlinks that point outside the tree			
rsync --munge-links	rsync			--munge-links		munge symlinks to make them safer			
rsync --copy-dirlinks	rsync		-k	--copy-dirlinks		transform symlink to dir into referent dir			
rsync --keep-dirlinks	rsync		-K	--keep-dirlinks		treat symlinked dir on receiver as dir			
rsync --hard-links	rsync		-H	--hard-links		preserve hard links			
rsync --perms	rsync		-p	--perms		preserve permissions			
rsync --fileflags	rsync			--fileflags		preserve file-flags (aka chflags)			
rsync --executability	rsync		-E	--executability		preserve executability			
rsync --chmod	rsync			--chmod=CHMOD		affect file and/or directory permissions			
rsync --acls	rsync		-A	--acls		preserve ACLs (implies <b>-p</b>)			
rsync --xattrs	rsync		-X	--xattrs		preserve extended attributes			
rsync --hfs-compression	rsync			--hfs-compression		preserve <u>HFS</u> compression if supported			
rsync --protect-decmpfs	rsync			--protect-decmpfs		preserve <u>HFS</u> compression as xattrs			
rsync --owner	rsync		-o	--owner		preserve owner (super-user only)			
rsync --group	rsync		-g	--group		preserve group			
rsync --devices	rsync			--devices		preserve device files (super-user only)			
rsync --specials	rsync			--specials		preserve special files			
rsync -D	rsync		-D			same as <b>--devices</b> <b>--specials</b>			
rsync --times	rsync		-t	--times		preserve modification times			
rsync --crtimes	rsync		-N	--crtimes		preserve create times (newness)			
rsync --omit-dir-times	rsync		-O	--omit-dir-times		omit directories from <b>--times</b>			
rsync --omit-link-times	rsync		-J	--omit-link-times		omit symlinks from <b>--times</b>			
rsync --super	rsync			--super		receiver attempts super-user activities			
rsync --fake-super	rsync			--fake-super		store/recover privileged attrs using xattrs			
rsync --sparse	rsync		-S	--sparse		handle sparse files efficiently			
rsync --preallocate	rsync			--preallocate		allocate dest files before writing			
rsync --dry-run	rsync		-n	--dry-run		perform a trial run with no changes made			
rsync --whole-file	rsync		-W	--whole-file		copy files whole (w/o delta-xfer algorithm)			
rsync --one-file-system	rsync		-x	--one-file-system		don't cross filesystem boundaries			
rsync --block-size	rsync		-B	--block-size=SIZE		force a fixed checksum block-size			
rsync --rsh	rsync		-e	--rsh=COMMAND		specify the remote shell to use			
rsync --rsync-path	rsync			--rsync-path=PROGRAM		specify the rsync to run on remote machine			
rsync --existing	rsync			--existing		skip creating new files on receiver			
rsync --ignore-existing	rsync			--ignore-existing		skip updating files that exist on receiver			
rsync --remove-source-files	rsync			--remove-source-files		sender removes synchronized files (non-dir)			
rsync --del	rsync			--del		an alias for <b>--delete-during</b>			
rsync --delete	rsync			--delete		delete extraneous files from dest dirs			
rsync --delete-before	rsync			--delete-before		receiver deletes before xfer, not during			
rsync --delete-during	rsync			--delete-during		receiver deletes during the transfer			
rsync --delete-delay	rsync			--delete-delay		find deletions during, delete after			
rsync --delete-after	rsync			--delete-after		receiver deletes after transfer, not during			
rsync --delete-excluded	rsync			--delete-excluded		also delete excluded files from dest dirs			
rsync --ignore-missing-args	rsync			--ignore-missing-args		ignore missing source args without error			
rsync --delete-missing-args	rsync			--delete-missing-args		delete missing source args from destination			
rsync --ignore-errors	rsync			--ignore-errors		delete even if there are I/O errors			
rsync --force-delete	rsync			--force-delete		force deletion of dirs even if not empty			
rsync --force-change	rsync			--force-change		affect user/system immutable files/dirs			
rsync --force-uchange	rsync			--force-uchange		affect user-immutable files/dirs			
rsync --force-schange	rsync			--force-schange		affect system-immutable files/dirs			
rsync --max-delete	rsync			--max-delete=NUM		don't delete more than <u>NUM</u> files			
rsync --max-size	rsync			--max-size=SIZE		don't transfer any file larger than <u>SIZE</u>			
rsync --min-size	rsync			--min-size=SIZE		don't transfer any file smaller than <u>SIZE</u>			
rsync --partial	rsync			--partial		keep partially transferred files			
rsync --partial-dir	rsync			--partial-dir=DIR		put a partially transferred file into <u>DIR</u>			
rsync --delay-updates	rsync			--delay-updates		put all updated files into place at end			
rsync --prune-empty-dirs	rsync		-m	--prune-empty-dirs		prune empty directory chains from file-list			
rsync --numeric-ids	rsync			--numeric-ids		don't map uid/gid values by user/group name			
rsync --usermap	rsync			--usermap=STRING		custom username mapping			
rsync --groupmap	rsync			--groupmap=STRING		custom groupname mapping			
rsync --chown	rsync			--chown=USER:GROUP		simple username/groupname mapping			
rsync --timeout	rsync			--timeout=SECONDS		set I/O timeout in seconds			
rsync --contimeout	rsync			--contimeout=SECONDS		set daemon connection timeout in seconds			
rsync --ignore-times	rsync		-I	--ignore-times		don't skip files that match size and time			
rsync --size-only	rsync			--size-only		skip files that match in size			
rsync --temp-dir	rsync		-T	--temp-dir=DIR		create temporary files in directory <u>DIR</u>			
rsync --fuzzy	rsync		-y	--fuzzy		find similar file for basis if no dest file			
rsync --compare-dest	rsync			--compare-dest=DIR		also compare received files relative to <u>DIR</u>			
rsync --copy-dest	rsync			--copy-dest=DIR		... and include copies of unchanged files			
rsync --link-dest	rsync			--link-dest=DIR		hardlink to files in <u>DIR</u> when unchanged			
rsync --compress	rsync		-z	--compress		compress file data during the transfer			
rsync --compress-level	rsync			--compress-level=NUM		explicitly set compression level			
rsync --skip-compress	rsync			--skip-compress=LIST		skip compressing files with suffix in <u>LIST</u>			
rsync --cvs-exclude	rsync		-C	--cvs-exclude		auto-ignore files in the same way <u>CVS</u> does			
rsync --filter	rsync		-f	--filter=RULE		add a file-filtering <u>RULE</u>			
rsync -F	rsync		-F			same as <b>--filter='dir-merge /.rsync-filter'</b>			
rsync --exclude	rsync			--exclude=PATTERN		exclude files matching <u>PATTERN</u>			
rsync --exclude-from	rsync			--exclude-from=FILE		read exclude patterns from <u>FILE</u>			
rsync --include	rsync			--include=PATTERN		don't exclude files matching <u>PATTERN</u>			
rsync --include-from	rsync			--include-from=FILE		read include patterns from <u>FILE</u>			
rsync --files-from	rsync			--files-from=FILE		read list of source-file names from <u>FILE</u>			
rsync --from0	rsync		-0	--from0		all *from/filter files are delimited by 0s			
rsync --protect-args	rsync		-s	--protect-args		no space-splitting; wildcard chars only			
rsync --address	rsync			--address=ADDRESS		bind address for outgoing socket to daemon			
rsync --port	rsync			--port=PORT		specify double-colon alternate port number			
rsync --sockopts	rsync			--sockopts=OPTIONS		specify custom <u>TCP</u> options			
rsync --blocking-io	rsync			--blocking-io		use blocking I/O for the remote shell			
rsync --outbuf	rsync			--outbuf=N|L|B		set out buffering to None, Line, or Block			
rsync --stats	rsync			--stats		give some file-transfer stats			
rsync --8-bit-output	rsync		-8	--8-bit-output		leave high-bit chars unescaped in output			
rsync --human-readable	rsync		-h	--human-readable		output numbers in a human-readable format			
rsync --progress	rsync			--progress		show progress during transfer			
rsync -P	rsync		-P			same as <b>--partial</b> <b>--progress</b>			
rsync --itemize-changes	rsync		-i	--itemize-changes		output a change-summary for all updates			
rsync --remote-option	rsync		-M	--remote-option=OPTION		send <u>OPTION</u> to the remote side only			
rsync --out-format	rsync			--out-format=FORMAT		output updates using the specified <u>FORMAT</u>			
rsync --log-	rsync			--log-file=FILE		log what we're doing to the specified <u>FILE</u>			
rsync --log-file-format	rsync			--log-file-format=FMT		log updates using the specified <u>FMT</u>			
rsync --password-file	rsync			--password-file=FILE		read daemon-access password from <u>FILE</u>			
rsync --list-only	rsync			--list-only		list the files instead of copying them			
rsync --bwlimit	rsync			--bwlimit=RATE		limit socket I/O bandwidth			
rsync --write-batch	rsync			--write-batch=FILE		write a batched update to <u>FILE</u>			
rsync --only-write-batch	rsync			--only-write-batch=FILE		like <b>--write-batch</b> but w/o updating dest			
rsync --read-batch	rsync			--read-batch=FILE		read a batched update from <u>FILE</u>			
rsync --protocol	rsync			--protocol=NUM		force an older protocol version to be used			
rsync --iconv	rsync			--iconv=CONVERT_SPEC		request charset conversion of filenames			
rsync --checksum-seed	rsync			--checksum-seed=NUM		set block/file checksum seed (advanced)			
rsync --ipv4	rsync		-4	--ipv4		prefer IPv4			
rsync --ipv6	rsync		-6	--ipv6		prefer IPv6			
rsync -F -F	rsync		-F -F			same as <b>--filter='dir-merge /.rsync-filter' --filter='- .rsync-filter'</b>			
tar @<u>archive</u>	tar		@<u>archive</u>			(<b>c</b> and <b>r</b> mode only) The specified archive is opened and the entries in it will be appended to the current archive. As a simple example, <b>tar -c -f <u>-</u> <u>newfile</u> @<u>original.tar</u></b> writes a new archive to standard output containing a file <u>newfile</u> and all of the entries from <u>original.tar</u>. In contrast, <b>tar -c -f <u>-</u> <u>newfile</u> <u>original.tar</u></b> creates a new archive with only two entries. Similarly, <b>tar -czf <u>-</u> <b>--format</b> pax @<u>-</u></b> reads an archive from standard input (whose format will be determined automatically) and converts it into a gzip-compressed pax-format archive on stdout. In this way, <b>tar</b> can be used to convert archives from one format to another.			
tar -b	tar		-b <u>blocksize</u>			Specify the block size, in 512-byte records, for tape drive I/O. As a rule, this argument is only needed when reading from or writing to tape drives, and usually not even then as the default block size of 20 records (10240 bytes) is very common.			
tar -C	tar		-C <u>directory</u>			In <b>c</b> and <b>r</b> mode, this changes the directory before adding the following files. In <b>x</b> mode, change directories after opening the archive but before extracting entries from the archive.			
tar --check-links	tar			--check-links		(<b>c</b> and <b>r</b> modes only) Issue a warning message unless all links to each file are archived.			
tar --chroot	tar			--chroot		(<b>x</b> mode only) <b>chroot</b>() to the current directory after processing any <b>-C</b> options and before extracting any files.			
tar --exclude	tar			--exclude <u>pattern</u>		Do not process files or directories that match the specified pattern. Note that exclusions take precedence over patterns or filenames specified on the command line.			
tar --format	tar			--format <u>format</u>		(<b>c</b>, <b>r</b>, and <b>u</b> mode only) Use the specified format for the created archive. Supported formats include <b>cpio</b>, <b>pax</b>, <b>shar</b>, and <b>ustar</b>. Other formats may also be supported; see <b>libarchive-formats</b>(5) for more information about currently supported formats. In <b>r</b> and <b>u</b> modes, when extending an existing archive, the format specified here must be compatible with the format of the existing archive on disk.			
tar -f	tar		-f <u>file</u>			Read the archive from or write the archive to the specified file. The filename can be <b>-</b> for standard input or standard output.			
tar -H	tar		-H			(<b>c</b> and <b>r</b> mode only) Symbolic links named on the command line will be followed; the <b>tar</b>get of the link will be archived, not the link itself.			
tar -h	tar		-h			(<b>c</b> and <b>r</b> mode only) Synonym for <b>-L.</b>			
tar -I	tar		-I			Synonym for <b>-T.</b>			
tar --include	tar			--include <u>pattern</u>		Process only files or directories that match the specified pattern. Note that exclusions specified with <b>--exclude</b> take precedence over inclusions. If no inclusions are explicitly specified, all entries are processed by default. The <b>--include</b> option is especially useful when filtering archives. For example, the command <b>tar -c -f <u>new.tar</u> --include='*foo*' @<u>old.tgz</u></b> creates a new archive <u>new.tar</u> containing only the entries from <u>old.tgz</u> containing the string `foo'.			
tar -j	tar		-j			(<b>c</b> mode only) Compress the resulting archive with <b>bzip2</b>(1). In extract or list modes, this option is ignored. Note that, unlike other <b>tar</b> implementations, this implementation recognizes bzip2 compression automatically when reading archives.			
tar -k	tar		-k			(<b>x</b> mode only) Do not overwrite existing files. In particular, if a file appears more than once in an archive, later copies will not overwrite earlier copies.			
tar --keep-newer-files	tar			--keep-newer-files		(<b>x</b> mode only) Do not overwrite existing files that are newer than the versions appearing in the archive being extracted.			
tar -L	tar		-L			(<b>c</b> and <b>r</b> mode only) All symbolic links will be followed. Normally, symbolic links are archived as such. With this option, the <b>tar</b>get of the link will be archived instead.			
tar -l	tar		-l			This is a synonym for the <b>--check-links</b> option.			
tar -m	tar		-m			(<b>x</b> mode only) Do not extract modification time. By default, the modification time is set to the time stored in the archive.			
tar -n	tar		-n			(<b>c</b>, <b>r</b>, and <b>u</b> modes only) Do not recursively archive the contents of directories.			
tar --newer	tar			--newer <u>date</u>		(<b>c</b>, <b>r</b>, and <b>u</b> modes only) Only include files and directories newer than the specified date. This compares ctime entries.			
tar --newer-mtime	tar			--newer-mtime <u>date</u>		(<b>c</b>, <b>r</b>, and <b>u</b> modes only) Like <b>--newer</b>, except it compares mtime entries instead of ctime entries.			
tar --newer-than	tar			--newer-than <u>file</u>		(<b>c</b>, <b>r</b>, and <b>u</b> modes only) Only include files and directories newer than the specified file. This compares ctime entries.			
tar --newer-mtime-than	tar			--newer-mtime-than <u>file</u>		(<b>c</b>, <b>r</b>, and <b>u</b> modes only) Like <b>--newer-than</b>, except it compares mtime entries instead of ctime entries.			
tar --nodump	tar			--nodump		(<b>c</b> and <b>r</b> modes only) Honor the nodump file flag by skipping this file.			
tar --null	tar			--null		(use with <b>-I</b>, <b>-T</b>, or <b>-X</b>) Filenames or patterns are separated by null characters, not by newlines. This is often used to read filenames output by the <b>-print0</b> option to <b>find</b>(1).			
tar --numeric-owner	tar			--numeric-owner		(<b>x</b> mode only) Ignore symbolic user and group names when restoring archives to disk, only numeric uid and gid values will be obeyed.			
tar -O	tar		-O			(<b>x</b>, <b>t</b> modes only) In extract (<b>-x</b>) mode, files will be written to standard out rather than being extracted to disk. In list (<b>-t</b>) mode, the file listing will be written to stderr rather than the usual stdout.			
tar -o	tar		-o			(<b>x</b> mode) Use the user and group of the user running the program rather than those specified in the archive. Note that this has no significance unless <b>-p</b> is specified, and the program is being run by the root user. In this case, the file modes and flags from the archive will be restored, but ACLs or owner information in the archive will be discarded.			
tar -o	tar		-o			(<b>c</b>, <b>r</b>, and <b>u</b> mode) A synonym for <b>--format</b> <u>ustar</u>			
tar --one-file-system	tar			--one-file-system		(<b>c</b>, <b>r</b>, and <b>u</b> modes) Do not cross mount points.			
tar --options	tar			--options options		<div>Select optional behaviors for particular modules. The argument is a text string containing comma-separated keywords and values. These are passed to the modules that handle particular formats to control how those formats will behave. Each option has one of the following forms:</div><div><ul><li><b>key=value</b><br />The key will be set to the specified value in every module that supports it. Modules that do not support this key will ignore it.</li><li><b>key</b><br />The key will be enabled in every module that supports it. This is equivalent to <b>key=1</b>.</li><li><b>!key</b><br />The key will be disabled in every module that supports it.</li><li><b>module:key=value</b>, <b>module:key</b>, <b>module:!key</b><br />As above, but the corresponding key and value will be provided only to modules whose name matches module.</li></ul></div><div>The currently supported modules and keys are:</div><div><ul><li><b>iso9660:joliet</b><br />Support Joliet extensions. This is enabled by default, use <b>!joliet</b> or <b>iso9660:!joliet</b> to disable.</li><li><b>iso9660:rockridge</b><br />Support Rock Ridge extensions. This is enabled by default, use <b>!rockridge</b> or <b>iso9660:!rockridge</b> to disable.</li><li><b>gzip:compression-level</b><br />A decimal integer from 0 to 9 specifying the <b>gzip</b> compression level.</li><li><b>xz:compression-level</b><br />A decimal integer from 0 to 9 specifying the <b>xz</b> compression level.</li><li><b>mtree:keyword</b><br />The <b>mtree</b> writer module allows you to specify which mtree keywords will be included in the output. Supported keywords include: <b>cksum</b>, <b>device</b>, <b>flags</b>, <b>gid</b>, <b>gname</b>, <b>indent</b>, <b>link</b>, <b>md5</b>, <b>mode</b>, <b>nlink</b>, <b>rmd160</b>, <b>sha1</b>, <b>sha256</b>, <b>sha384</b>, <b>sha512</b>, <b>size</b>, <b>time</b>, <b>uid</b>, <b>uname</b>. The default is equivalent to: <b>device</b>, <b>flags</b>, <b>gid</b>, <b>gname</b>, <b>link</b>, <b>mode</b>, <b>nlink</b>, <b>size</b>, <b>time</b>, <b>type</b>, <b>uid</b>, <b>uname</b>.</li><li><b>mtree:all</b><br />Enables all of the above keywords. You can also use <b>mtree:!all</b> to disable all keywords.</li><li><b>mtree:use-set</b><br />Enable generation of <b>/set</b> lines in the output.</li><li><b>mtree:indent</b><br />Produce human-readable output by indenting options and splitting lines to fit into 80 columns.</li><li><b>zip:compression=type</b><br />Use type as compression method. Supported values are store (uncompressed) and deflate (<b>gzip</b> algorithm).</li></ul></div><div>If a provided option is not supported by any module, that is a fatal error.</div>			
tar -P	tar		-P			Preserve pathnames. By default, absolute pathnames (those that begin with a <b>/</b> character) have the leading slash removed both when creating archives and extracting from them. Also, <b>tar</b> will refuse to extract archive entries whose pathnames contain .. or whose <b>tar</b>get directory would be altered by a symlink. This option suppresses these behaviors.			
tar -p	tar		-p			(<b>x</b> mode only) Preserve file permissions. Attempt to restore the full permissions, including owner, file modes, file flags and ACLs, if available, for each item extracted from the archive. By default, newly-created files are owned by the user running <b>tar</b>, the file mode is restored for newly-created regular files, and all other types of entries receive default permissions. If <b>tar</b> is being run by root, the default is to restore the owner unless the <b>-o</b> option is also specified.			
tar --fast-read	tar		-q	--fast-read		(<b>x</b> and <b>t</b> mode only) Extract or list only the first archive entry that matches each pattern or filename operand. Exit as soon as each specified pattern or filename has been matched. By default, the archive is always read to the very end, since there can be multiple entries with the same name and, by convention, later entries overwrite earlier entries. This option is provided as a performance optimization.			
tar -S	tar		-S			(<b>x</b> mode only) Extract files as sparse files. For every block on disk, check first if it contains only NULL bytes and seek over it otherwise. This works similiar to the <b>conv=sparse</b> option of <b>dd</b>.			
tar --strip-components	tar			--strip-components <u>count</u>		(<b>x</b> mode only) Remove the specified number of leading path elements. Pathnames with fewer elements will be silently skipped. Note that the pathname is edited after checking inclusion/exclusion patterns but before security checks.			
tar -s	tar		-s <u>pattern</u>			Modify file or archive member names according to pattern. The pattern has the format <b>/old/new/[gps]</b> where old is a basic regular expression, new is the replacement string of the matched part, and the optional trailing letters modify how the replacement is handled. If old is not matched, the pattern is skipped. Within new, ~ is substituted with the match, 1 to 9 with the content of the corresponding captured group. The optional trailing g specifies that matching should continue after the matched part and stopped on the first unmatched pattern. The optional trailing s specifies that the pattern applies to the value of symbolic links. The optional trailing p specifies that after a successful substitution the original path name and the new path name should be printed to standard error.			
tar -T	tar		-T <u>filename</u>			In <b>x</b> or <b>t</b> mode, <b>tar</b> will read the list of names to be extracted from filename. In <b>c</b> mode, <b>tar</b> will read names to be archived from filename. The special name <b>-C</b> on a line by itself will cause the current directory to be changed to the directory specified on the following line. Names are terminated by newlines unless <b>--null</b> is specified. Note that <b>--null</b> also disables the special handling of lines containing <b>-C.</b>			
tar -U	tar		-U			(<b>x</b> mode only) Unlink files before creating them. Without this option, <b>tar</b> overwrites existing files, which preserves existing hardlinks. With this option, existing hardlinks will be broken, as will any symlink that would affect the location of an extracted file.			
tar --use-compress-program	tar			--use-compress-program <u>program</u>		Pipe the input (in <b>x</b> or <b>t</b> mode) or the output (in <b>c</b> mode) through program instead of using the builtin compression support.			
tar -v	tar		-v			Produce verbose output. In create and extract modes, <b>tar</b> will list each file name as it is read from or written to the archive. In list mode, <b>tar</b> will produce output similar to that of <b>ls</b>(1). Additional <b>-v</b> options will provide additional detail.			
tar --version	tar			--version		Print version of <b>tar</b> and <b>libarchive</b>, and exit.			
tar -w	tar		-w			Ask for confirmation for every action.			
tar -X	tar		-X <u>filename</u>			Read a list of exclusion patterns from the specified file. See <b>--exclude</b> for more information about the handling of exclusions.			
tar -y	tar		-y			(<b>c</b> mode only) Compress the resulting archive with <b>bzip2</b>(1). In extract or list modes, this option is ignored. Note that, unlike other <b>tar</b> implementations, this implementation recognizes <b>bzip2</b> compression automatically when reading archives.			
tar -z	tar		-z			(<b>c</b> mode only) Compress the resulting archive with <b>gzip</b>(1). In extract or list modes, this option is ignored. Note that, unlike other <b>tar</b> implementations, this implementation recognizes <b>gzip</b> compression automatically when reading archives.			
tar -Z	tar		-Z			(<b>c</b> mode only) Compress the resulting archive with <b>compress</b>(1). In extract or list modes, this option is ignored. Note that, unlike other <b>tar</b> implementations, this implementation recognizes <b>compress</b> compression automatically when reading archives.			
find -E	find		-E			Interpret regular expressions followed by <b>-regex</b> and <b>-iregex</b> primaries as extended (modern) regular expressions rather than basic regular expressions (BRE's).  The <b>re_format</b>(7) manual page fully describes both formats.			
find -H	find		-H			Cause the file information and file type (see <b>stat</b>(2)) returned for each symbolic link specified on the command line to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.  File information of all symbolic links not on the command line is that of the link itself.			
find -L	find		-L			<div>Cause the file information and file type (see <b>stat</b>(2)) returned for each symbolic link to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.</div><div>This option is equivalent to the deprecated <b>-follow</b> primary.</div>			
find -P	find		-P			Cause the file information and file type (see <b>stat</b>(2)) returned for each symbolic link to be those of the link itself.  This is the default.			
find -X	find		-X			"<div>Permit find to be safely used in conjunction with xargs(1).  If a file name contains any of the delimiting characters used by xargs(1), a diagnostic message is displayed on standard error, and the file is skipped.  The delimiting characters include single <b>'</b> and double <b>""</b> quotes, backslash <b>\</b>, space, tab and newline characters.</div><div>However, you may wish to consider the <b>-print0</b> primary in conjunction with <b>xargs -0</b> as an effective alternative.</div>"			
find -d	find		-d			<div>Cause find to perform a depth-first traversal, i.e., directories are visited in post-order and all entries in a directory will be acted on before the directory itself.  By default, find visits directories in pre-order, i.e., before their contents.  Note, the default is not a breadth-first traversal.</div><div>This option is equivalent to the <b>-depth</b> primary of IEEE Std 1003.1-2001 (<b>POSIX.1</b>).  The <b>-d</b> option can be useful when find is used with <b>cpio</b>(1) to process files that are contained in directories with unusual permissions.  It ensures that you have write permission while you are placing files in a directory, then sets the directory's permissions as the last thing.</div>			
find -f	find		-f			Specify a file hierarchy for find to traverse.  File hierarchies may also be specified as the operands immediately following the options.			
find -s	find		-s			Cause find to traverse the file hierarchies in lexicographical order, i.e., alphabetical order within each directory.  Note: <b>find -s</b> and <b>find | sort</b> may give different results.			
find -x	find		-x			<div>Prevent find from descending into directories that have a device number different than that of the file from which the descent began.</div><div>This option is equivalent to the deprecated <b>-xdev</b> primary.</div>			
diff --ignore-case	diff		-i	--ignore-case		Ignore case differences in file contents.			
diff --ignore-file-name-case	diff			--ignore-file-name-case		Ignore case when comparing file names.			
diff --no-ignore-file-name-case	diff			--no-ignore-file-name-case		Consider case when comparing file names.			
diff --ignore-tab-expansion	diff		-E	--ignore-tab-expansion		Ignore changes due to tab expansion.			
diff --ignore-space-change	diff		-b	--ignore-space-change		Ignore changes in the amount of white space.			
diff --ignore-all-space	diff		-w	--ignore-all-space		Ignore all white space.			
diff --ignore-blank-lines	diff		-B	--ignore-blank-lines		Ignore changes whose lines are all blank.			
diff --ignore-matching-lines	diff		-I <u>RE</u>	--ignore-matching-lines=<u>RE</u>		Ignore changes whose lines all match <u>RE</u>.			
diff --strip-trailing-cr	diff			--strip-trailing-cr		Strip trailing carriage return on input.			
diff --text	diff		-a	--text		Treat all files as text.			
diff --context	diff	short option	-c&nbsp;<u>NUM</u>	--context[=<u>NUM</u>]	-C <u>NUM</u>	Output <u>NUM</u> (default 3) lines of copied context.			
diff --unified	diff	short option	-u&nbsp;<u>NUM</u>	--unified[=<u>NUM</u>]	-U <u>NUM</u>	Output <u>NUM</u> (default 3) lines of unified context.			
diff --label	diff			--label <u>LABEL</u>		Use <u>LABEL</u> instead of file name.			
diff --show-c-function	diff		-p	--show-c-function		Show which C function each change is in.			
diff --show-function-line	diff		-F <u>RE</u>	--show-function-line=<u>RE</u>		Show the most recent line matching <u>RE</u>.			
diff --brief	diff		-q	--brief		Output only whether files differ.			
diff --ed	diff		-e	--ed		Output an <b>ed</b> script.			
diff --normal	diff			--normal		Output a normal diff.			
diff --rcs	diff		-n	--rcs		Output an RCS format diff.			
diff --side-by-side	diff		-y	--side-by-side		Output in two columns.			
diff --width	diff		-W <u>NUM</u>	--width=<u>NUM</u>		Output at most <u>NUM</u> (default 130) print columns.			
diff --left-column	diff			--left-column		Output only the left column of common lines.			
diff --suppress-common-lines	diff			--suppress-common-lines		Do not output common lines.			
diff --ifdef	diff		-D <u>NAME</u>	--ifdef=<u>NAME</u>		Output merged file to show <b>#ifdef <u>NAME</u></b> diffs.			
diff --<u>GTYPE</u>-group-format	diff			--<u>GTYPE</u>-group-format=<u>GFMT</u>		<div>Similar, but format <u>GTYPE</u> input groups with <u>GFMT</u>.</div><div><u>LTYPE</u> is <b>old</b>, <b>new</b>, or <b>unchanged</b>. <u>GTYPE</u> is <u>LTYPE</u> or <b>changed</b>.</div><div><u>GFMT</u> may contain:</div><ul><li><b>%<</b>: lines from <u>FILE1</u></li><li><b>%></b>: lines from <u>FILE2</u></li><li><b>%=</b>: lines common to <u>FILE1</u> and <u>FILE2</u></li><li><b>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}<u>LETTER</u></b>: <b>printf</b>-style spec for <u>LETTER</u></li></ul><div>LETTERs are as follows for new group, lower case for old group:</div><ul><li><b>F</b>: first line number</li><li><b>L</b>: last line number</li><li><b>N</b>: number of lines = <b>L-F+1</b></li><li><b>E</b>: <b>F-1</b></li><li><b>M</b>: <b>L+1</b></li></ul><div>LFMT may contain:</div><ul><li><b>%L</b>: contents of line</li><li><b>%l</b>: contents of line, excluding any trailing newline</li><li><b>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}n</b>: <b>printf</b>-style spec for input line number</li></ul><div>Either <u>GFMT</u> or <u>LFMT</u> may contain:</div><ul><li><b>%%</b>: %</li><li><b>%c'C'</b>: the single character C</li><li><b>%c'\OOO'</b>: the character with octal code OOO</li></ul>			
diff --line-format	diff			--line-format=<u>LFMT</u>		<div>Similar, but format all input lines with <u>LFMT</u>.</div><div><u>LTYPE</u> is <b>old</b>, <b>new</b>, or <b>unchanged</b>. <u>GTYPE</u> is <u>LTYPE</u> or <b>changed</b>.</div><div><u>GFMT</u> may contain:</div><ul><li><b>%<</b>: lines from <u>FILE1</u></li><li><b>%></b>: lines from <u>FILE2</u></li><li><b>%=</b>: lines common to <u>FILE1</u> and <u>FILE2</u></li><li><b>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}<u>LETTER</u></b>: <b>printf</b>-style spec for <u>LETTER</u></li></ul><div>LETTERs are as follows for new group, lower case for old group:</div><ul><li><b>F</b>: first line number</li><li><b>L</b>: last line number</li><li><b>N</b>: number of lines = <b>L-F+1</b></li><li><b>E</b>: <b>F-1</b></li><li><b>M</b>: <b>L+1</b></li></ul><div>LFMT may contain:</div><ul><li><b>%L</b>: contents of line</li><li><b>%l</b>: contents of line, excluding any trailing newline</li><li><b>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}n</b>: <b>printf</b>-style spec for input line number</li></ul><div>Either <u>GFMT</u> or <u>LFMT</u> may contain:</div><ul><li><b>%%</b>: %</li><li><b>%c'C'</b>: the single character C</li><li><b>%c'\OOO'</b>: the character with octal code OOO</li></ul>			
diff --<u>LTYPE</u>-line-format	diff			--<u>LTYPE</u>-line-format=<u>LFMT</u>		<div>Similar, but format <u>LTYPE</u> input lines with <u>LFMT</u>.</div><div><u>LTYPE</u> is <b>old</b>, <b>new</b>, or <b>unchanged</b>. <u>GTYPE</u> is <u>LTYPE</u> or <b>changed</b>.</div><div><u>GFMT</u> may contain:</div><ul><li><b>%<</b>: lines from <u>FILE1</u></li><li><b>%></b>: lines from <u>FILE2</u></li><li><b>%=</b>: lines common to <u>FILE1</u> and <u>FILE2</u></li><li><b>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}<u>LETTER</u></b>: <b>printf</b>-style spec for <u>LETTER</u></li></ul><div>LETTERs are as follows for new group, lower case for old group:</div><ul><li><b>F</b>: first line number</li><li><b>L</b>: last line number</li><li><b>N</b>: number of lines = <b>L-F+1</b></li><li><b>E</b>: <b>F-1</b></li><li><b>M</b>: <b>L+1</b></li></ul><div>LFMT may contain:</div><ul><li><b>%L</b>: contents of line</li><li><b>%l</b>: contents of line, excluding any trailing newline</li><li><b>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}n</b>: <b>printf</b>-style spec for input line number</li></ul><div>Either <u>GFMT</u> or <u>LFMT</u> may contain:</div><ul><li><b>%%</b>: %</li><li><b>%c'C'</b>: the single character C</li><li><b>%c'\OOO'</b>: the character with octal code OOO</li></ul>			
diff --paginate	diff		-l	--paginate		Pass the output through <b>pr</b> to paginate it.			
diff --expand-tabs	diff		-t	--expand-tabs		Expand tabs to spaces in output.			
diff --initial-tab	diff		-T	--initial-tab		Make tabs line up by prepending a tab.			
diff --recursive	diff		-r	--recursive		Recursively compare any subdirectories found.			
diff --new-file	diff		-N	--new-file		Treat absent files as empty.			
diff --unidirectional-new-file	diff			--unidirectional-new-file		Treat absent first files as empty.			
diff --report-identical-files	diff		-s	--report-identical-files		Report when two files are the same.			
diff --exclude	diff		-x <u>PAT</u>	--exclude=<u>PAT</u>		Exclude files that match <u>PAT</u>.			
diff --exclude-from	diff		-X <u>FILE</u>	--exclude-from=<u>FILE</u>		Exclude files that match any pattern in <u>FILE</u>.			
diff --starting-file	diff		-S <u>FILE</u>	--starting-file=<u>FILE</u>		Start with <u>FILE</u> when comparing directories.			
diff --from-file	diff			--from-file=<u>FILE1</u>		Compare <u>FILE1</u> to all operands.  <u>FILE1</u> can be a directory.			
diff --to-file	diff			--to-file=<u>FILE2</u>		Compare all operands to <u>FILE2</u>.  <u>FILE2</u> can be a directory.			
diff --horizon-lines	diff			--horizon-lines=<u>NUM</u>		Keep <u>NUM</u> lines of the common prefix and suffix.			
diff --minimal	diff		-d	--minimal		Try hard to find a smaller set of changes.			
diff --speed-large-files	diff			--speed-large-files		Assume large files and many scattered small changes.			
diff --version	diff		-v	--version		Output version info.			
diff --help	diff			--help		Output this help.			
find -E	find		-E			Interpret regular expressions followed by <b>-regex</b> and <b>-iregex</b> primaries as extended (modern) regular expressions rather than basic regular expressions (BRE's).  The <b>re_format</b>(7) manual page fully describes both formats.			
find -H	find		-H			Cause the file information and file type (see <b>stat</b>(2)) returned for each symbolic link specified on the command line to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.  File information of all symbolic links not on the command line is that of the link itself.			
find -L	find		-L			<div>Cause the file information and file type (see <b>stat</b>(2)) returned for each symbolic link to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.</div><div>This option is equivalent to the deprecated <b>-follow</b> primary.</div>			
find -P	find		-P			Cause the file information and file type (see <b>stat</b>(2)) returned for each symbolic link to be those of the link itself.  This is the default.			
find -X	find		-X			"<div>Permit find to be safely used in conjunction with xargs(1).  If a file name contains any of the delimiting characters used by xargs(1), a diagnostic message is displayed on standard error, and the file is skipped.  The delimiting characters include single <b>'</b> and double <b>""</b> quotes, backslash <b>\</b>, space, tab and newline characters.</div><div>However, you may wish to consider the <b>-print0</b> primary in conjunction with <b>xargs -0</b> as an effective alternative.</div>"			
find -d	find		-d			<div>Cause find to perform a depth-first traversal, i.e., directories are visited in post-order and all entries in a directory will be acted on before the directory itself.  By default, find visits directories in pre-order, i.e., before their contents.  Note, the default is not a breadth-first traversal.</div><div>This option is equivalent to the <b>-depth</b> primary of IEEE Std 1003.1-2001 (<b>POSIX.1</b>).  The <b>-d</b> option can be useful when find is used with <b>cpio</b>(1) to process files that are contained in directories with unusual permissions.  It ensures that you have write permission while you are placing files in a directory, then sets the directory's permissions as the last thing.</div>			
find -f	find		-f			Specify a file hierarchy for find to traverse.  File hierarchies may also be specified as the operands immediately following the options.			
find -s	find		-s			Cause find to traverse the file hierarchies in lexicographical order, i.e., alphabetical order within each directory.  Note: <b>find -s</b> and <b>find | sort</b> may give different results.			
find -x	find		-x			<div>Prevent find from descending into directories that have a device number different than that of the file from which the descent began.</div><div>This option is equivalent to the deprecated <b>-xdev</b> primary.</div>			
find primary -Bmin	find	primary			-Bmin <u>n</u>	True if the difference between the time of a file's inode creation and the time <b>find</b> was started, rounded up to the next full minute, is <b>n</b> minutes.			
find primary -Bnewer	find	primary			-Bnewer <u>file</u>	Same as <b>-newerBm</b>.			
find primary -Btime	find	primary			-Btime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the time of a file's inode creation and the time find was started, rounded up to the next full 24-hour period, is <b>n</b> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the time of a file's inode creation and the time find was started is exactly <b>n</b> units.  Please refer to the <b>-e</b> primary description for information on supported time units.</div>			
find primary -acl	find	primary			-acl	May be used in conjunction with other primaries to locate files with extended ACLs.  See <b>acl</b>(3) for more information.			
find primary -amin	find	primary			-amin <u>n</u>	True if the difference between the file last access time and the time <b>find</b> was started, rounded up to the next full minute, is <b>n</b> minutes.			
find primary -anewer	find	primary			-anewer <u>file</u>	Same as <b>-neweram</b>.			
find primary -atime	find	primary			-atime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the file last access time and the time find was started, rounded up to the next full 24-hour period, is <b>n</b> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the file last access time and the time find was started is exactly <b>n</b> units.  Possible time units are as follows:</div><ul><li><b>s</b>: second</li><li><b>m</b>: minute (60 seconds)</li><li><b>h</b>: hour (60 minutes)</li><li><b>d</b>: day (24 hours)</li><li><b>w</b>: week (7 days)</li></ul><div>Any number of units may be combined in one <b>-atime</b> argument, for example, <b>-atime -1h30m</b>.  Units are probably only useful when used in conjunction with the <b>+</b> or <b>-</b> modifier.</div>			
find primary -cmin	find	primary			-cmin <u>n</u>	True if the difference between the time of last change of file status information and the time find was started, rounded up to the next full minute, is <b>n</b> minutes.			
find primary -cnewer	find	primary			-cnewer <u>file</u>	Same as <b>-newercm</b>.			
find primary -ctime	find	primary			-ctime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the time of last change of file status information and the time find was started, rounded up to the next full 24-hour period, is <b>n</b> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the time of last change of file status information and the time find was started is exactly <b>n</b> units.  Please refer to the <b>-e</b> primary description for information on supported time units.</div>			
find primary -d	find	primary			-d	Same as depth.  GNU <b>find</b> implements this as a primary in mistaken emulation of FreeBSD <b>find</b>(1).			
find primary -delete	find	primary			-delete	Delete found files and/or directories.  Always returns true.  This executes from the current working directory as find recurses down the tree.  It will not attempt to delete a filename with a <b>/</b> character in its pathname relative to <b>.</b> for security reasons.  Depth-first traversal processing is implied by this option.  Following symlinks is incompatible with this option.			
find primary -depth	find	primary			-depth	Always true; same as the <b>-d</b> option.			
find primary -empty	find	primary			-empty	True if the current file or directory is empty.			
find primary -exec	find	primary			-exec <u>utility</u> [argument ...] ;	True if the program named <u>utility</u> returns a zero value as its exit status.  Optional arguments may be passed to the utility.  The expression must be terminated by a semicolon (<b>;</b>).  If you invoke find from a shell you may need to quote the semicolon if the shell would otherwise treat it as a control operator.  If the string <b>{}</b> appears anywhere in the utility name or the arguments it is replaced by the pathname of the current file.  <u>Utility</u> will be executed from the directory from which find was executed.  Utility and arguments are not subject to the further expansion of shell patterns and constructs.			
find primary -execdir	find	primary			-execdir <u>utility</u> [<u>argument</u> ...] ;	The <b>-r</b> primary is identical to the <b>-c</b> primary with the exception that <u>utility</u> will be executed from the directory that holds the current file.  The filename substituted for the string <b>{}</b> is not qualified.			
find primary -flags	find	primary			-flags [-|+]<u>flags</u>,<u>notflags</u>	"<div>The flags are specified using symbolic names (see <b>chflags</b>(1)).  Those with the ""no"" prefix (except ""nodump"") are said to be <u>notflags</u>.  Flags in flags are checked to be set, and flags in <u>notflags</u> are checked to be not set.  Note that this is different from <b>-perm</b>, which only allows the user to specify mode bits that are set.</div><div>If flags are preceded by a dash (<b>-</b>), this primary evaluates to true if at least all of the bits in flags and none of the bits in <u>notflags</u> are set in the file's flags bits.  If flags are preceded by a plus (<b>+</b>), this primary evaluates to true if any of the bits in flags is set in the file's flags bits, or any of the bits in <u>notflags</u> is not set in the file's flags bits.  Otherwise, this primary evaluates to true if the bits in flags exactly match the file's flags bits, and none of the flags bits match those of <u>notflags</u>.</div>"			
find primary -fstype	find	primary			-fstype <u>type</u>	True if the file is contained in a file system of type <u>type</u>.  The <b>lsvfs</b>(1) command can be used to find out the types of file systems that are available on the system.  In addition, there are two pseudo-types, <b>local</b> and <b>rdonly</b>.  The former matches any file system physically mounted on the system where the find is being executed and the latter matches any file system which is mounted read-only.			
find primary -gid	find	primary			-gid <u>gname</u>	The same thing as <b>-group</b> <u>gname</u> for compatibility with GNU <b>find</b>.  GNU <b>find</b> imposes a restriction that <u>gname</u> is numeric, while <b>find</b>(1) does not.			
find primary -group	find	primary			-group <u>gname</u>	True if the file belongs to the group <u>gname</u>.  If <u>gname</u> is numeric and there is no such group name, then <u>gname</u> is treated as a group ID.			
find primary -ignore_readdir_race	find	primary			-ignore_readdir_race	This option is for GNU <b>find</b> compatibility and is ignored.			
find primary -ilname	find	primary			-ilname <u>pattern</u>	Like <b>-lname</b>, but the match is case insensitive.  This is a GNU <b>find</b> extension.			
find primary -iname	find	primary			-iname <u>pattern</u>	Like <b>-name</b>, but the match is case insensitive.			
find primary -inum	find	primary			-inum <u>n</u>	True if the file has inode number <u>n</u>.			
find primary -ipath	find	primary			-ipath <u>pattern</u>	Like <b>-path</b>, but the match is case insensitive.			
find primary -iregex	find	primary			-iregex <u>pattern</u>	Like <b>-regex</b>, but the match is case insensitive.			
find primary -iwholename	find	primary			-iwholename <u>pattern</u>	The same thing as <b>-ipath</b>, for GNU <b>find</b> compatibility.			
find primary -links	find	primary			-links <u>n</u>	True if the file has <u>n</u> links.			
find primary -lname	find	primary			-lname <u>pattern</u>	Like <b>-name</b>, but the contents of the symbolic link are matched instead of the file name.  Note that this only matches broken symbolic links if symbolic links are being followed.  This is a GNU <b>find</b> extension.			
find primary -ls	find	primary			-ls	This primary always evaluates to true.  The following information for the current file is written to standard output: its inode number, size in 512-byte blocks, file permissions, number of hard links, owner, group, size in bytes, last modification time, and pathname.  If the file is a block or character special file, the device number will be displayed instead of the size in bytes.  If the file is a symbolic link, the pathname of the linked-to file will be displayed preceded by <b>-></b>.  The format is identical to that produced by <b>ls -dgils</b>.			
find primary -maxdepth	find	primary			-maxdepth <u>n</u>	Always true; descend at most <u>n</u> directory levels below the command line arguments.  If any <b>-h</b> primary is specified, it applies to the entire expression even if it would not normally be evaluated.  <b>-maxdepth 0</b> limits the whole search to the command line arguments.			
find primary -mindepth	find	primary			-mindepth <u>n</u>	Always true; do not apply any tests or actions at levels less than <u>n</u>.  If any <b>-h</b> primary is specified, it applies to the entire expression even if it would not normally be evaluated.  <b>-mindepth 1</b> processes all but the command line arguments.			
find primary -mmin	find	primary			-mmin <u>n</u>	True if the difference between the file last modification time and the time find was started, rounded up to the next full minute, is <b>n</b> minutes.			
find primary -mnewer	find	primary			-mnewer <u>file</u>	Same as <b>-newer</b>.			
find primary -mount	find	primary			-mount	The same thing as <b>-xdev</b>, for GNU <b>find</b> compatibility.			
find primary -mtime	find	primary			-mtime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the file last modification time and the time find was started, rounded up to the next full 24-hour period, is <u>n</u> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the file last modification time and the time find was started is exactly <u>n</u> units.  Please refer to the <b>-e</b> primary description for information on supported time units.</div>			
find primary -name	find	primary			-name <u>pattern</u>	True if the last component of the pathname being examined matches <u>pattern</u>.  Special shell pattern matching characters (<b>[</b>, <b>]</b>, <b>*</b>, and <b>?</b>) may be used as part of <u>pattern</u>.  These characters may be matched explicitly by escaping them with a backslash (<b>\</b>).			
find primary -newer	find	primary			-newer <u>file</u>	True if the current file has a more recent last modification time than <u>file</u>.			
find primary -newerXY	find	primary			-newerXY <u>file</u>	True if the current file has a more recent last access time (<b>X=a</b>), inode creation time (<b>X=B</b>), change time (<b>X=c</b>), or modification time (<b>X=m</b>) than the last access time (<b>Y=a</b>), inode creation time (<b>Y=B</b>), change time (<b>Y=c</b>), or modification time (Y=m) of <u>file</u>.  In addition, if <b>Y=t</b>, then <u>file</u> is instead interpreted as a direct date specification of the form understood by <b>cvs</b>(1).  Note that <b>-newermm</b> is equivalent to <b>-newer</b>.			
find primary -nogroup	find	primary			-nogroup	True if the file belongs to an unknown group.			
find primary -noignore_readdir_race	find	primary			-noignore_readdir_race	This option is for GNU <b>find</b> compatibility and is ignored.			
find primary -noleaf	find	primary			-noleaf	This option is for GNU <b>find</b> compatibility.  In GNU <b>find</b> it disables an optimization not relevant to <b>find</b>(1), so it is ignored.			
find primary -nouser	find	primary			-nouser	True if the file belongs to an unknown user.			
find primary -ok	find	primary			-ok <u>utility</u> [<u>argument</u> ...] ;	The <b>-k</b> primary is identical to the <b>-c</b> primary with the exception that find requests user affirmation for the execution of the utility by printing a message to the terminal and reading a response.  If the response is not affirmative (<b>y</b> in the <b>POSIX</b> locale), the command is not executed and the value of the <b>-ok</b> expression is false.			
find primary -okdir	find	primary			-okdir <u>utility</u> [<u>argument</u> ...] ;	The <b>-r</b> primary is identical to the <b>-r</b> primary with the same exception as described for the <b>-k</b> primary.			
find primary -path	find	primary			-path <u>pattern</u>	True if the pathname being examined matches pattern.  Special shell pattern matching characters (<b>[</b>, <b>]</b>, <b>*</b>, and <b>?</b>) may be used as part of pattern.  These characters may be matched explicitly by escaping them with a backslash (<b>\</b>).  Slashes (<b>/</b>) are treated as normal characters and do not have to be matched explicitly.			
find primary -perm	find	primary			-perm [-|+]<u>mode</u>	The mode may be either symbolic (see <b>chmod</b>(1)) or an octal number.  If the mode is symbolic, a starting value of zero is assumed and the mode sets or clears permissions without regard to the process' file mode creation mask.  If the mode is octal, only bits <b>07777</b> (<b>S_ISUID</b> | <b>S_ISGID</b> | <b>S_ISTXT</b> | <b>S_IRWXU</b> | <b>S_IRWXG</b> | <b>S_IRWXO</b>) of the file's mode bits participate in the comparison.  If the mode is preceded by a dash (<b>-</b>), this primary evaluates to true if at least all of the bits in the mode are set in the file's mode bits.  If the mode is preceded by a plus (<b>+</b>), this primary evaluates to true if any of the bits in the mode are set in the file's mode bits.  Otherwise, this primary evaluates to true if the bits in the mode exactly match the file's mode bits.  Note, the first character of a symbolic mode may not be a dash (<b>-</b>).			
find primary -print	find	primary			-print	This primary always evaluates to true.  It prints the pathname of the current file to standard output.  If none of <b>-exec</b>, <b>-ls</b>, <b>-print</b>, <b>-print0</b>, or <b>-ok</b> is specified, the given expression shall be effectively replaced by ( given expression ) <b>-print</b>.			
find primary -print0	find	primary			-print0	This primary always evaluates to true.  It prints the pathname of the current file to standard output, followed by an ASCII <b>NUL</b> character (character code <b>0</b>).			
find primary -prune	find	primary			-prune	This primary always evaluates to true.  It causes find to not descend into the current file.  Note, the <b>-e</b> primary has no effect if the <b>-d</b> option was specified.			
find primary -regex	find	primary			-regex <u>pattern</u>	True if the whole path of the file matches <u>pattern</u> using regular expression.  To match a file named <b>./foo/xyzzy</b>, you can use the regular expression <b>.*/[xyz]*</b> or <b>.*/foo/.*</b>, but not <b>xyzzy</b> or <b>/foo/</b>.			
find primary -samefile	find	primary			-samefile <u>name</u>	True if the file is a hard link to <u>name</u>.  If the command option <b>-L</b> is specified, it is also true if the file is a symbolic link and points to name.			
find primary -size	find	primary			-size <u>n</u>[<u>ckMGTP</u>]	<div>True if the file's size, rounded up, in 512-byte blocks is <u>n</u>.  If <u>n</u> is followed by a <u>c</u>, then the primary is true if the file's size is <u>n</u> bytes (characters).  Similarly if <u>n</u> is followed by a scale indicator then the file's size is compared to <u>n</u> scaled as:</div><ul><li><b>k</b>: kilobytes (1024 bytes)</li><li><b>M</b>: megabytes (1024 kilobytes)</li><li><b>G</b>: gigabytes (1024 megabytes)</li><li><b>T</b>: terabytes (1024 gigabytes)</li><li><b>P</b>: petabytes (1024 terabytes)</li></ul>			
find primary -type	find	primary			-type <u>t</u>	<div>True if the file is of the specified type.  Possible file types are as follows:</div><ul><li><b>b</b>: block special</li><li><b>c</b>: character special</li><li><b>d</b>: directory</li><li><b>f</b>: regular file</li><li><b>l</b>: symbolic link</li><li><b>p</b>: FIFO</li><li><b>s</b>: socket</li></ul>			
find primary -uid	find	primary			-uid <u>uname</u>	The same thing as <b>-user</b> <u>uname</u> for compatibility with GNU <b>find</b>.  GNU <b>find</b> imposes a restriction that <u>uname</u> is numeric, while <b>find</b>(1) does not.			
find primary -user	find	primary			-user <u>uname</u>	True if the file belongs to the user <u>uname</u>.  If <u>uname</u> is numeric and there is no such user name, then <u>uname</u> is treated as a user ID.			
find primary -wholename	find	primary			-wholename <u>pattern</u>	The same thing as <b>-path</b>, for GNU <b>find</b> compatibility.			
find primary -xattr	find	primary			-xattr	True if the file has any extended attributes.			
find primary -xattrname	find	primary			-xattrname <u>name</u>	True if the file has an extended attribute with the specified <u>name</u>.			
find operator ( )	find	operator			( <u>expression</u> )	This evaluates to true if the parenthesized expression evaluates to true.			
find operator !	find	operator			! <u>expression</u>	This is the unary NOT operator.  It evaluates to true if the expression is false.			
find operator -not	find	operator			-not <u>expression</u>	This is the unary NOT operator.  It evaluates to true if the expression is false.			
find operator -false	find	operator			-false	Always false.			
find operator -true	find	operator			-true	Always true.			
find operator -and	find	operator			<u>expression</u> -and <u>expression</u>	The <b>-and</b> operator is the logical AND operator.  As it is implied by the juxtaposition of two expressions it does not have to be specified.  The expression evaluates to true if both expressions are true.  The second expression is not evaluated if the first expression is false.			
find operator <u>EXPR</u> <u>EXPR</u>	find	operator			<u>expression</u> <u>expression</u>	The <b>-and</b> operator is the logical AND operator. The expression evaluates to true if either the first or the second expression is true.  The second expression is not evaluated if the first expression is true.			
find operator -or	find	operator			<u>expression</u> -or <u>expression</u>	The <b>-or</b> operator is the logical OR operator.  As it is implied by the juxtaposition of two expressions it does not have to be specified.  The expression evaluates to true if both expressions are true.  The second expression is not evaluated if the first expression is false.			
find primary -type b	find	primary -type			b	block special			
find primary -type c	find	primary -type			c	character special			
find primary -type d	find	primary -type			d	directory			
find primary -type f	find	primary -type			f	regular file			
find primary -type l	find	primary -type			l	symbolic link			
find primary -type p	find	primary -type			p	FIFO			
find primary -type s	find	primary -type			s	socket			
find primary -size k	find	primary -size			k	kilobytes (1024 bytes)			
find primary -size M	find	primary -size			M	megabytes (1024 kilobytes)			
find primary -size G	find	primary -size			G	gigabytes (1024 megabytes)			
find primary -size T	find	primary -size			T	terabytes (1024 gigabytes)			
find primary -size P	find	primary -size			P	petabytes (1024 terabytes)			
find primary -atime s	find	primary -atime			s	second			
find primary -atime m	find	primary -atime			m	minute (60 seconds)			
find primary -atime h	find	primary -atime			h	hour (60 minutes)			
find primary -atime d	find	primary -atime			d	day (24 hours)			
find primary -atime w	find	primary -atime			w	week (7 days)			
find primary -depth<u>n</u>	find	primary			-depth <u>n</u>	True if the depth of the file relative to the starting point of the traversal is <b>n</b>.			
find primary -exec {}	find	primary			-exec <u>utility</u> [<u>argument</u> ...] {} +	Same as <b>-exec</b>, except that <b>{}</b> is replaced with as many pathnames as possible for each invocation of <u>utility</u>.  This behaviour is similar to that of <b>xargs</b>(1).			
find primary -execdir {}	find	primary			-execdir <u>utility</u> [<u>argument</u> ...] {} +	Same as <b>-execdir</b>, except that <b>{}</b> is replaced with as many pathnames as possible for each invocation of <u>utility</u>.  This behaviour is similar to that of <b>xargs</b>(1).			
locate	locate					"<div>Searches a database for all pathnames which match the specified pattern. &nbsp;The database is recomputed periodically (usually weekly or daily), and contains the pathnames of all files which are publicly accessible.</div><div><br /></div><div>Shell globbing and quoting characters (""*"", ""?"", ""\"", ""["" and ""]"") may be used in pattern, although they will have to be escaped from the shell. Preceding any character with a backslash (""\"") eliminates any special meaning which it may have. &nbsp;The matching differs in that no characters must be matched explicitly, including slashes (""/'').</div><div><br /></div><div>As a special case, a pattern containing no globbing characters (""foo"") is matched as though it were *foo*.</div><div><br /></div><div>Historically, locate only stored characters between 32 and 127. &nbsp;The current implementation store any character except newline (`\n') and NUL (`\0'). &nbsp;The 8-bit character support does not waste extra space for plain ASCII file names. &nbsp;Characters less than 32 or greater than 127 are stored in 2 bytes.</div>"	<b>locate</b> [<b>-0Scims</b>] [<b>-l</b> <u>limit</u>] [<b>-d</b> <u>database</u>] <u>pattern</u> ...	y	
locate -0	locate		-0			Print pathnames separated by an ASCII NUL character (character code 0) instead of default NL (newline, character code 10).			
locate -S	locate		-S			Print some statistics about the database and exit.			
locate -c	locate		-c			Suppress normal output; instead print a count of matching file names.			
locate -d	locate		-d <u>database</u>			"<div>Search in database instead of the default file name database. &nbsp;Multiple <b>-d</b> options are allowed. &nbsp;Each additional <b>-d</b> option adds</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the specified database to the list of databases to be searched.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The option database may be a colon-separated list of databases. &nbsp;A single colon is a reference to the default database.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>$ locate -d $HOME/lib/mydb: foo</b></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;will first search string ""foo"" in <b>$HOME/lib/mydb</b> and then in <b>/var/db/locate.database</b>.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$ locate -d $HOME/lib/mydb::/cdrom/locate.database foo</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;will first search string ""foo"" in <b>$HOME/lib/mydb</b> and then in <b>/var/db/locate.database</b> and then in <b>/cdrom/locate.database</b>.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>$ locate -d db1 -d db2 -d db3 pattern</b></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;is the same as</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>$ locate -d db1:db2:db3 pattern</b></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;or</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>$ locate -d db1:db2 -d db3 pattern</b></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;If <b>-</b> is given as the database name, standard input will be read instead. &nbsp;For example, you can compress your database and use:</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>$ zcat database.gz | locate -d - pattern</b></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;This might be useful on machines with a fast CPU and little RAM and slow I/O. &nbsp;Note: you can only use one pattern for stdin.</div>"			
locate -i	locate		-i			<div>Ignore case distinctions in both the pattern and the database.</div>			
locate -l	locate		-l <u>number</u>			<div>Limit output to <u>number</u> of file names and exit.</div>			
locate -m	locate		-m			<div>Use <b>mmap</b>(2) instead of the <b>stdio</b>(3) library. &nbsp;This is the default behavior and is faster in most cases.</div>			
locate -s	locate		-s			<div>Use the <b>stdio</b>(3) library instead of <b>mmap</b>(2).</div>			
apropos	apropos					searches  a  set  of database files containing short descriptions of system commands for keywords and displays the result on the        standard output	apropos&nbsp;<u>keyword</u>	y	
whatis	whatis					Searches  a  set  of  database files containing short descriptions of system commands for keywords and displays the result on the        standard output.  Only complete word matches are displayed.	<b>whatis</b>&nbsp;<u>keyword</u><div><u><br /></u></div><div>The database is created using the command <u>/usr/libexec/makewhatis</u></div>	y	
man [section]	man					<p>Following 8 sections are available in the man page.</p> <ol> <li>General commands</li> <li>System calls</li> <li>C library functions</li> <li>Special files (usually devices, those found in /dev) and drivers</li> <li>File formats and conventions</li> <li>Games and screensavers</li> <li>Miscellaneous</li> <li>System administration commands and daemons</li></ol>	<b><div>$ whatis crontab</div><div>crontab (1) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- maintain crontab files for individual users (V3)</div><div>crontab (5) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- tables for driving cron</div><div><br /></div><div>$ man 5 crontab</div></b>	y	
What is the main characteristic of a  <b>distributed                   version control system                   (DVCS)</b>?	A distributed version control system has no                   central server which                   stores the data. Every local copy contains the full history of the                   source code.                                   	
Does the use of a                   <b>DVCS</b> require a                   central                   code                   repository?                                   	No.	
Where does Git                   <b>commit</b> file changes to?<br />	To the local repository.	
What happens when you <b>clone</b> a                   repository with                    Git?	An exact copy of the                   repository is created locally.<br />	
Does the local clone of a remote repository include the                   complete history of the source code?	Yes.	
What's the meaning of <b>master branch</b>?	"The ""master"" in Git is the default branch, which generally represents the most stable code."	
What is a <b>commit</b>?	A commit is a pointer to a spot&nbsp;(revision)&nbsp;on the code history.	
How are Git commits <b>identified</b>?	Instead of numbering commits, Git uses the code contents of the commit to create a unique, 40 character SHA-1 hash.	
Does a branch created in a repository,&nbsp;which was cloned from another repository, need to have a&nbsp;counterpart in the&nbsp;remote repository?<br /> 	No it doesn't.	
Which two steps are neccessary to persist modifications on a file in the repository?<br />	1. Staging (mark the file to be relevant for Git) = adding the file to the index.<br />2. Commiting: storing the changes in the Git repository.<br />	
What does the term <b>staging</b> describe?	Marking changes as relevant for the version control, by adding them to the index.	
What is a <b>Revision</b>?<br />	A revision represents a version of the source code. Git identifies                                                revisions                                                with SHA-1 IDs using a commit object. SHA-1 IDs are 160 bits long and are                                                represented                                                in                                                hexadecimal. The latest version can be addressed                                                via                                                HEAD, the version before that via                                                HEAD~1                                                and so on.	
In which file does Git store <b>global settings</b>?<br />	In the <b>.gitconfig</b> file.<br />	
Which file tells Git which files and directories to <b>ignore</b>?<br />	<pre>.gitignore</pre>	
What is the difference between <b>local .gitignore</b> and <b>global .gitignore</b> files, regarding visibility?<br />	The local                .gitignore                file can be committed into the Git repository and                therefore is visible                to everyone who clones the repository. The                global                .gitignore                file is only                locally visible.                             	
How are <b>empty directories</b> handled under Git version control / by common practice?	Git ignores empty directories, i.e. it does not put them under version control. Common practice for tracking an empty directory though, is to put a file called <b>.gitkeep</b> into such a directory.<br />	
What does the command <b>git reflog</b>&nbsp;do?<br />	It displays the history of the complete changes of the current branch, based on the HEAD revision.<br />	
Does <b>git reflog</b>&nbsp;also contain deleted commits?	Yes.	
How is the <b>default branch</b> called in Git?<br />	Master.	
What does the term <b>merging</b>&nbsp;describe?<br />	The process of combining changes of two branches.	
What is a <b>merge conflict</b>?<br />	A merge conflict occurs, if two people have modified the same content and Git cannot automatically determine how both changes should be applied.<br />	
What does the <b>rebase</b>&nbsp;command do?<br>	In general terms - rewrites history. E.g: Combining several commits into<br>                  one commit. Or replaying changes from one branch on top of the other.	
What functionality does the <b>stash</b> command add?<br />	Saving the current uncommmitted changes and&nbsp;checkout&nbsp;the last committed revision. This allows pulling-in the latest changes or to develop an urgent fix. Afterwards the stashed changes can be restored, which will reapply the changes to the current version of the source code.<br /> 	
What's the rule of thumb, concerning the <b>stash</b>&nbsp;command?<br />	It should be the exception to using Git. Typically you would create new branches for new features and switch between branches.<br />	
What is a <b>patch file</b>?<br />	A text file that contains changes to the source code.	
What is an <b>alias</b> in Git?	An alias in Git allows you to setup your own Git command. E.g. you can define an alias which is a short form of your own favorite commands or you can combine several commands with an alias.	
Name two <b>transport types</b>&nbsp;that are supported protocols for Git checkouts	The native Git protocol is <b>git</b>, alternatively the <b>http</b> protocol is also supported.	
What happens in regards to naming of the original repository, when <b>cloning</b> a remote repository?<br />	"The original repository will automatically be called ""origin"".<br />"	
What is the possibility of using the <b>HTTP protocol</b> with Git especially helpful for?	If a firewall blocks all requests other than http.<br />	
Which are the two variants of <b>ssh keys</b>?<br />	Public and private.<br />	
What does <b>rev~</b> stand for?	"The first parent of a revision ""rev"""	
What is the starting point of the scope of <b>.gitignore</b> files?	They define ignore definitions for the whole directory tree, starting from the point where the .gitignore file itself resides.	
"What's the difference between <b>git pull</b> and <b>git fetch</b>? (<span style="" font-style: normal; font-weight: normal;"">In the simplest terms)</span>"	git pull does a git fetch followed by a git merge.	
What is the difference between <b>git commit</b> and <b>git push</b>?	<b>commit:</b> adding changes to the repository.<div><b>push</b>: to transfer the last commit(s) to a remote server</div>	
What is the <b>head</b> in Git?	The head is a pointer to the current branch, which is in turn the last commit you made or checked out into your working directory.	
What is the <b>index</b> in Git?	"It's a snapshot of changes contained in your next commit, this way it's the ""<b>proposed next commit</b>""."	
What does <b>head^</b> mean?	It means the first parent of the tip of the current branch.	
What is the difference between <b>head~</b> and <b>head^</b> ?	&nbsp;~&lt;n&gt; means the revision that is the &lt;n&gt;th generation ancestor of the named revision, following only the first parents.<div>^&lt;n&gt; means the &lt;n&gt;th parent of that revision.</div>	
What is a local version control system?	A database of changes kept on the same computer as the files being versioned.	
How is a distributed version control system different from others?	Every client has a full backup of all the data.	
"What is the ""snapshot"" concept?"	In Git, the data is more like a stream of complete snapshots of a mini filesystem rather than a list of file changes like you'll see in SVN, Perforce, etc.	
Why are most git operations so fast?<br>	They happen on the local disk, rather than over a network<br>	
How does git maintain file integrity?<br>	Everything is SHA-1 checksummed and stored not by filename, but rather hash value of each file's contents.<br>	
What are the 3 git states your files can reside in?<br>	committed, modified, and staged<br>	
"What does it mean when a file is in the ""committed"" state?<br>"	The data is safely stored in your local database<br>	
"What does it mean if a file is in the ""modified"" state?<br>"	You have changed the file, but not yet committed it.<br>	
"What does it mean if a file is in the ""staged"" state?<br>"	You have marked a file in its current state to go into the next commit snapshot.<br>	
What are the 3 sections of a git project?<br />	the Git directory (repository), the working directory, and the staging area<br />	
What is stored in the Git directory?<br>	The metadata and object database for your project<br>	
What is copied when you clone a repository from another computer?<br>	the Git directory<br>	
What is the working directory?<br>	A single checkout of one version of the project. These files are pulled out of the compressed database in the git directory and placed on disk for you to use and modify.<br>	
What is the staging area?	"It is a file in the git directory that stores information about what goes into the next commit. It is sometimes referred to as the ""index""."	
What is the 3-step basic git workflow?	1. modify files in working directory<div>2. stage files, adding snapshots of them to the staging area</div><div>3. commit, which takes the files in the staging area and stores that snapshot permanently to your git directory</div>	
Where are the three places that git config variables can be stored?	1. systemwide: &nbsp;/etc/gitconfig<div>2. per user: ~/.gitconfig or ~/.config/git/config</div><div>3. per project: .git/config</div>	
What option do you pass to git config to modify system-level configs?	--system	
What option do you pass to git config to make changes for specific to your user?	--global	
What are three ways to get help on a git verb?	1. git help &lt;verb&gt;<div>2. git &lt;verb&gt; --help</div><div>3. man git-&lt;verb&gt;</div>	
"How do you get a copy of an existing git repository, say https://github.com/libgit2/libgit2<span style=""line-height: 1.1;"">?</span><br>"	git clone&nbsp;https://github.com/libgit2/libgit2	
What are a couple different transfer protocols used by git?	https://<div>git://</div>	
What is the difference between a tracked and untracked file?	Tracked files are all files that were in the last snapshot. They can be unmodified, modified, or staged. Untracked files are not in the latest snapshot or staged.	
Why is it possible for a tracked file to be both in staging and modified state?	"Because the staged version is the contents of the file at the exact time you ran ""git add"" to stage the file. You have to run ""git add"" again if you've modified it and want to stage the latest contents of the file."	
What file is used to ignore some untracked files?	.gitignore	
What is the default shortname for cloned repositories?	origin	
How does git fetch affect your local repository?	It pulls the data, but does not merge or modify your working copy. To actually merge, it must be manually done.	
What is stored in a git commit object?	* pointer to the snapshot of the staged content<div>* author's name and email</div><div>* commit message</div><div>* pointer to the commit(s) directly before this one</div>	
What is a branch in terms of git commit objects?	A lightweight movable pointer to one of the commits	
What is the name of the special pointer which tells you which local branch you're currently on?	HEAD	
What happens to the HEAD pointer when you create a new branch?	Nothing, it continues to point to the existing branch (such as master, if you haven't changed it yet). It does not switch to the new branch automatically.	
What happens to the working directory when you switch branches?	The files are updated to reflect the last commit of the branch. If it cannot be updated cleanly, git will not let you switch.	
Why is a git branch cheap?	A branch is a simple file that contains the 40 character SHA-1 checksum of the commit it points to.	
"What is a ""fast-forward"" merge?"	"When you try to merge a commit that can be reached by following the first commit's history, git will simply move the pointer forward because there is no divergent work to merge together. This is known as a ""fast-forward"" merge."	
What is a merge commit?	When two divergent branches are merged, git creates a new snapshot and a new commit that points to it. A merge commit has more than one parent.	
How is git different in dealing with the merge base when merging branches?	Git determines the best common ancestor to use for its merge base, which is a lot simpler than many other VCSes.	
What does the leading * character mean in the output of git branch?	It indicates the branch you have currently checked out (that HEAD points to).	
What is the name used for a branching workflow where sets of commits graduate to a more stable silo when they're fully tested?<br>	progressive-stability branching<br>	
What is the name for a short-lived branch for a single particular feature or related work?<br>	topic branch<br>	
What are remote branches?<br>	Pointers to the state of branches in remote repositories. They are local branches that you cannot move.<br>	
When are remote branch pointers updated?<br>	They are automatically moved when you do any network communication.<br>	
When you fetch a remote branch, will it automatically set up a local branch with the same name?	No. You must either merge it or create your own branch from it.	
What is the shorthand for referencing the tracking remote and branch?	@{u} or @{upstream}	
How does rebasing affect the commit history differently than a merge?	A rebase will make the commit history look linear/clean rather than a bunch of branch merges. This is often done to make sure your commits apply cleanly to a remote branch.	
What one tip should you follow to avoid a drawback of rebasing?	Do not rebase commits that exist outside of your repository.	
What is a good general rule for deciding when to rebase or to merge?	Rebase local changes you haven't shared yet in order to clean up, but never rebase anything you pushed somewhere.	
"What is a ""bare repository""?"	A repository that doesn't contain a working directory	
Which command will <b>initialize a new, empty repository</b> in the current working directory?	<pre>git init</pre>			
"What command is used to configure the local user's email (""email""), that are used when committing to Git repositories?"	"<pre><span style=""font-family: Arial"">git config --global user.email ""email""</span></pre>"			git shell
What does this command do:&nbsp;<b>git add . &nbsp;</b>	It adds everything inside the current working directory to the index.	
Which commands are needed to <b>add</b> <b>all .js files </b>to the local Git repository?	<pre>git add *.js</pre>			
"Which command will <b>commit</b> to the local repository, including a <b>commit message </b>(""message"")?"	"<pre>git commit -m ""message""</pre>"			
Which command prints&nbsp;&nbsp;the <b>current state</b> of your code/repository?	"<pre style=""text-align: justify;"">git status</pre>"			
Which Git command is used to <b>list the existing branches</b>?	<pre>git branch</pre>		"Ommitting all options to the ""git branch"" command, will list the existing branches."	
"Which command <b>creates</b> a new branch (""branchname"")?"	<pre>git branch branchname</pre>			
"Which command will switch to the branch ""myotherbranch""?"	"<pre style=""line-height: 25px;"">git checkout myotherbranch</pre>"			
"What commands will join everything from the branch ""bigIdea"" to be part of the ""master"" branch?"	<pre>git checkout master</pre> <pre>git merge bigIdea</pre>	
"Which command will delete (even) an unmerged branch (""branchname"")?"	git branch -D branchname			
Which command displays the existing <b>global Git settings</b>?<br />	<pre>git config --list</pre>			
Which command shows<b> commit logs </b>(list of all commits, starting with newest)?<br />	<pre>git log</pre>	<div>For each commit the following info would be displayed</div>1. SHA-1 identifier<br />2. Author and Email<br />3. Date + time of the commit<br />4. Commit message header		
Which command displays all <b>changes to tracked files since the last commit</b>?<br />	<pre>git diff</pre>			
"Which command displays the changes in a <b>specific commit </b>(""commitid"")?"	<pre>git show commitid</pre>			
"Which command displays the <b>change history</b> of a specific file (""filename"")?"	<pre>git log filename</pre>			
"Which command displays which commit and author modified a file (""filename"") on a line by line basis?"	<pre>git blame filename</pre>			
"Which command deletes a file (""filename"")&nbsp;from the working directory and at the same time marks it for the next commit?<br />"	<pre>git rm filename</pre>			
Which command displays the existing defined <b>remote repositories</b>?<br />	<pre>git remote</pre>			
Which command <b>cleans</b>&nbsp;untracked changes in the working directory?	<pre>git clean -f</pre>	"optional:<div>-d to remove untracked directories</div><div>-x remove also ""ignored files""</div>"		
"How can you <b>revert a deleted or changed file </b>(""filename"")<b> that has not yet been added to the index</b>?<br />"	git checkout filename	Add -- after checkout to avoid naming conflicts if you have tag or branch with the same name		
"How can you checkout older revisions of your source code (revision ""commitid"")?<br />"	git checkout commitid	Via checking out specific commit id		
"Which command removes an added file (""filename"") from the index again?<br />"	<pre>git reset filename</pre>			
"How can all changes of a commit (""commitid"") be reverted and a new commit be recorded, which documents that the other commit was reverted?<br />"	<pre>git revert commitid</pre>			
Which command lists the <b>available tags</b>?<br />	<pre>git tag</pre>			
"Which command creates a <b>new tag </b>(""tagname"") <b>with a description&nbsp;</b>(description)?"	<pre>git tag tagname -m 'description'</pre>			
"Which command will <b>check out a specific tag </b>(""tagname"")?"	<pre>git checkout tagname</pre>			
Which command / parameter <b>lists all branches, including remote</b> branches?	<pre>git branch -a</pre>			
Which command <b>creates a new branch </b>(branchname)<b> and switches to it</b>?	git checkout -b branchname			
"Which command would <b>delete </b>the local ""testing"" branch (if it is merged)?<br />"	<pre>git branch -d testing</pre>			
"Which command <b>merges differences</b> of the ""testing"" branch into the current active branch?<br />"	<pre>git merge testing</pre>			
Which default Git tool exists for <b>resolving conflicts</b>, which command starts it?<br />	git mergetool			
Which command would <b>start interactive rebase </b>of the last seven commits?	<pre>git rebase -i HEAD~7</pre>		"More info on interactive mode here:&nbsp;<a href=""https://git-scm.com/docs/git-rebase"">https://git-scm.com/docs/git-rebase</a>"	
"Which command displays <b>which commit deleted a specific file </b>(""filename"")?<br />"	<pre>git log -- filename</pre>			
What is the <b>--</b> option in <b>git log</b>&nbsp;used for?<br />	To see the commit history for a file, even if the file has been deleted.<br />	
"Which command will define an alias ""add-commit"", which<br />                  combines<br /> <b>git add . -A</b><br />                  and<br /> <b>git commit</b>?"	"<pre class=""programlisting"">git config --global alias.add-commit <span class=""hl-string"">'!git add . -A &amp;&amp; git commit'</span></pre>"	! is to specify that it's an external command		
What does the command do: <b>git reset --soft HEAD~</b>	Undo the last commit. The affected files will be back on stage again.	
What does <b>git reset --hard HEAD~</b>&nbsp;do? (instead of HEAD~ it could be also a commit SHA-1 or another reference)	Undo the last commit, unstage files AND undo any changes in the working directory. (Not tracked files won't be affected)	
Which parameter allows you to <b>stage an ignored file</b>?	<pre>--force</pre>			
"Which Git command <b>newly stages a specific file </b>(""filename"")?"	<pre>git add filename</pre>			
"Which command will <b>undo the checking-in of an unwanted change </b>in a file ""filename""&nbsp;(remove the respective file from the index), but keep the changes in the filesystem?"	<pre>git reset filename</pre>			
What is the difference between:<br><pre>git checkout -f</pre> and <pre>git reset --hard HEAD</pre>?	None, with these parameters they do exactly the same.	
Remove main.txt from staging but keep in working (untrack file, after this and commit file would be remove from repo)	git rm --cached main.txt			
"Which command / parameter changes the message of the last commit? (for ""newmessage"")<br />"	"<code>git commit --amend -m ""newmessage""</code><br />"			
"Clone an existing repository (address: ""url"")"	git clone url			
Create a new local repository	git init			
Add some (allows you interactively to choose which) changes in <i>file</i> to the next commit	git add -p <i>file</i>			
Commit all local changes in tracked files	git commit -a			
Commit previously staged changes	git commit			
Change the last commit [only before pushing]	git commit --amend			
"Show changes over time (diffs) for a specific file (""filename"")"	git log -p <i>filename</i>			
Switch HEAD to <i>branch</i>	git checkout<i>&nbsp;branch</i>			
"Create a new branch (name ""nbranch"") based on current HEAD"	git branch n<i>branch</i>			
"Create a new tracking branch (""tbranch"") based on a remote branch (""rbranch"")"	git branch --track t<i>branch</i> <i>rbranch</i>			
"Delete a local branch (""branch"")"	git branch -d <i>branch</i>			
"Mark the current commit with a tag (""tagname"")"	git tag <i>tagname</i>			
"Show information about a remote&nbsp;(""origin"")"	git remote show <i>origin</i>			
Add remote server 'url' with shortname 'myurl'	git remote add myurl url			
"Download all changes from <i>remote&nbsp;</i>(""origin"")&nbsp;but don't integrate into HEAD"	git fetch <i>origin</i>			
"Download changes from remote&nbsp;(""origin"")&nbsp;branch ""branch"" and directly merge into HEAD"	git pull <i>origin</i> <i>branch</i>			
"Publish local changes (for a branch ""branch"") on a remote (""origin"")"	git push <i>origin</i>&nbsp;<i>branch</i>			
"Delete a ""branch"" on the remote&nbsp;(""origin"") (old way)"	git push <i>origin</i>&nbsp;:<i>branch</i>			
Publish your tags	git push --tags			
Merge <i>branch</i> into your current HEAD	git merge <i>branch</i>			
Rebase your current HEAD onto <i>branch</i>	git rebase <i>branch</i>			
Abort a rebase	git rebase --abort			
Continue a rebase after resolving conflicts	git rebase --continue			
Use your configured merge tool to solve conflicts	git mergetool			
Use your editor to manually solve conflicts during merge/rebase and after resolving mark file as resolved with:	git add <i>resolved-file or</i><div>git rm <i>resolved-file</i></div>	uncertain
Discard all local changes in working directory	git reset --hard HEAD			
"Discard local changes in a specific file (""filename"")"	git checkout&nbsp;<i>filename</i>			
Reset your HEAD pointer to some previous <i>commit</i> (and discard all changes since then)	git reset --hard <i>commit</i>			
Reset your HEAD pointer to some previous commit, and preserve all changes as unstaged changes	git reset <i>commit</i>			
"Reset your HEAD pointer to some previous commit (""commit"") and preserve uncommited local changes"	git reset --keep <i>commit</i>	If a file that is different between &lt;commit&gt; and HEAD has local changes, reset is aborted.		
What tool is used to get and set configuration variables that control how git looks and operates?	git config			
What .gitignore pattern would you use to ignore all .txt files in the doc folder?	doc/**/*.txt		"<a href=""https://git-scm.com/docs/gitignore"">https://git-scm.com/docs/gitignore</a>"	
How can you skip the staging area for modified, tracked files when doing a commit?	git commit -a			
How do you delete a <i>file</i> that has been modified and already added to the staging area?	git rm -f file			
"How do you rename or move a file in git (""src"" to ""target"")?"	git mv src target			
What are some of the options to view the commit log history in different formats?	"--pretty=[oneline | short | full | fuller]<div>--pretty=format:""...""</div>"	
How do you view the history for author jdoe with keyword potato in the commit message made in the last two weeks that added or removed a reference to the function mashThePotato that were not merges?	git log --author jdoe --grep potato --all-match -SmashThePotato --since=2.weeks --no-merges	
"Why is git reset considered safe without ""--hard"" option?"	It only affects your staging area	
How do you tag revision 0123abc with the name v1.0?	git tag v1.0 0123abc			
"What happens if you try to delete a branch with ""git branch -d &lt;name&gt;"" that has not yet been merged?"	It will fail, and offer -D if you really want to lose your branch.	
"If you want to use a different name than ""origin"" (eg ""norig"") for the remote when cloning a repository (""repo""), what parameter would you use?<br />"	git clone -o norig repo<br />			
"How would you share a local branch called ""badname"" as ""goodname"" on a remote called ""origin""?<br>"	git push origin badname:goodname<br>			
How would you set up a credential cache so that you don't have to keep typing your password for git push?	git config --global credential.helper cache			
If you have a local branch and you want it to use a remote branch (say origin/hotfix) as upstream, how would you set it?	git branch -u origin/hotfix			
How do you see what tracking branches you have set up?	git branch -vv			
"How would you delete a remote branch (""serverfix"") from the server (""origin"")?"	git push origin --delete serverfix			
How would you use rebase to apply master changes to branch b1, then apply b1 changes to master? The result being a linear history.	<div># method: 1</div>git checkout b1<div>git rebase master</div><div>git checkout master</div><div>git merge b1</div><div><br></div><div># method: 2</div><div>git rebase b1 master</div><div>git checkout master</div><div>git merge b1</div>	
If you have changes on commits that no longer exist upstream (due to a remote rebase), how can you pull in those changes and avoid conflicts that would happen with git pull origin/master?	<div>git pull --rebase origin/master</div>			
"What are limitations of the command that changes the message of the last commit (<span style=""font-family: monospace"">git commit --amend</span>)?"	It only works before the commit has been pushed to remote repo.	git shell
"What command is used to configure the local user's name (""Name""), that are used when committing to Git repositories?"	"<pre>git config --global user.name ""Name""</pre>"			git shell
"Show what file would be delited with ""git clean"" (dry run)"	git clean -n	(or --dry-run)		git shell
"What option should you add to ""git clean"" in order to remove untracked directories"	-d			git shell
"What option should you add to ""git clean"" in order to remove ""ignored"" files"	-x			git shell
"Which command will&nbsp;<b>show the entire history (</b>including renames<b>)&nbsp;</b>for the file (""filename"")?"	<pre>git log --follow -p filename</pre>			git shell
<b>Create a stash</b>&nbsp;with uncommitted changes (analogous to save uncommited changes, and do reset hard)	git stash			command git shell stash
<b>Reapply the stashed changes</b>&nbsp;<b>and</b>&nbsp;<b>delete the stash&nbsp;</b>from the list of stashes	git stash pop			command git shell stash
<b>Reapply the stashed changes</b>&nbsp;without deleting<b>&nbsp;stash&nbsp;</b>from the list of stashes	git stash apply			command git shell stash
Show git stash stack (list of stashes)	git stash list			command git shell stash
Show branches already merged into current branch	git branch --merged			command git shell
Show branches not yet merged into current branch	git branch --no-merged			command git shell
Rebase master onto develop without checking it out	git rebase master develop			command git shell
Show remote servers with URL displayed	git remote -v			command git shell
Rename remote 'server1' to 'server2'	git remote rename server1 server2			command git shell
Remove remote 'server1'	git remote rm server1			command git shell
Show last two commits with diffs	git log -p -2			command git shell
Show commit logs with stats	git log --stat			command git shell
<div>Show commit logs one per line</div>	git log --pretty=oneline			command git shell
Show commit logs with ascii graph	git log --graph			command git shell
Show commit log for the last week	git log --since=1.week			command git shell
<div>Show prev commits for each lines 10-15 of file.rb</div>	git blame -L 10,15 file.rb			command git shell
Reapply stash 2	git stash apply stash@{2}			command git shell
Reapply stashed changes along with the changes in index (staging the changes, for example)	git stash apply --index			command git shell
Drop stash 2	git stash drop stash@{2}			command git shell
Create branch 'mybranch' from stash	git stash branch mybranch			command git shell
Delete all stashes	git stash clear			command git shell
Show what's staged but not yet committed	git diff --staged			command git shell
Start binary search of commits to find bad commit	git bisect start		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
Mark current commit as broken during bisect	git bisect bad		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
<div>Mark current commit as good during bisect</div>	git bisect good		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
Mark v2.2 as last known good commit during bisect (beginning of binary search)	git bisect good v2.2		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
How do you initiate bisect algorithm in git (several commands)	"<div><div>Suppose you are trying to find the commit that broke a feature that was known to work in version v2.6.13-rc2 of your project. You start a bisect session as follows:</div><div><br /></div><div>$ git bisect start</div><div>$ git bisect bad # Current version is bad</div><div>$ git bisect good v2.6.13-rc2 # v2.6.13-rc2 is known to be good</div></div><div><br /></div><a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
Reset to original&nbsp;HEAD when finished with bisect	git bisect reset		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
"Run 'test.sh' on each commit during bisect (automates designation of commit as ""good"" or ""bad"")"	git bisect run test.sh	Note that the script should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.	"<div><a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a></div>"	command git shell
"Search the working directory for ""foo()"""	"git grep ""foo()"""			command git shell
View all the merge conflicts (if your working tree is in corresponding state)	git diff			command git shell
"See differences between two commits (""commitid1"", ""commitid2"")"	git diff commitid1 commitid2			command git shell
"See the files (only filenames) changed between two commits (""commitid1"", ""commitid2"")"	git diff&nbsp;--name-only&nbsp;commitid1 commitid2&nbsp;			command git shell
Undo non-pushed commits (if you are tracking branch origin/master)	git reset origin/master			command git shell
"Apply a patch (""patchname.patch"")"	<div>git apply -v patchname.patch</div>			command git shell
"Re-checkout file (""filename"") or files specified by path to version specified by <i>rev</i> (which may be specified using a SHA1 commit ID, branch name, or tag), overwriting any local changes."	git checkout rev filename			command git shell
Check out the client branch, figure out the patches from the common ancestor of the client and server branches (the common ancestor branched from master in the past), and then replay the patches from client that are not into common ancestor onto master.	git rebase --onto master server client		"Here are some diargrams:&nbsp;<a href=""https://git-scm.com/book/ch3-6.html"">https://git-scm.com/book/ch3-6.html</a>"	command git shell
"Create alias ""co"" for git checkout"	git config --global alias.co checkout			commands git shell
"Add ""unstage"" alias to git (for current user)"	git config --global alias.unstage 'reset HEAD --'			commands git shell
Filter commit by author ('jdoe') in git log	git log --author jdoe			command git log shell
"Filter commit by presense of ""pattern"" in commit message in git log"	git log --grep pattern			command git log shell
What parameter of git log should you use to specify that you want to see only commits matching all given patterns (with --grep option)?	--all-match			command git log shell
Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.	git log -G&lt;regex&gt;		"<a href=""https://git-scm.com/docs/git-log"">https://git-scm.com/docs/git-log</a>"	command git log shell
Stash all changes (including untracked and ignored files)	git stash --all		"<a href=""https://git-scm.com/docs/git-stash"">https://git-scm.com/docs/git-stash</a>"	command git shell
Stash files in repo including untracked files (but not ignored ones)	git stash&nbsp;--include-untracked		"<a href=""https://git-scm.com/docs/git-stash"">https://git-scm.com/docs/git-stash</a>"	command git shell
Start git stash interactive mode (allows you to &nbsp;interactively select changes, that would be stashed)	git stash -p		"<a href=""https://git-scm.com/docs/git-stash"">https://git-scm.com/docs/git-stash</a>"	command git shell
Show status of the repository, ignoring untracked files	git status -uno	or&nbsp;--untracked-files=no. Other options - normal (Shows untracked files and directories),&nbsp;all (default, Also shows individual files in untracked directories).		command git shell
What is wrong with --option=~/file	~ only substituted by shell if leading filename, so needs = replaced by space	
Make the current commit the only (initial) commit in a Git repository?	<div>The only solution that works for me (and keeps submodules working) is</div><div><br /></div><div><b>git checkout --orphan newBranch</b></div><div><b>git add -A &nbsp;# Add all files and commit them</b></div><div><b>git commit</b></div><div><b>git branch -D master &nbsp;# Deletes the master branch</b></div><div><b>git branch -m master &nbsp;# Rename the current branch to master</b></div><div><b>git push -f origin master &nbsp;# Force push master branch to github</b></div><div><b>git gc --aggressive --prune=all &nbsp; &nbsp; # remove the old files</b></div>			