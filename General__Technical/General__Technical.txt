Python byte code cache location	<p><code>.pyc</code> files alongside <code>.py</code> files, or in 3.2 and later, in subdirectory named <code>__pycache__</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDYxMDksICJpZCI6ICIxNDg4Njg1OTc3NTkzLTAwMSIsICJtZCI6ICJgLnB5Y2AgZmlsZXMgYWxvbmdzaWRlIGAucHlgIGZpbGVzLCBvciBpbiAzLjIgYW5kIGxhdGVyLCBpbiBzdWJkaXJlY3RvcnkgbmFtZWQgYF9fcHljYWNoZV9fYFxuIn0=---->		y			
Can Python execute without <code>.py</code> file?	Yes, if the <code>.pyc</code> files are present					
Python byte code is saved for which files?	Anything imported, but not the top level file that is only run as a script.					
Python interactive interpreter automatically	prints					
Force Python to run a file again	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">from</span> <span style=""color: #447fcf; text-decoration: underline"">imp</span> <span style=""color: #6ab825; font-weight: bold"">import</span> <span style=""color: #24909d"">reload</span> <span style=""color: #999999; font-style: italic""># not required to import in 2.X</span> <span style=""color: #24909d"">reload</span><span style=""color: #d0d0d0"">(_script_)</span>  <span style=""color: #6ab825; font-weight: bold"">import</span> <span style=""color: #447fcf; text-decoration: underline"">imp</span> <span style=""color: #999999; font-style: italic""># not required to import in 2.X</span> <span style=""color: #d0d0d0"">imp.reload(_script_)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDYzMjMsICJpZCI6ICIxNDg4Njg3Mjc3NjEwLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgZnJvbSBpbXAgaW1wb3J0IHJlbG9hZFxuICAgICMgbm90IHJlcXVpcmVkIHRvIGltcG9ydCBpbiAyLlhcbiAgICByZWxvYWQoX3NjcmlwdF8pXG4gIFxuICAgIGltcG9ydCBpbXBcbiAgICAjIG5vdCByZXF1aXJlZCB0byBpbXBvcnQgaW4gMi5YXG4gICAgaW1wLnJlbG9hZChfc2NyaXB0XylcbiAgXG4ifQ==---->"					
Reading file with <b>exec</b> in Python	"<p>2.X:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">execfile</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'module.py'</span><span style=""color: #d0d0d0"">)</span>  <span style=""color: #6ab825; font-weight: bold"">exec</span><span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">open</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'module.py'</span><span style=""color: #d0d0d0"">))</span> <span style=""color: #999999; font-style: italic""># automatically reads</span> </pre></div> <p>3.X and 2.X:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825; font-weight: bold"">exec</span><span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">open</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'module.py'</span><span style=""color: #d0d0d0"">).read())</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDYzNTAsICJpZCI6ICIxNDg4Njg4NjIwNzQ0LTAwMSIsICJtZCI6ICIyLlg6XG4gIFxuICAgIDo6OnB5dGhvblxuICAgIGV4ZWNmaWxlKCZhcG9zO21vZHVsZS5weSZhcG9zOylcbiAgXG4gICAgZXhlYyhvcGVuKCZhcG9zO21vZHVsZS5weSZhcG9zOykpICMgYXV0b21hdGljYWxseSByZWFkc1xuICBcbjMuWCBhbmQgMi5YOlxuICBcbiAgICA6OjpweXRob25cbiAgICBleGVjKG9wZW4oJmFwb3M7bW9kdWxlLnB5JmFwb3M7KS5yZWFkKCkpXG4ifQ==---->"					
<code>$ python -i m.py</code>	Enter interactive interpreter mode after running script whether it ends successfully or not, allowing accessing variables and doing postmortem					
Python <b>Number</b> examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #3677a9"">1234</span> <span style=""color: #3677a9"">3.1415</span> <span style=""color: #3677a9"">3</span><span style=""color: #d0d0d0"">+</span><span style=""color: #3677a9"">4j</span> <span style=""color: #3677a9"">0b111</span> <span style=""color: #d0d0d0"">Decimal()</span> <span style=""color: #d0d0d0"">Fraction()</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY0MDcsICJpZCI6ICIxNDg4Njg5NzExNTIyLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgMTIzNFxuICAgIDMuMTQxNVxuICAgIDMrNGpcbiAgICAwYjExMVxuICAgIERlY2ltYWwoKVxuICAgIEZyYWN0aW9uKClcbiJ9---->"					
Python <b>String</b> examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #ed9d13"">'spam'</span> <span style=""color: #ed9d13"">""Bob's""</span> <span style=""color: #d0d0d0"">b</span><span style=""color: #ed9d13"">'a\x01c'</span> <span style=""color: #ed9d13"">u'sp\xc4m'</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY0NDcsICJpZCI6ICIxNDg4NjkxMzM5NjQyLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmFwb3M7c3BhbSZhcG9zO1xuICAgICZxdW90O0JvYiZhcG9zO3MmcXVvdDtcbiAgICBiJmFwb3M7YVxceDAxYyZhcG9zO1xuICAgIHUmYXBvcztzcFxceGM0bSZhcG9zO1xuIn0=---->"					
Python <b>List</b> examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">[</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #d0d0d0"">[</span><span style=""color: #3677a9"">2</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'three'</span><span style=""color: #d0d0d0"">],</span> <span style=""color: #3677a9"">4.5</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #24909d"">list</span><span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">range</span><span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">10</span><span style=""color: #d0d0d0"">))</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY2NjgsICJpZCI6ICIxNDg4NjkxMzkxNDkxLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgWzEsIFsyLCAmYXBvczt0aHJlZSZhcG9zO10sIDQuNV1cbiAgICBsaXN0KHJhbmdlKDEwKSlcbiJ9---->"					
Python <b>Dictionary</b> examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'food'</span><span style=""color: #d0d0d0"">:</span> <span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'taste'</span><span style=""color: #d0d0d0"">:</span> <span style=""color: #ed9d13"">'yum'</span><span style=""color: #d0d0d0"">}</span> <span style=""color: #24909d"">dict</span><span style=""color: #d0d0d0"">(hours=</span><span style=""color: #3677a9"">10</span><span style=""color: #d0d0d0"">)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY2NzcsICJpZCI6ICIxNDg4NjkxNDI5MTAzLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgeyZhcG9zO2Zvb2QmYXBvczs6ICZhcG9zO3NwYW0mYXBvczssICZhcG9zO3Rhc3RlJmFwb3M7OiAmYXBvczt5dW0mYXBvczt9XG4gICAgZGljdChob3Vycz0xMClcbiJ9---->"					
Python <b>Tuple</b> examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">4</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'U'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #24909d"">tuple</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">namedtuple</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY2ODksICJpZCI6ICIxNDg4NjkxNDY2MDAyLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgKDEsICZhcG9zO3NwYW0mYXBvczssIDQsICZhcG9zO1UmYXBvczspXG4gICAgdHVwbGUoJmFwb3M7c3BhbSZhcG9zOylcbiAgICBuYW1lZHR1cGxlXG4ifQ==---->"					
Python <b>File </b>examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">open</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'eggs.txt'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #24909d"">open</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">r'C:\ham.bin'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'wb'</span><span style=""color: #d0d0d0"">)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY2OTgsICJpZCI6ICIxNDg4NjkxNDk4NjA4LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgb3BlbigmYXBvcztlZ2dzLnR4dCZhcG9zOylcbiAgICBvcGVuKHImYXBvcztDOlxcaGFtLmJpbiZhcG9zOywgJmFwb3M7d2ImYXBvczspXG4ifQ==---->"					
Python <b>Set</b> examples	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">set</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'abc'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'b'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'c'</span><span style=""color: #d0d0d0"">}</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY3MDUsICJpZCI6ICIxNDg4NjkxNTQ5NzM2LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgc2V0KCZhcG9zO2FiYyZhcG9zOylcbiAgICB7JmFwb3M7YSZhcG9zOywgJmFwb3M7YiZhcG9zOywgJmFwb3M7YyZhcG9zO31cbiJ9---->"					
Python other core types	<code>Boolean</code>s, <code>type</code>s, <code>None</code>					
Python program unit types	Functions, modules, classes					
Python implementation-related types	Compiled code, stack tracebacks					
Python has type declarations?	no					
Python exponentiation operator	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #3677a9"">2</span> <span style=""color: #d0d0d0"">**</span> <span style=""color: #3677a9"">100</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY3NDYsICJpZCI6ICIxNDg4NjkxNzU3MDM0LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgMiAqKiAxMDBcbiJ9---->"					
Python slice of all but last	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">S[:-</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">]</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY3NjUsICJpZCI6ICIxNDg4NjkyMDU2MDI5LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgU1s6LTFdXG4ifQ==---->"		y			
Python repetition	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">S</span> <span style=""color: #d0d0d0"">*</span> <span style=""color: #3677a9"">8</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY3NzIsICJpZCI6ICIxNDg4NjkyMzk0MTQzLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgUyAqIDhcbiJ9---->"		y			
Python string concatentation	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">S</span> <span style=""color: #d0d0d0"">+</span> <span style=""color: #ed9d13"">'ing'</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY3NzcsICJpZCI6ICIxNDg4NjkyNTM5NzYyLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgUyArICZhcG9zO2luZyZhcG9zO1xuIn0=---->"		y			
Python strings are mutable?	no					
Python core mutable types	lists, dictionaries, sets					
Python core immutable types	numbers, strings, tuples					
Python type that allows in place text changes	"<p>2.6+, 3.0+, only supports 8 bit wide characters:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">B</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #24909d"">bytearray</span><span style=""color: #d0d0d0"">(b</span><span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">B.extend(b</span><span style=""color: #ed9d13"">'eggs'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #999999; font-style: italic""># 'b' needed in 3.X, not 2.X</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">B</span> <span style=""color: #999999; font-style: italic""># B[i] = ord(x) works here too</span> <span style=""color: #24909d"">bytearray</span><span style=""color: #d0d0d0"">(b</span><span style=""color: #ed9d13"">'spameggs'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">B.decode()</span> <span style=""color: #999999; font-style: italic""># translate to normal string</span> <span style=""color: #ed9d13"">'spameggs'</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY4NDgsICJpZCI6ICIxNDg4NjkyNzQ3OTg5LTAwMSIsICJtZCI6ICIyLjYrLCAzLjArLCBvbmx5IHN1cHBvcnRzIDggYml0IHdpZGUgY2hhcmFjdGVyczpcbiAgXG4gICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7IEIgPSBieXRlYXJyYXkoYiZhcG9zO3NwYW0mYXBvczspXG4gICAgJmd0OyZndDsmZ3Q7IEIuZXh0ZW5kKGImYXBvcztlZ2dzJmFwb3M7KSAjICZhcG9zO2ImYXBvczsgbmVlZGVkIGluIDMuWCwgbm90IDIuWFxuICAgICZndDsmZ3Q7Jmd0OyBCICMgQltpXSA9IG9yZCh4KSB3b3JrcyBoZXJlIHRvb1xuICAgIGJ5dGVhcnJheShiJmFwb3M7c3BhbWVnZ3MmYXBvczspXG4gICAgJmd0OyZndDsmZ3Q7IEIuZGVjb2RlKCkgIyB0cmFuc2xhdGUgdG8gbm9ybWFsIHN0cmluZ1xuICAgICZhcG9zO3NwYW1lZ2dzJmFwb3M7XG4ifQ==---->"					
Python basic substring search operation	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">S</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #ed9d13"">'Spam'</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">S.find(</span><span style=""color: #ed9d13"">'pa'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #3677a9"">1</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU2OTc1NDgsICJpZCI6ICIxNDg4NjkzMDA0ODg0LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7IFMgPSAmYXBvcztTcGFtJmFwb3M7XG4gICAgJmd0OyZndDsmZ3Q7IFMuZmluZCgmYXBvcztwYSZhcG9zOylcbiAgICAxXG4ifQ==---->"					
Python string formatting expression	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #ed9d13"">'%s, eggs, and %s'</span> <span style=""color: #d0d0d0"">%</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'SPAM!'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #999999; font-style: italic""># works in 2.X and 3.X</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY4NzQsICJpZCI6ICIxNDg4NjkzMDk2MTk0LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmFwb3M7JXMsIGVnZ3MsIGFuZCAlcyZhcG9zOyAlICgmYXBvcztzcGFtJmFwb3M7LCAmYXBvcztTUEFNISZhcG9zOylcbiAgICAjIHdvcmtzIGluIDIuWCBhbmQgMy5YXG4ifQ==---->"					
Python string formatting method	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #999999;font-style: italic""># works in 2.6+ and 3.0+</span> <span style=""color: #ed9d13"">'{0}, eggs, and {1}'</span><span style=""color: #d0d0d0"">.format(</span><span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'SPAM!'</span><span style=""color: #d0d0d0"">)</span> </pre></div> <p>Numbers optional:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #999999; font-style: italic""># works in 2.7+ and 3.1+</span> <span style=""color: #ed9d13"">'{}, eggs, and {}'</span><span style=""color: #d0d0d0"">.format(</span><span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'SPAM!'</span><span style=""color: #d0d0d0"">)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY4ODksICJpZCI6ICIxNDg4NjkzMjM1MzY4LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgIyB3b3JrcyBpbiAyLjYrIGFuZCAzLjArXG4gICAgJmFwb3M7ezB9LCBlZ2dzLCBhbmQgezF9JmFwb3M7LmZvcm1hdCgmYXBvcztzcGFtJmFwb3M7LCAmYXBvcztTUEFNISZhcG9zOylcbiAgXG5OdW1iZXJzIG9wdGlvbmFsOlxuICBcbiAgICA6OjpweXRob25cbiAgICAjIHdvcmtzIGluIDIuNysgYW5kIDMuMStcbiAgICAmYXBvczt7fSwgZWdncywgYW5kIHt9JmFwb3M7LmZvcm1hdCgmYXBvcztzcGFtJmFwb3M7LCAmYXBvcztTUEFNISZhcG9zOylcbiJ9---->"					
Python: list all attributes available for any object	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">dir</span><span style=""color: #d0d0d0"">(S)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY5MjUsICJpZCI6ICIxNDg4NjkzMzUxODM0LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgZGlyKFMpXG4ifQ==---->"					
Python raw string literal	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #ed9d13"">r'C:\text\new'</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY5MzAsICJpZCI6ICIxNDg4Njk0OTQ4NjAyLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgciZhcG9zO0M6XFx0ZXh0XFxuZXcmYXBvcztcbiJ9---->"					
Python multiline string	"<p>Use three quotes or doublequotes</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">msg</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #ed9d13"">""""""</span> <span style=""color: #ed9d13"">aaaaaa</span> <span style=""color: #ed9d13"">bbb''''bbbbb""""bbbbb'bbbbb</span> <span style=""color: #ed9d13"">ccccc</span> <span style=""color: #ed9d13"">""""""</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY5NDUsICJpZCI6ICIxNDg4Njk1NjUxMTY0LTAwMSIsICJtZCI6ICJVc2UgdGhyZWUgcXVvdGVzIG9yIGRvdWJsZXF1b3Rlc1xuICBcbiAgICA6OjpweXRob25cbiAgICBtc2cgPSAmcXVvdDsmcXVvdDsmcXVvdDtcbiAgICBhYWFhYWFcbiAgICBiYmImYXBvczsmYXBvczsmYXBvczsmYXBvcztiYmJiYiZxdW90OyZxdW90O2JiYmJiJmFwb3M7YmJiYmJcbiAgICBjY2NjY1xuICAgICZxdW90OyZxdW90OyZxdW90O1xuICBcbiJ9---->"					
Python strings and Unicode	"<p><b>3.X</b>, normal <code>str</code> strings support Unicode:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #ed9d13"">'sp\xc4m'</span> <span style=""color: #999999; font-style: italic""># but in 2.X this works like 3.X byte strings</span> <span style=""color: #ed9d13"">'spām'</span> </pre></div> <p><b>3.X</b> byte strings are raw bytes, also works in <b>2.6+</b>:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">b</span><span style=""color: #ed9d13"">'a\x01c'</span> <span style=""color: #d0d0d0"">b</span><span style=""color: #ed9d13"">'a\x01c'</span> </pre></div> <p><b>2.X</b> Unicode literal also works in <b>3.3+</b>:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #ed9d13"">u'sp\u00c4m'</span> <span style=""color: #ed9d13"">'spām'</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY5NjQsICJpZCI6ICIxNDg4Njk1Njk0NzI2LTAwMSIsICJtZCI6ICIzLlgsIG5vcm1hbCBgc3RyYCBzdHJpbmdzIHN1cHBvcnQgVW5pY29kZTpcbiAgXG4gICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7ICZhcG9zO3NwXFx4YzRtJmFwb3M7ICMgYnV0IGluIDIuWCB0aGlzIHdvcmtzIGxpa2UgMy5YIGJ5dGUgc3RyaW5nc1xuICAgICZhcG9zO3NwXHUwMTAxbSZhcG9zO1xuICBcbjMuWCBieXRlIHN0cmluZ3MgYXJlIHJhdyBieXRlcywgYWxzbyB3b3JrcyBpbiAyLjYrOlxuICBcbiAgICA6OjpweXRob25cbiAgICAmZ3Q7Jmd0OyZndDsgYiZhcG9zO2FcXHgwMWMmYXBvcztcbiAgICBiJmFwb3M7YVxceDAxYyZhcG9zO1xuICBcbjIuWCBVbmljb2RlIGxpdGVyYWwgYWxzbyB3b3JrcyBpbiAzLjMrOlxuICBcbiAgICA6OjpweXRob25cbiAgICAmZ3Q7Jmd0OyZndDsgdSZhcG9zO3NwXFx1MDBjNG0mYXBvcztcbiAgICAmYXBvcztzcFx1MDEwMW0mYXBvcztcbiJ9---->"					
Python short Unicode escape	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">\<span style=""color: #d0d0d0"">u</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY5NzAsICJpZCI6ICIxNDg4Njk2NDYxODc3LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgXFx1XG4ifQ==---->"					
Python long Unicode escape	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">\<span style=""color: #d0d0d0"">U</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDY5NzQsICJpZCI6ICIxNDg4Njk2NDg4NzExLTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgXFxVXG4ifQ==---->"					
Python 2.X/3.X files differences regarding Unicode	In 3.X, text files implement named encodings and accept and return <code>str</code> strings, but binary files instead deal in bytes strings for raw binary data.<div><br /></div><div>In 2.X, normal files' content is <code>str</code> bytes, and a special codecs module handles Unicode and represents content with the unicode type</div>					
Python <b>List</b> description	The Python list object is the most general <i>sequence</i> provided by the language. Lists are <b>positionally ordered</b> collections of arbitrarily typed objects, and they have no fixed size and are <b>mutable</b>.					
Python list comprehension expression example	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">M</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #d0d0d0"">[[</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">,</span><span style=""color: #3677a9"">2</span><span style=""color: #d0d0d0"">,</span><span style=""color: #3677a9"">3</span><span style=""color: #d0d0d0"">],[</span><span style=""color: #3677a9"">4</span><span style=""color: #d0d0d0"">,</span><span style=""color: #3677a9"">5</span><span style=""color: #d0d0d0"">,</span><span style=""color: #3677a9"">6</span><span style=""color: #d0d0d0"">],[</span><span style=""color: #3677a9"">7</span><span style=""color: #d0d0d0"">,</span><span style=""color: #3677a9"">8</span><span style=""color: #d0d0d0"">,</span><span style=""color: #3677a9"">9</span><span style=""color: #d0d0d0"">]]</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">col2</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #d0d0d0"">[row[</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #6ab825; font-weight: bold"">for</span> <span style=""color: #d0d0d0"">row</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #d0d0d0"">M]</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">col2</span> <span style=""color: #d0d0d0"">[</span><span style=""color: #3677a9"">2</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">5</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">8</span><span style=""color: #d0d0d0"">]</span>  <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">col2</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #d0d0d0"">[row[</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #6ab825; font-weight: bold"">for</span> <span style=""color: #d0d0d0"">row</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #d0d0d0"">M</span> <span style=""color: #6ab825; font-weight: bold"">if</span> <span style=""color: #d0d0d0"">row[</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">%</span> <span style=""color: #3677a9"">2</span> <span style=""color: #d0d0d0"">==</span> <span style=""color: #3677a9"">0</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #999999; font-style: italic"">#filter out odd items</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">col2</span> <span style=""color: #d0d0d0"">[</span><span style=""color: #3677a9"">2</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">8</span><span style=""color: #d0d0d0"">]</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDcwNDUsICJpZCI6ICIxNDg4Njk4NDgyMTI4LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7IE0gPSBbWzEsMiwzXSxbNCw1LDZdLFs3LDgsOV1dXG4gICAgJmd0OyZndDsmZ3Q7IGNvbDIgPSBbcm93WzFdIGZvciByb3cgaW4gTV1cbiAgICAmZ3Q7Jmd0OyZndDsgY29sMlxuICAgIFsyLCA1LCA4XVxuICBcbiAgICAmZ3Q7Jmd0OyZndDsgY29sMiA9IFtyb3dbMV0gZm9yIHJvdyBpbiBNIGlmIHJvd1sxXSAlIDIgPT0gMF0gI2ZpbHRlciBvdXQgb2RkIGl0ZW1zXG4gICAgJmd0OyZndDsmZ3Q7IGNvbDJcbiAgICBbMiwgOF1cbiAgXG4ifQ==---->"		y			marked
Python expressions to collect values need wrapping in collection in 3.X	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">&gt;&gt;&gt; list(range(4)) # list() required in 3.X     [0, 1, 2, 3] </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU2OTc1MTgsICJpZCI6ICIxNDg4Njk4NzczMzM1LTAwMSIsICJtZCI6ICJgYGBcbiZndDsmZ3Q7Jmd0OyBsaXN0KHJhbmdlKDQpKSAjIGxpc3QoKSByZXF1aXJlZCBpbiAzLlhcbiAgICBbMCwgMSwgMiwgM11cbmBgYFxuIn0=---->"					marked
Python generator from comprehension	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">G</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">sum</span><span style=""color: #d0d0d0"">(row)</span> <span style=""color: #6ab825; font-weight: bold"">for</span> <span style=""color: #d0d0d0"">row</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #d0d0d0"">M)</span> <span style=""color: #999999; font-style: italic""># wrap in parentheses</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #24909d"">next</span><span style=""color: #d0d0d0"">(G)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDcwMTMsICJpZCI6ICIxNDg4Njk5OTU5MDI4LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7IEcgPSAoc3VtKHJvdykgZm9yIHJvdyBpbiBNKSAjIHdyYXAgaW4gcGFyZW50aGVzZXNcbiAgICAmZ3Q7Jmd0OyZndDsgbmV4dChHKVxuIn0=---->"		y			
Python comprehension syntax can make sets and dictionaries in which versions?	"<p><strong>2.7</strong> and <strong>3.X</strong>:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #24909d"">sum</span><span style=""color: #d0d0d0"">(M[i])</span> <span style=""color: #6ab825; font-weight: bold"">for</span> <span style=""color: #d0d0d0"">i</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #24909d"">range</span><span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">3</span><span style=""color: #d0d0d0"">)}</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #3677a9"">0</span><span style=""color: #d0d0d0"">:</span> <span style=""color: #3677a9"">6</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">:</span> <span style=""color: #3677a9"">15</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">2</span><span style=""color: #d0d0d0"">:</span> <span style=""color: #3677a9"">24</span><span style=""color: #d0d0d0"">}</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDcwMjEsICJpZCI6ICIxNDg4NzAwMDUzOTg3LTAwMSIsICJtZCI6ICIqKjIuNyoqIGFuZCAqKjMuWCoqOlxuICBcbiAgICA6OjpweXRob25cbiAgICAmZ3Q7Jmd0OyZndDsge3N1bShNW2ldKSBmb3IgaSBpbiByYW5nZSgzKX1cbiAgICB7MDogNiwgMTogMTUsIDI6IDI0fVxuIn0=---->"					
Python <b>dictionaries</b>	"<p>Dictionaries are the only mapping type in Python's core objects set, and are also mutable: like lists, they may be changed in place and can grow and shrink on demand.</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">D = {'food': 'Spam', 'quantity': 4, 'color': 'pink'} </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU2OTc1ODMsICJpZCI6ICIxNDg4NzAwMzQwMzE1LTAwMSIsICJtZCI6ICJEaWN0aW9uYXJpZXMgYXJlIHRoZSBvbmx5IG1hcHBpbmcgdHlwZSBpbiBQeXRob24mYXBvcztzIGNvcmUgb2JqZWN0cyBzZXQsIGFuZCBhcmUgYWxzbyBtdXRhYmxlOiBsaWtlIGxpc3RzLCB0aGV5IG1heSBiZSBjaGFuZ2VkIGluIHBsYWNlIGFuZCBjYW4gZ3JvdyBhbmQgc2hyaW5rIG9uIGRlbWFuZC5cbiAgXG4gICAgRCA9IHsmYXBvcztmb29kJmFwb3M7OiAmYXBvcztTcGFtJmFwb3M7LCAmYXBvcztxdWFudGl0eSZhcG9zOzogNCwgJmFwb3M7Y29sb3ImYXBvczs6ICZhcG9zO3BpbmsmYXBvczt9XG4ifQ==---->"					
Python dictionary key existence test	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #ed9d13"">'f'</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #d0d0d0"">D</span> <span style=""color: #24909d"">False</span>  <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #6ab825; font-weight: bold"">if</span> <span style=""color: #6ab825; font-weight: bold"">not</span> <span style=""color: #ed9d13"">'f'</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #d0d0d0"">D:</span>        <span style=""color: #6ab825; font-weight: bold"">print</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'missing'</span><span style=""color: #d0d0d0"">)</span>  <span style=""color: #d0d0d0"">missing</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTc4NTkzMDksICJpZCI6ICIxNDg4NzAwNTgyMTk2LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7ICZhcG9zO2YmYXBvczsgaW4gRFxuICAgIEZhbHNlXG4gIFxuICAgICZndDsmZ3Q7Jmd0OyBpZiBub3QgJmFwb3M7ZiZhcG9zOyBpbiBEOlxuICAgICAgICAgICBwcmludCgmYXBvczttaXNzaW5nJmFwb3M7KVxuICBcbiAgICBtaXNzaW5nXG4gIFxuIn0=---->"	<p>Can also avoid accessing nonexistent by using <code>get()</code> method, conditional index with a default, or in <strong>2.X</strong> <code>has_key()</code> method, or <code>try</code> statement, or <code>if</code>/<code>else</code> ternary</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTc4NTkzNDAsICJpZCI6ICIxNDg4NzAwNTgyMTk2LTAwMiIsICJtZCI6ICJDYW4gYWxzbyBhdm9pZCBhY2Nlc3Npbmcgbm9uZXhpc3RlbnQgYnkgdXNpbmcgYGdldCgpYCBtZXRob2QsIGNvbmRpdGlvbmFsIGluZGV4IHdpdGggYSBkZWZhdWx0LCBvciBpbiAqKjIuWCoqIGBoYXNfa2V5KClgIG1ldGhvZCwgb3IgYHRyeWAgc3RhdGVtZW50LCBvciBgaWZgL2BlbHNlYCB0ZXJuYXJ5XG4ifQ==---->	y			
Python sorted dictionary keys	<p>Use dictionary <code>keys()</code> method and sort with list <code>sort()</code> method, then step through result with for loop.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYwMDAxNzQsICJpZCI6ICIxNDg4NzAwODk2NzAzLTAwMSIsICJtZCI6ICJVc2UgZGljdGlvbmFyeSBga2V5cygpYCBtZXRob2QgYW5kIHNvcnQgd2l0aCBsaXN0IGBzb3J0KClgIG1ldGhvZCwgdGhlbiBzdGVwIHRocm91Z2ggcmVzdWx0IHdpdGggZm9yIGxvb3AuXG4ifQ==---->	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">Ks</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #24909d"">list</span><span style=""color: #d0d0d0"">(D.keys())</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">Ks.sort()</span> <span style=""color: #d0d0d0"">[</span><span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'b'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'c'</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #6ab825; font-weight: bold"">for</span> <span style=""color: #d0d0d0"">key</span> <span style=""color: #6ab825; font-weight: bold"">in</span> <span style=""color: #d0d0d0"">Ks:</span>         <span style=""color: #6ab825; font-weight: bold"">print</span><span style=""color: #d0d0d0"">(key,</span> <span style=""color: #ed9d13"">'=&gt;'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #d0d0d0"">D[key])</span> <span style=""color: #999999; font-style: italic""># 3.X print, in 2.X remove parentheses</span>  <span style=""color: #d0d0d0"">a</span> <span style=""color: #d0d0d0"">=&gt;</span> <span style=""color: #3677a9"">1</span> <span style=""color: #d0d0d0"">b</span> <span style=""color: #d0d0d0"">=&gt;</span> <span style=""color: #3677a9"">2</span> <span style=""color: #d0d0d0"">c</span> <span style=""color: #d0d0d0"">=&gt;</span> <span style=""color: #3677a9"">3</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYwMDAxNzAsICJpZCI6ICIxNDg4NzAwODk2NzAzLTAwMiIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgJmd0OyZndDsmZ3Q7IEtzID0gbGlzdChELmtleXMoKSlcbiAgICAmZ3Q7Jmd0OyZndDsgS3Muc29ydCgpXG4gICAgWyZhcG9zO2EmYXBvczssICZhcG9zO2ImYXBvczssICZhcG9zO2MmYXBvcztdXG4gICAgJmd0OyZndDsmZ3Q7IGZvciBrZXkgaW4gS3M6XG4gICAgICAgICAgICBwcmludChrZXksICZhcG9zOz0mZ3Q7JmFwb3M7LCBEW2tleV0pICMgMy5YIHByaW50LCBpbiAyLlggcmVtb3ZlIHBhcmVudGhlc2VzXG4gIFxuICAgIGEgPSZndDsgMVxuICAgIGIgPSZndDsgMlxuICAgIGMgPSZndDsgM1xuIn0=---->"				
<div>Python <b>Tuple</b></div>	<div>immutable sequence, usually coded with parentheses instead of square brackets, which is built by commas</div>	"<p>Parentheses aren't needed where commas don't otherwise matter, such as:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">T</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">3.0</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #d0d0d0"">[</span><span style=""color: #3677a9"">11</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">22</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #3677a9"">33</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">T[</span><span style=""color: #3677a9"">1</span><span style=""color: #d0d0d0"">]</span> <span style=""color: #3677a9"">3.0</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYwMDAwODIsICJpZCI6ICIxNDg4NzAyNzA5NjA3LTAwMiIsICJtZCI6ICJQYXJlbnRoZXNlcyBhcmVuJmFwb3M7dCBuZWVkZWQgd2hlcmUgY29tbWFzIGRvbiZhcG9zO3Qgb3RoZXJ3aXNlIG1hdHRlciwgc3VjaCBhczpcbiAgXG4gIFxuICBcbiAgICA6OjpweXRob25cbiAgICAmZ3Q7Jmd0OyZndDsgVCA9ICZhcG9zO3NwYW0mYXBvczssIDMuMCwgWzExLCAyMiwgMzNdXG4gICAgJmd0OyZndDsmZ3Q7IFRbMV1cbiAgICAzLjBcbiAgXG4ifQ==---->"	y			
Python <b>set</b> syntax	"<p>New in <b>3.X</b> and <b>2.7</b>, <i>set</i>s use <code>{...}</code>, as they are like keys in a valueless <i>dictionary</i>:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">X</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #24909d"">set</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'spam'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">Y</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'h'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'m'</span><span style=""color: #d0d0d0"">}</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">X,</span> <span style=""color: #d0d0d0"">Y</span> <span style=""color: #d0d0d0"">({</span><span style=""color: #ed9d13"">'m'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'p'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'s'</span><span style=""color: #d0d0d0"">},</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'m'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'h'</span><span style=""color: #d0d0d0"">})</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">X</span> <span style=""color: #d0d0d0"">&amp;</span> <span style=""color: #d0d0d0"">Y</span> <span style=""color: #999999; font-style: italic""># intersection</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'m'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">}</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">X</span> <span style=""color: #d0d0d0"">|</span> <span style=""color: #d0d0d0"">Y</span> <span style=""color: #999999; font-style: italic""># union</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'m'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'h'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'a'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'p'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'s'</span><span style=""color: #d0d0d0"">}</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">X</span> <span style=""color: #d0d0d0"">-</span> <span style=""color: #d0d0d0"">Y</span> <span style=""color: #999999; font-style: italic""># difference</span> <span style=""color: #d0d0d0"">{</span><span style=""color: #ed9d13"">'p'</span><span style=""color: #d0d0d0"">,</span> <span style=""color: #ed9d13"">'s'</span><span style=""color: #d0d0d0"">}</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #d0d0d0"">X</span> <span style=""color: #d0d0d0"">&gt;</span> <span style=""color: #d0d0d0"">Y</span> <span style=""color: #999999; font-style: italic""># superset</span> <span style=""color: #24909d"">False</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDczODksICJpZCI6ICIxNDg4NzA1NjM1MDExLTAwMSIsICJtZCI6ICJOZXcgaW4gMy5YIGFuZCAyLjcsIHNldHMgdXNlIGB7Li4ufWAsIGFzIHRoZXkgYXJlIGxpa2Uga2V5cyBpbiBhIHZhbHVlbGVzcyBkaWN0aW9uYXJ5OlxuICBcbiAgXG4gIFxuICAgIDo6OnB5dGhvblxuICAgICZndDsmZ3Q7Jmd0OyBYID0gc2V0KCZhcG9zO3NwYW0mYXBvczspXG4gICAgJmd0OyZndDsmZ3Q7IFkgPSB7JmFwb3M7aCZhcG9zOywgJmFwb3M7YSZhcG9zOywgJmFwb3M7bSZhcG9zO31cbiAgICAmZ3Q7Jmd0OyZndDsgWCwgWVxuICAgICh7JmFwb3M7bSZhcG9zOywgJmFwb3M7YSZhcG9zOywgJmFwb3M7cCZhcG9zOywgJmFwb3M7cyZhcG9zO30sIHsmYXBvczttJmFwb3M7LCAmYXBvczthJmFwb3M7LCAmYXBvcztoJmFwb3M7fSlcbiAgICAmZ3Q7Jmd0OyZndDsgWCAmYW1wOyBZICMgaW50ZXJzZWN0aW9uXG4gICAgeyZhcG9zO20mYXBvczssICZhcG9zO2EmYXBvczt9XG4gICAgJmd0OyZndDsmZ3Q7IFggfCBZICMgdW5pb25cbiAgICB7JmFwb3M7bSZhcG9zOywgJmFwb3M7aCZhcG9zOywgJmFwb3M7YSZhcG9zOywgJmFwb3M7cCZhcG9zOywgJmFwb3M7cyZhcG9zO31cbiAgICAmZ3Q7Jmd0OyZndDsgWCAtIFkgIyBkaWZmZXJlbmNlXG4gICAgeyZhcG9zO3AmYXBvczssICZhcG9zO3MmYXBvczt9XG4gICAgJmd0OyZndDsmZ3Q7IFggJmd0OyBZICMgc3VwZXJzZXRcbiAgICBGYWxzZVxuICBcbiJ9---->"					
Python objects and names commonly initialized with this value	<p><code>None</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc0MDAsICJpZCI6ICIxNDg4NzA2NTg2Mzc4LTAwMSIsICJtZCI6ICJgTm9uZWBcbiJ9---->					
Python <code><b>Boolean</b></code>s	<p><code>True</code> and <code>False</code> objects, essentially just <code>0</code> and <code>1</code> with custom display logic</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNTM0NTAsICJpZCI6ICIxNDg4NzA2NjgwNzc2LTAwMSIsICJtZCI6ICJgVHJ1ZWAgYW5kIGBGYWxzZWAgb2JqZWN0cywgZXNzZW50aWFsbHkganVzdCBgMGAgYW5kIGAxYCB3aXRoIGN1c3RvbSBkaXNwbGF5IGxvZ2ljXG4ifQ==---->					
Python type differences 2.X and 3.X	"<p>2.X:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(L)</span> <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #24909d"">type</span> <span style=""color: #ed9d13"">'list'</span><span style=""color: #d0d0d0"">&gt;</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(L))</span> <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #24909d"">type</span> <span style=""color: #ed9d13"">'type'</span><span style=""color: #d0d0d0"">&gt;</span> </pre></div> <p>3.X:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(L)</span> <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">class</span> <span style=""color: #a61717; background-color: #e3d2d2"">'</span><span style=""color: #447fcf; text-decoration: underline"">list</span><span style=""color: #ed9d13"">'&gt;</span> <span style=""color: #d0d0d0"">&gt;&gt;&gt;</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(L))</span> <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">class</span> <span style=""color: #a61717; background-color: #e3d2d2"">'</span><span style=""color: #447fcf; text-decoration: underline"">type</span><span style=""color: #ed9d13"">'&gt;</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc0NjEsICJpZCI6ICIxNDg4NzA4MDY5MTk1LTAwMSIsICJtZCI6ICIyLlg6XG4gIFxuICAgIDo6OnB5dGhvblxuICAgICZndDsmZ3Q7Jmd0OyB0eXBlKEwpXG4gICAgJmx0O3R5cGUgJmFwb3M7bGlzdCZhcG9zOyZndDtcbiAgICAmZ3Q7Jmd0OyZndDsgdHlwZSh0eXBlKEwpKVxuICAgICZsdDt0eXBlICZhcG9zO3R5cGUmYXBvczsmZ3Q7XG4gIFxuMy5YOlxuICBcbiAgICA6OjpweXRob25cbiAgICAmZ3Q7Jmd0OyZndDsgdHlwZShMKVxuICAgICZsdDtjbGFzcyAmYXBvcztsaXN0JmFwb3M7Jmd0O1xuICAgICZndDsmZ3Q7Jmd0OyB0eXBlKHR5cGUoTCkpXG4gICAgJmx0O2NsYXNzICZhcG9zO3R5cGUmYXBvczsmZ3Q7XG4ifQ==---->"					
Python type checking	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">if</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(L)</span> <span style=""color: #d0d0d0"">==</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">([]):</span>     <span style=""color: #6ab825; font-weight: bold"">print</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'yes'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #6ab825; font-weight: bold"">if</span> <span style=""color: #24909d"">type</span><span style=""color: #d0d0d0"">(L)</span> <span style=""color: #d0d0d0"">==</span> <span style=""color: #24909d"">list</span><span style=""color: #d0d0d0"">:</span>     <span style=""color: #6ab825; font-weight: bold"">print</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'yes'</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #6ab825; font-weight: bold"">if</span> <span style=""color: #24909d"">isinstance</span><span style=""color: #d0d0d0"">(L,</span> <span style=""color: #24909d"">list</span><span style=""color: #d0d0d0"">):</span>     <span style=""color: #6ab825; font-weight: bold"">print</span><span style=""color: #d0d0d0"">(</span><span style=""color: #ed9d13"">'yes'</span><span style=""color: #d0d0d0"">)</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU4MzgxNjQsICJpZCI6ICIxNDg4NzA4MTUyMDY4LTAwMSIsICJtZCI6ICIgICAgOjo6cHl0aG9uXG4gICAgaWYgdHlwZShMKSA9PSB0eXBlKFtdKTpcbiAgICAgICAgcHJpbnQoJmFwb3M7eWVzJmFwb3M7KSB5ZXNcbiAgICBpZiB0eXBlKEwpID09IGxpc3Q6XG4gICAgICAgIHByaW50KCZhcG9zO3llcyZhcG9zOykgeWVzXG4gICAgaWYgaXNpbnN0YW5jZShMLCBsaXN0KTpcbiAgICAgICAgcHJpbnQoJmFwb3M7eWVzJmFwb3M7KSB5ZXNcbiJ9---->"					
Find version available on Homebrew	<div><pre>brew search <i>keyword</i> brew info <i>result</i></pre></div>					
<div>cmd: hex to decimal</div>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">echo</span> <span style=""color: #6ab825; font-weight: bold"">$((</span><span style=""color: #3677a9"">0</span>x15a<span style=""color: #6ab825; font-weight: bold"">))</span> <span style=""color: #24909d"">printf</span> <span style=""color: #ed9d13"">'%d\n'</span> 0x15a perl -e <span style=""color: #ed9d13"">'printf (""%d\n"", 0x15a)'</span> <span style=""color: #24909d"">echo</span> <span style=""color: #ed9d13"">'ibase=16;obase=A;15A'</span> <span style=""color: #d0d0d0"">|</span> bc </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY3ODIwNzEsICJpZCI6ICIxNDg5MzUwNjMzMzMwLTAwMSIsICJtZCI6ICIgICAgOjo6c2hlbGxcbiAgICBlY2hvICQoKDB4MTVhKSlcbiAgICBwcmludGYgJmFwb3M7JWRcXG4mYXBvczsgMHgxNWFcbiAgICBwZXJsIC1lICZhcG9zO3ByaW50ZiAoJnF1b3Q7JWRcXG4mcXVvdDssIDB4MTVhKSZhcG9zO1xuICAgIGVjaG8gJmFwb3M7aWJhc2U9MTY7b2Jhc2U9QTsxNUEmYXBvczsgfCBiY1xuIn0=---->"	Note&nbsp;<code>ibase</code>&nbsp;and&nbsp;<code>obase</code>&nbsp;specify the input and the output notation respectively. By default, the notation for both is decimal unless you change it using&nbsp;<code>ibase</code>&nbsp;or&nbsp;<code>obase</code>. Because you change the notation to hex using&nbsp;<code>ibase</code>, your&nbsp;<code>obase</code>&nbsp;needs to be specified in hex (<code>A</code>&nbsp;in hex =&nbsp;<code>10</code>&nbsp;in decimal). The input number (<code>15A</code>) needs to be in UPPER case.&nbsp;<code>15a</code>&nbsp;will give you a parse error.	y			
lscpu	lscpu					<div>Gathers CPU architecture information like number of CPUs, threads, cores, sockets, NUMA nodes, information about&nbsp;CPU caches, CPU family, model, bogoMIPS, byte order and stepping from sysfs and /proc/cpuinfo, &nbsp;and &nbsp;prints &nbsp;it &nbsp;in &nbsp;a&nbsp;human-readable format. &nbsp;It supports both online and offline CPUs. &nbsp;It can also print out in a parsable format, including how different caches are shared by different CPUs, which can be fed to other programs.</div>		y	
nproc	nproc					print the number of processing units available		y	command
bash special parameter $?	bash	special parameter			$?	Expands to the exit status of the most recently executed foreground pipeline.			command
Simulate cron env in script	"<p>Add to crontab:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">* * * * * env &gt; ~/cronenv </pre></div> <p>If adding to global <code>/etc/crontab</code>, need username too:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">* * * * * root env &gt; ~/cronenv </pre></div> <p>After it runs, do this:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">env - <span style=""color: #ed9d13"">`</span>cat ~/cronenv<span style=""color: #ed9d13"">`</span> /bin/sh </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU5NjE2MjQsICJpZCI6ICIxNDkwMDM5Mzc3NTU2LTAwMSIsICJtZCI6ICJBZGQgdG8gY3JvbnRhYjpcbiAgXG4gICAgOjo6c2hlbGxcbiAgICAqICogKiAqICogZW52ICZndDsgfi9jcm9uZW52XG4gIFxuSWYgYWRkaW5nIHRvIGdsb2JhbCBgL2V0Yy9jcm9udGFiYCwgbmVlZCB1c2VybmFtZSB0b286XG4gIFxuICAgIDo6OnNoZWxsXG4gICAgKiAqICogKiAqIHJvb3QgZW52ICZndDsgfi9jcm9uZW52XG4gIFxuQWZ0ZXIgaXQgcnVucywgZG8gdGhpczpcbiAgXG4gICAgOjo6c2hlbGxcbiAgICBlbnYgLSBgY2F0IH4vY3JvbmVudmAgL2Jpbi9zaFxuICBcbiAgXG4ifQ==---->"		y			marked
Typical default cron environment	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">HOME <span style=""color: #999999;font-style: italic""># user's home directory)</span> LOGNAME <span style=""color: #999999; font-style: italic""># user's login)</span> <span style=""color: #40ffff"">PATH</span><span style=""color: #d0d0d0"">=</span>/usr/bin:/usr/sbin:. <span style=""color: #999999; font-style: italic""># usually no longer . for sec reasons</span> <span style=""color: #40ffff"">SHELL</span><span style=""color: #d0d0d0"">=</span>/usr/bin/sh </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc2OTksICJpZCI6ICIxNDkwMDM5NDYxNjA5LTAwMSIsICJtZCI6ICIgICAgOjo6c2hcbiAgICBIT01FICMgdXNlciZhcG9zO3MgaG9tZSBkaXJlY3RvcnkpXG4gICAgTE9HTkFNRSAjIHVzZXImYXBvcztzIGxvZ2luKVxuICAgIFBBVEg9L3Vzci9iaW46L3Vzci9zYmluOi4gIyB1c3VhbGx5IG5vIGxvbmdlciAuIGZvciBzZWMgcmVhc29uc1xuICAgIFNIRUxMPS91c3IvYmluL3NoXG4ifQ==---->"		y			
Connect forked Git repo to original	<div><code>git remote add upstream <i>https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</i></code></div>		y			
Sync forked Git repo with original	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">git remote add upstream https://....git git fetch upstream git checkout master git merge upstream/master </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc4MjksICJpZCI6ICIxNDkwMjI0MjA1NTA4LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIGdpdCByZW1vdGUgYWRkIHVwc3RyZWFtIGh0dHBzOi8vLi4uLmdpdFxuICAgIGdpdCBmZXRjaCB1cHN0cmVhbVxuICAgIGdpdCBjaGVja291dCBtYXN0ZXJcbiAgICBnaXQgbWVyZ2UgdXBzdHJlYW0vbWFzdGVyXG4ifQ==---->"		y			
bash builtin printf %q	printf	extension			%q	Causes <code>printf</code> to output the corresponding <var>argument</var> in a format that can be reused as shell input.	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">printf</span> <span style=""color: #ed9d13"">""%q\n""</span> <span style=""color: #ed9d13"">""</span><span style=""color: #6ab825; font-weight: bold"">$(</span>tput bold<span style=""color: #6ab825; font-weight: bold"">)</span><span style=""color: #ed9d13"">""</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNjA0NDcsICJpZCI6ICIxNDkwNDE1ODA4NTc5LTAwNyIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIHByaW50ZiAmcXVvdDslcVxcbiZxdW90OyAmcXVvdDskKHRwdXQgYm9sZCkmcXVvdDtcbiJ9---->"		
how to&nbsp;use find and xargs&nbsp;together	"<p>If you use <code>find</code> and <code>xargs</code> together, you should use <code>-print0</code> to separate filenames with a null character rather than new lines. You then need to use <code>-0</code> with xargs.</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">david% touch <span style=""color: #ed9d13"">""foo bar""</span> david% find <span style=""color: #d0d0d0"">|</span> xargs ls ls: ./foo: No such file or directory ls: bar: No such file or directory david% find -print0 <span style=""color: #d0d0d0"">|</span> xargs -0 ls ./foo bar </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU2OTYyNjgsICJpZCI6ICIxNDkwNDE1ODI1OTUyLTAwMSIsICJtZCI6ICJJZiB5b3UgdXNlIGBmaW5kYCBhbmQgYCB4YXJnc2AgdG9nZXRoZXIsIHlvdSBzaG91bGQgdXNlIGAtcHJpbnQwYCB0byBzZXBhcmF0ZSBmaWxlbmFtZXMgd2l0aCBhIG51bGwgY2hhcmFjdGVyIHJhdGhlciB0aGFuIG5ldyBsaW5lcy4gWW91IHRoZW4gbmVlZCB0byB1c2UgYC0wYCB3aXRoIHhhcmdzLlxuICBcbiAgICA6OjpzaFxuICAgIGRhdmlkJSB0b3VjaCAmcXVvdDtmb28gYmFyJnF1b3Q7XG4gICAgZGF2aWQlIGZpbmQgfCB4YXJncyBsc1xuICAgIGxzOiAuL2ZvbzogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeVxuICAgIGxzOiBiYXI6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnlcbiAgICBkYXZpZCUgZmluZCAtcHJpbnQwIHwgeGFyZ3MgLTAgbHNcbiAgICAuL2ZvbyBiYXJcbiJ9---->"					
make shell exit on any nonzero return	<pre>set -e set -o errexit</pre>					
<p>checking <code>$?</code> if using <code>set -e</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNTMyNzcsICJpZCI6ICIxNDkwNDcyNTU5OTc1LTAwMCIsICJtZCI6ICJjaGVja2luZyBgJD9gIGlmIHVzaW5nIGBzZXQgLWVgXG4ifQ==---->	"<div>Cannot do:</div><div><br /></div><div>&nbsp; &nbsp; :::bash</div><div>&nbsp; &nbsp; command</div><div>&nbsp; &nbsp; if [ ""$?""-ne 0]; then echo ""command failed""; exit 1; fi</div><div><br /></div><div>Alternative 1:</div><div><br /></div><div>&nbsp; &nbsp; :::bash</div><div>&nbsp; &nbsp; command || { echo ""command failed""; exit 1; }</div><div><br /></div><div>Alternative 2:</div><div><br /></div><div>&nbsp; &nbsp; :::bash</div><div>&nbsp; &nbsp; if ! command; then echo ""command failed""; exit 1; fi</div><div><br /></div><div>Alternative 3:</div><div><br /></div><div>&nbsp; &nbsp; :::bash</div><div>&nbsp; &nbsp; set +e</div><div>&nbsp; &nbsp; command1</div><div>&nbsp; &nbsp; command2</div><div>&nbsp; &nbsp; set -e</div><div><br /></div>"					
disable pipe returning code of last command	<code>set -o pipefail</code><div><br /></div><div>Each command in a pipeline is executed in its own subshell. The exit status of a pipeline is the exit status of the last command in the pipeline, unless the<code>&nbsp;pipefail</code>&nbsp;option is enabled. If&nbsp;<code>pipefail</code>&nbsp;is enabled, the pipeline’s return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit successfully. If the reserved word&nbsp;<code>!</code>&nbsp;precedes the pipeline, the exit status is the logical negation of the exit status as described above. The shell waits for all commands in the pipeline to terminate before returning a value.</div>					
List all signals you can trap	<code>kill -l</code>					
lockfile without race condition	"<p>It’s worth pointing out that there is a slight race condition in the above lock example between the time we test for the lockfile and the time we create it. A possible solution to this is to use IO redirection and <code>bash</code>’s <code>noclobber</code> mode, which won’t redirect to an existing file. We can use something similar to:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">if</span> <span style=""color: #d0d0d0"">(</span> <span style=""color: #24909d"">set</span> -o noclobber<span style=""color: #d0d0d0"">;</span> <span style=""color: #24909d"">echo</span> <span style=""color: #ed9d13"">""</span><span style=""color: #40ffff"">$$</span><span style=""color: #ed9d13"">""</span> &gt; <span style=""color: #ed9d13"">""</span><span style=""color: #40ffff"">$lockfile</span><span style=""color: #ed9d13"">""</span><span style=""color: #d0d0d0"">)</span> 2&gt; /dev/null<span style=""color: #d0d0d0"">;</span>  <span style=""color: #6ab825; font-weight: bold"">then</span>    <span style=""color: #24909d"">trap</span> <span style=""color: #ed9d13"">'rm -f ""$lockfile""; exit $?'</span> INT TERM EXIT     critical-section     rm -f <span style=""color: #ed9d13"">""</span><span style=""color: #40ffff"">$lockfile</span><span style=""color: #ed9d13"">""</span>    <span style=""color: #24909d"">trap</span> - INT TERM EXIT <span style=""color: #6ab825; font-weight: bold"">else</span>    <span style=""color: #24909d"">echo</span> <span style=""color: #ed9d13"">""Failed to acquire lockfile: </span><span style=""color: #40ffff"">$lockfile</span><span style=""color: #ed9d13"">.""</span>     <span style=""color: #24909d"">echo</span> <span style=""color: #ed9d13"">""Held by </span><span style=""color: #6ab825; font-weight: bold"">$(</span>cat <span style=""color: #40ffff"">$lockfile</span><span style=""color: #6ab825; font-weight: bold"">)</span><span style=""color: #ed9d13"">""</span> <span style=""color: #6ab825; font-weight: bold"">fi</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU5NjE2NTUsICJpZCI6ICIxNDkwNDcyOTQ4ODIyLTAwMSIsICJtZCI6ICJJdFx1MjAxOXMgd29ydGggcG9pbnRpbmcgb3V0IHRoYXQgdGhlcmUgaXMgYSBzbGlnaHQgcmFjZSBjb25kaXRpb24gaW4gdGhlIGFib3ZlIGxvY2sgZXhhbXBsZSBiZXR3ZWVuIHRoZSB0aW1lIHdlIHRlc3QgZm9yIHRoZSBsb2NrZmlsZSBhbmQgdGhlIHRpbWUgd2UgY3JlYXRlIGl0LiBBIHBvc3NpYmxlIHNvbHV0aW9uIHRvIHRoaXMgaXMgdG8gdXNlIElPIHJlZGlyZWN0aW9uIGFuZCBgYmFzaGBcdTIwMTlzIGBub2Nsb2JiZXJgIG1vZGUsIHdoaWNoIHdvblx1MjAxOXQgcmVkaXJlY3QgdG8gYW4gZXhpc3RpbmcgZmlsZS4gV2UgY2FuIHVzZSBzb21ldGhpbmcgc2ltaWxhciB0bzpcbiAgXG4gIFxuICAgIDo6OmJhc2hcbiAgICBpZiAoIHNldCAtbyBub2Nsb2JiZXI7IGVjaG8gJnF1b3Q7JCQmcXVvdDsgJmd0OyAmcXVvdDskbG9ja2ZpbGUmcXVvdDspIDImZ3Q7IC9kZXYvbnVsbDsgXG4gICAgdGhlblxuICAgICAgIHRyYXAgJmFwb3M7cm0gLWYgJnF1b3Q7JGxvY2tmaWxlJnF1b3Q7OyBleGl0ICQ/JmFwb3M7IElOVCBURVJNIEVYSVRcbiAgXG4gICAgICAgY3JpdGljYWwtc2VjdGlvblxuICBcbiAgICAgICBybSAtZiAmcXVvdDskbG9ja2ZpbGUmcXVvdDtcbiAgICAgICB0cmFwIC0gSU5UIFRFUk0gRVhJVFxuICAgIGVsc2VcbiAgICAgICBlY2hvICZxdW90O0ZhaWxlZCB0byBhY3F1aXJlIGxvY2tmaWxlOiAkbG9ja2ZpbGUuJnF1b3Q7IFxuICAgICAgIGVjaG8gJnF1b3Q7SGVsZCBieSAkKGNhdCAkbG9ja2ZpbGUpJnF1b3Q7XG4gICAgZmlcbiJ9---->"					
find <code>..</code> in shell history	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">grep <span style=""color: #ed9d13"">\\</span>.<span style=""color: #ed9d13"">\\</span>. ~/.zsh_history </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0Mjk1NTEsICJpZCI6ICIxNDkwNDczMDkyMjczLTAwMSIsICJtZCI6ICIgICAgOjo6c2hcbiAgICBncmVwIFxcXFwuXFxcXC4gfi8uenNoX2hpc3RvcnlcbiJ9---->"					
bash for range	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">for</span> i in <span style=""color: #d0d0d0"">{</span>1..1000<span style=""color: #d0d0d0"">};</span> <span style=""color: #6ab825; font-weight: bold"">do</span> <span style=""color: #24909d"">echo</span> <span style=""color: #40ffff"">$i</span><span style=""color: #d0d0d0"">;</span> <span style=""color: #6ab825; font-weight: bold"">done</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTgzNDg4MTYsICJpZCI6ICIxNDkwNDc3MDMzMjM2LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIGZvciBpIGluIHsxLi4xMDAwfTsgZG8gZWNobyAkaTsgZG9uZVxuIn0=---->"					
zsh synonym for true	:					
change to previous directory	<code>cd -</code>		y			marked
replace first <code>&lt;old&gt;</code> with <code>&lt;new&gt;</code> in current directory path	<p><code>cd &lt;old&gt; &lt;new&gt;</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc4NjgsICJpZCI6ICIxNDkwNDc4OTU0MjMxLTAwMSIsICJtZCI6ICJgY2QgJmx0O29sZCZndDsgJmx0O25ldyZndDtgXG4ifQ==---->		y			
directory stack	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">pushd dirname ... popd </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc4NDYsICJpZCI6ICIxNDkwNDc5MTc5OTg1LTAwMSIsICJtZCI6ICIgICAgcHVzaGQgZGlybmFtZVxuICAgIC4uLlxuICAgIHBvcGRcbiJ9---->"		y			
null byte in GNU <code>sed</code>	<p><code>\x00</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc4NTIsICJpZCI6ICIxNDkzNTkzNzM4NTIyLTAwMSIsICJtZCI6ICJgXFx4MDBgXG4ifQ==---->		y			
null byte	<code>\0</code>		y			
bash builtin&nbsp;echo -n	echo		-n			<div>suppress trailing newline</div>			
bash builtin&nbsp;echo -e	echo		-e			enable interpretation of backslash-escaped characters			
bash builtin echo -E	echo		-E			disable interpretation of backslash-escaped characters			
bash builtin echo&nbsp;\a	echo	escape sequence			\a	alert (bell)			
bash builtin echo&nbsp;\b	echo	escape sequence			\b	backspace			
bash builtin echo&nbsp;\c	echo	escape sequence			\c	suppress further output			
bash builtin echo&nbsp;\e	echo	escape sequence			\e	escape			
bash builtin echo&nbsp;\f	echo	escape sequence			\f	form feed			
bash builtin echo&nbsp;\n	echo	escape sequence			\n	new line			
bash builtin echo&nbsp;\r	echo	escape sequence			\r	carriage return			
bash builtin echo&nbsp;\t	echo	escape sequence			\t	horizontal tab			
bash builtin echo&nbsp;\v	echo	escape sequence			\v	vertical tab			
bash builtin echo&nbsp;\\	echo	escape sequence			\\	backslash			
bash builtin echo&nbsp;\0nnn	echo	escape sequence			\0<i>nnn</i>	the eight-bit character whose value is the octal value <var>nnn</var> (zero to three octal digits)			
bash builtin echo&nbsp;\xHH	echo	escape sequence			\x<i>HH</i>	the eight-bit character whose value is the hexadecimal value <var>HH</var> (one or two hex digits)			
Zsh startup files	<p><code>$ZDOTDIR/.zshenv</code><br /> <code>$ZDOTDIR/.zprofile</code><br /> <code>$ZDOTDIR/.zshrc</code><br /> <code>$ZDOTDIR/.zlogin</code><br /> <code>$ZDOTDIR/.zlogout</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYxNzY2OTcsICJpZCI6ICIxNDkzNTk0NTczMzEyLTAwMSIsICJtZCI6ICJgJFpET1RESVIvLnpzaGVudmBcbmAkWkRPVERJUi8uenByb2ZpbGVgXG5gJFpET1RESVIvLnpzaHJjYFxuYCRaRE9URElSLy56bG9naW5gXG5gJFpET1RESVIvLnpsb2dvdXRgXG4ifQ==---->	<p>If <code>ZDOTDIR</code> is not set, then the value of <code>HOME</code> is used.<br /> <code>.zshenv</code> is sourced on all invocations of the shell, unless the <code>-f</code> option is set. It should contain commands to set the command search path, plus other important environment variables. <code>.zshenv</code> should not contain commands that produce output or assume the shell is attached to a tty.<br /> <code>.zshrc</code> is sourced in interactive shells. It should contain commands to set up aliases, functions, options, key bindings, etc.<br /> <code>.zlogin</code> is sourced in login shells. It should contain commands that should be executed only in login shells. <code>.zlogout</code> is sourced when login shells exit. <code>.zprofile</code> is similar to <code>.zlogin</code>, except that it is sourced before <code>.zshrc</code>. <code>.zprofile</code> is meant as an alternative to <code>.zlogin</code> for ksh fans; the two are not intended to be used together, although this could certainly be done if desired. <code>.zlogin</code> is not the place for alias definitions, options, environment variable settings, etc.; as a general rule, it should not change the shell environment at all. Rather, it should be used to set the terminal type and run a series of external commands (fortune, msgs, etc).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYxNzY3MDMsICJpZCI6ICIxNDkzNTk0NTczMzEyLTAwMiIsICJtZCI6ICJJZiBgWkRPVERJUmAgaXMgbm90IHNldCwgdGhlbiB0aGUgdmFsdWUgb2YgYEhPTUVgIGlzIHVzZWQuXG5gLnpzaGVudmAgaXMgc291cmNlZCBvbiBhbGwgaW52b2NhdGlvbnMgb2YgdGhlIHNoZWxsLCB1bmxlc3MgdGhlIGAtZmAgb3B0aW9uIGlzIHNldC4gSXQgc2hvdWxkIGNvbnRhaW4gY29tbWFuZHMgdG8gc2V0IHRoZSBjb21tYW5kIHNlYXJjaCBwYXRoLCBwbHVzIG90aGVyIGltcG9ydGFudCBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIGAuenNoZW52YCBzaG91bGQgbm90IGNvbnRhaW4gY29tbWFuZHMgdGhhdCBwcm9kdWNlIG91dHB1dCBvciBhc3N1bWUgdGhlIHNoZWxsIGlzIGF0dGFjaGVkIHRvIGEgdHR5LlxuYC56c2hyY2AgaXMgc291cmNlZCBpbiBpbnRlcmFjdGl2ZSBzaGVsbHMuIEl0IHNob3VsZCBjb250YWluIGNvbW1hbmRzIHRvIHNldCB1cCBhbGlhc2VzLCBmdW5jdGlvbnMsIG9wdGlvbnMsIGtleSBiaW5kaW5ncywgZXRjLlxuYC56bG9naW5gIGlzIHNvdXJjZWQgaW4gbG9naW4gc2hlbGxzLiBJdCBzaG91bGQgY29udGFpbiBjb21tYW5kcyB0aGF0IHNob3VsZCBiZSBleGVjdXRlZCBvbmx5IGluIGxvZ2luIHNoZWxscy4gYC56bG9nb3V0YCBpcyBzb3VyY2VkIHdoZW4gbG9naW4gc2hlbGxzIGV4aXQuIGAuenByb2ZpbGVgIGlzIHNpbWlsYXIgdG8gYC56bG9naW5gLCBleGNlcHQgdGhhdCBpdCBpcyBzb3VyY2VkIGJlZm9yZSBgLnpzaHJjYC4gYC56cHJvZmlsZWAgaXMgbWVhbnQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gYC56bG9naW5gIGZvciBrc2ggZmFuczsgdGhlIHR3byBhcmUgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgdG9nZXRoZXIsIGFsdGhvdWdoIHRoaXMgY291bGQgY2VydGFpbmx5IGJlIGRvbmUgaWYgZGVzaXJlZC4gYC56bG9naW5gIGlzIG5vdCB0aGUgcGxhY2UgZm9yIGFsaWFzIGRlZmluaXRpb25zLCBvcHRpb25zLCBlbnZpcm9ubWVudCB2YXJpYWJsZSBzZXR0aW5ncywgZXRjLjsgYXMgYSBnZW5lcmFsIHJ1bGUsIGl0IHNob3VsZCBub3QgY2hhbmdlIHRoZSBzaGVsbCBlbnZpcm9ubWVudCBhdCBhbGwuIFJhdGhlciwgaXQgc2hvdWxkIGJlIHVzZWQgdG8gc2V0IHRoZSB0ZXJtaW5hbCB0eXBlIGFuZCBydW4gYSBzZXJpZXMgb2YgZXh0ZXJuYWwgY29tbWFuZHMgKGZvcnR1bmUsIG1zZ3MsIGV0YykuXG4ifQ==---->	y			
unset shell function	<code>unset -f <i>my_function</i></code><br /><div><code>unfunction <i>my_function</i></code>&nbsp;(<b>Zsh</b>)</div>					
"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">mv second_file.txt{.new,} </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY0NTg2NzQsICJpZCI6ICIxNDk0MDQwMzUzNTA2LTAwMCIsICJtZCI6ICIgICAgbXYgc2Vjb25kX2ZpbGUudHh0ey5uZXcsfVxuIn0=---->"	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">mv second_file.txt.new second_file.txt </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY0NTg2NjgsICJpZCI6ICIxNDk0MDQwMzUzNTA2LTAwMSIsICJtZCI6ICIgICAgbXYgc2Vjb25kX2ZpbGUudHh0Lm5ldyBzZWNvbmRfZmlsZS50eHRcbiJ9---->"		f			marked
grep --version	grep		-V	--version		<p>Output the version number of <code>grep</code> and exit.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5MDksICJpZCI6ICIxNDk0Mzk1MDAwMTc1LTAwNiIsICJtZCI6ICJPdXRwdXQgdGhlIHZlcnNpb24gbnVtYmVyIG9mIGBncmVwYCBhbmQgZXhpdC5cbiJ9---->			grep
grep --extended-regexp	grep	variant	-E	--extended-regexp	egrep	Interpret <u>PATTERN</u> as an extended regular expression (ERE).	<div>grep [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div>grep [<u>OPTIONS</u>] [-e <u>PATTERN</u> | -f <u>FILE</u>] [<u>FILE</u>...]</div>		grep
grep --fixed-strings	grep	variant	-F	--fixed-strings	fgrep	<div>Interpret <u>PATTERN</u> as a list of fixed strings (instead of regular expressions), separated by newlines, any of which is to be matched.</div>	<div>grep [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div>grep [<u>OPTIONS</u>] [-e <u>PATTERN</u> | -f <u>FILE</u>] [<u>FILE</u>...]</div>		grep
grep --basic-regexp	grep		-G <u>PATTERN</u>	--basic-regexp <u>PATTERN</u>		Interpret <u>PATTERN</u> as a basic regular expression (BRE). This is the default.			grep
grep --perl-regexp	grep		-P	--perl-regexp		<div>Interpret the pattern as a Perl-compatible regular expression (PCRE). This is highly experimental and <code>grep</code> may warn of unimplemented features.</div>	<div><div>grep [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div>grep [<u>OPTIONS</u>] [-e <u>PATTERN</u> | -f <u>FILE</u>] [<u>FILE</u>...]</div></div>		grep
grep --regexp	grep		-e <u>PATTERN</u>	--regexp=<u>PATTERN</u>		"<div>Use <u>PATTERN</u> as the pattern. If this option is used multiple times or is combined with the <code>-f</code> (<code>--file</code>) option, search for all patterns given. This option can be used to protect a pattern beginning with ""-"".</div>"	<div><div><code>grep</code> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><code>grep</code> [<u>OPTIONS</u>] [<code>-e</code> <u>PATTERN</u> | <code>-f</code> <u>FILE</u>] [<u>FILE</u>...]</div></div>		grep
grep --file	grep		-f <u>FILE</u>	--file=<u>FILE</u>		<div>Obtain patterns from <u>FILE</u>, one per line. If this option is used multiple times or is combined with the <code>-e</code> (<code>--regexp</code>) option, search for all patterns given. The empty file contains zero patterns, and therefore matches nothing.</div>	<div><div><code>grep</code> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><code>grep</code> [<u>OPTIONS</u>] [<code>-e</code> <u>PATTERN</u> | <code>-f</code> <u>FILE</u>] [<u>FILE</u>...]</div></div>		grep
grep --ignore-case	grep	obsolete alias	-i	--ignore-case	-y	Ignore case distinctions in both the <u>PATTERN</u> and the input files.	"<div><div><code><div>grep -i ""the"" demo_file</div></code></div></div>"		grep
grep --invert-match	grep		-v	--invert-match		Invert the sense of matching, to select non-matching lines.	<div><div><code>grep</code> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><code>grep</code> [<u>OPTIONS</u>] [<code>-e</code> <u>PATTERN</u> | <code>-f</code> <u>FILE</u>] [<u>FILE</u>...]</div></div>		grep
grep --word-regexp	grep		-w	--word-regexp		<div><div><div>Select only those lines containing matches that form whole words. The test is that the matching substring must either be at the beginning of the line, or preceded by a non-word constituent character. Similarly, it must be either at the end of the line or followed by a non-word constituent character. Word-constituent characters are letters, digits, and the underscore. This option has no effect if <code>-x</code> is also specified.</div></div></div>	<div><div><code>grep</code> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><code>grep</code> [<u>OPTIONS</u>] [<code>-e</code> <u>PATTERN</u> | <code>-f</code> <u>FILE</u>] [<u>FILE</u>...]</div></div>		grep
grep --line-regexp	grep		-x	--line-regexp		Select only those matches that exactly match the whole line. For a regular expression pattern, this is like parenthesizing the pattern and then surrounding it with <code>^</code> and <code>$</code>.	<div><div><code>grep</code> [<u>OPTIONS</u>] <u>PATTERN</u> [<u>FILE</u>...]</div><div><code>grep</code> [<u>OPTIONS</u>] [<code>-e</code> <u>PATTERN</u> | <code>-f</code> <u>FILE</u>] [<u>FILE</u>...]</div></div>		grep
grep --count	grep		-c	--count		<div>Suppress normal output; instead print a count of matching lines for each input file. With the <code>-v</code>, <code>--invert-match</code> option (see below), count non-matching lines.</div>			grep
grep --color	grep			--color[=<u>WHEN</u>]		<div>Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of context lines) with escape sequences to display them in color on the terminal. The colors are defined by the environment variable <code>GREP_COLORS</code>. The deprecated environment variable <code>GREP_COLOR</code> is still supported, but its setting does not have priority. <u>WHEN</u> is <code>never</code>, <code>always</code>, or <code>auto</code>.</div>			grep
grep --files-without-match	grep		-L	--files-without-match		<div>Suppress normal output; instead print the name of each input file from which no output would normally have been printed. The scanning will stop on the first match.</div>			grep
grep --files-with-matches	grep		-l	--files-with-matches		<div>Suppress normal output; instead print the name of each input file from which output would normally have been printed. The scanning will stop on the first match.</div>			grep
grep --max-count	grep		-m <u>NUM</u>	--max-count=<u>NUM</u>		<div>Stop reading a file after <u>NUM</u> matching lines. If the input is standard input from a regular file, and <u>NUM</u> matching lines are output, <code>grep</code> ensures that the standard input is positioned to just after the last matching line before exiting, regardless of the presence of trailing context lines. This enables a calling process to resume a search. When <code>grep</code> stops after <u>NUM</u> matching lines, it outputs any trailing context lines. When the <code>-c</code> or <code>--count</code> option is also used,<code> grep</code> does not output a count greater than <u>NUM</u>. When the <code>-v</code> or <code>--invert-match</code> option is also used, <code>grep</code> stops after outputting <u>NUM </u>non-matching lines.</div>			grep
grep --only-matching	grep		-o	--only-matching		Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.			grep
grep --quiet	grep		-q	--quiet	grep --silent	<div>Quiet; do not write anything to standard output. Exit immediately with zero status if any match is found, even if an error was detected. Also see the <code>-s</code> or <code>--no-messages</code> option.</div>			grep
grep --no-messages	grep		-s	--no-messages		<div>Suppress error messages about nonexistent or unreadable files.</div>			grep
grep --byte-offset	grep		-b	--byte-offset		Print the 0-based byte offset within the input file before each line of output. If <code>-o</code> (<code>--only-matching</code>) is specified, print the offset of the matching part itself.			grep
grep --with-filename	grep		-H	--with-filename		Print the file name for each match. This is the default when there is more than one file to search.			grep
grep --no-filename	grep		-h	--no-filename		Suppress the prefixing of file names on output. This is the default when there is only one file (or only standard input) to search.			grep
grep --label	grep			--label=<u>LABEL</u>		Display input actually coming from standard input as input coming from file <u><strike>LABEL</strike></u>. This is especially useful when implementing tools like <code>zgrep</code>. See also the <code>-H</code> option.	<div><div><div>gzip -cd foo.gz | grep --label=foo -H something</div></div></div>		grep
grep --line-number	grep		-n	--line-number		<div>Prefix each line of output with the 1-based line number within its input file. (This is specified by <b>POSIX</b>.) </div>			grep
grep --initial-tab	grep		-T	--initial-tab		<div>Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal. This is useful with options that prefix their output to the actual content: <code>-H</code>, <code>-n</code>, and<code> -b</code>. In order to improve the probability that lines from a single file will all start at the same column, this also causes the line number and byte offset (if present) to be printed in a minimum size field width. </div>			grep
grep --unix-byte-offsets	grep		-u	--unix-byte-offsets		<div>Report Unix-style byte offsets. This switch causes <code>grep</code> to report byte offsets as if the file were a Unix-style text file, i.e., with CR characters stripped off. This will produce results identical to running <code>grep</code> on a Unix machine. This option has no effect unless <code>-b</code> option is also used; it has no effect on platforms other than MS-DOS and MS -Windows. </div>			grep
grep --null	grep		-Z	--null		Output a zero byte (the ASCII <code>NUL</code> character) instead of the character that normally follows a file name. For example, <code><strike>grep -lZ</strike></code> outputs a zero byte after each file name instead of the usual newline. This option makes the output unambiguous, even in the presence of file names containing unusual characters like newlines. This option can be used with friends like <code>find -print0, perl -0, sort -z</code>, and <code>xargs -0</code> to process arbitrary file names, even those that contain newline characters.			grep
grep --after-context	grep		-A <u>NUM</u>	--after-context=<u>NUM</u>		<div>Print <u>NUM</u> lines of trailing context after matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the <code>-o</code> or <code>--only-matching</code> option, this has no effect and a warning is given. </div>	"<div><div><div><code>grep -A 3 -i ""example"" demo_text</code></div></div></div>"		grep
grep --before-context	grep		-B <u>NUM</u>	--before-context=<u>NUM</u>		<div>Print <u>NUM</u> lines of leading context before matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the <code>-o</code> or <code>--only-matching</code> option, this has no effect and a warning is given.</div>			grep
grep --context	grep	alias	-C<u>NUM</u>	--context=<u>NUM</u>	grep -<u>NUM</u>	<div>Print <u>NUM</u> lines of output context. Places a line containing a group separator (<code>--</code>) between contiguous groups of matches. With the <code>-o</code> or <code>--only-matching</code> option, this has no effect and a warning is given.</div>			grep
grep --recursive	grep	equivalent	-(R|r)	--recursive	grep -d recurse	<div>Read all files under each directory, recursively.</div>			grep
grep --include	grep			--include=<u>GLOB</u>		<div>Search only files whose base name matches <u>GLOB</u> (using wildcard matching as described under <code>&#8209;&#8209;exclude</code>). </div>			grep
grep --<b>exclude</b>	grep			--<b>exclude</b>=<u>GLOB</u>		Skip files whose base name matches <u>GLOB</u> (using wildcard matching). A file-name glob can use <b><code>*</code></b>, <b><code>?</code></b>, and <b><code>[...]</code></b> as wildcards, and <b><code>\</code></b> to quote a wildcard or backslash character literally.			grep
grep --<b>exclude-from</b>	grep			--<b>exclude-from=<u>FILE</u></b>		Skip files whose base name matches any of the file-name globs read from <u>FILE</u> (using wildcard matching as described under <code>--exclude</code>).			grep
grep --<b>exclude-dir</b>	grep			--<b>exclude-dir=<u>DIR</u></b>		Exclude directories matching the pattern <u>DIR</u> from recursive searches.			grep
grep -I	grep	equivalent	-I		grep&nbsp;--binary-files=without-match	<div>Process a binary file as if it did not contain matching data. </div>			grep
grep --text	grep		-a	--text		Process a binary file as if it were text; this is equivalent to the <code>--binary-files=text</code> option.			grep
grep --line-buffered	grep			--line-buffered		<div>Use line buffering on output. This can cause a performance penalty. </div>			grep
grep --binary	grep		-U	--binary		<div>Treat the <code>file</code>(s) as binary. By default, under MS-DOS and MS -Windows, <code>grep</code> guesses the file type by looking at the contents of the first 32KB read from the file. If <code>grep</code> decides the file is a text file, it strips the CR characters from the original file contents (to make regular expressions with <code>^</code> and <code>$</code> work correctly). This option&nbsp;overrules this guesswork, causing all files to be read and passed to the matching mechanism verbatim; if the file is a text file with CR/LF pairs at the end of each line, this will cause some regular expressions to fail. This option has no effect on platforms other than MS-DOS and MS -Windows.</div>			grep
grep --null-data	grep		-z	--null-data		<div>Treat the input as a set of lines, each terminated by a zero byte (the ASCII NUL character) instead of a newline. Like the <code><strike>-Z</strike></code> or <code>--null</code> option, this option can be used with commands like <code>sort -z</code> to process arbitrary file names. </div>			grep
rsync --version	rsync			--version		<div>Print the <code>rsync</code> version number and exit.</div>			rsync
rsync --verbose	rsync		-v	--verbose		<div> This option increases the amount of information you are given during the transfer.</div>	<div>By default, rsync works silently. A single&nbsp;<code>-v</code>&nbsp;will give you information about what files are being transferred and a brief summary at the end. Two&nbsp;<code>-v</code>&nbsp;options will give you information on what files are being skipped and slightly more information at the end. More than two&nbsp;<code>-v</code>&nbsp;options should only be used if you are debugging rsync.</div><div><br /></div><div>Note that the names of the transferred files that are output are done using&nbsp;a default&nbsp;<code>--out-format</code>&nbsp;of&nbsp;<code>%n%L</code>, which tells you just the name of the file and, if the item is a link, where it points. At the single&nbsp;<code>-v</code>&nbsp;level of verbosity, this does not mention when a file gets its attributes changed. If you ask for an itemized list of changed attributes (either&nbsp;<code>--itemize-changes</code>&nbsp;or adding&nbsp;<code>%i</code>&nbsp;to the&nbsp;<code>--out-format</code>&nbsp;setting), the output (on the client) increases to mention all items that are changed in any way. See the&nbsp;<code>--out-format</code>&nbsp;option for more details.</div>		rsync
rsync --no-<i>OPTION</i>	rsync			<b>--no-<i>OPTION</i></b>		<p>You may turn off one or more implied options by prefixing the option name with <code><strike>no-</strike></code>. </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY2NDEwMzMsICJpZCI6ICIxNDk0Mzk1MDAwMjIzLTAwNiIsICJtZCI6ICJZb3UgbWF5IHR1cm4gb2ZmIG9uZSBvciBtb3JlIGltcGxpZWQgb3B0aW9ucyBieSBwcmVmaXhpbmcgdGhlIG9wdGlvbiBuYW1lIHdpdGggYG5vLWAuIFxuIn0=---->	<p>Not all options may be prefixed with a <code>no-</code>: only options that are implied by other options (e.g. <code>--no-D</code>, <code>--no-perms</code>) or have different defaults in various circumstances (e.g. <code>--no-whole-file</code>, <code>--no-blocking-io</code>, <code>--no-dirs</code>). You may specify either the short or the long option name after the <code>no-</code> prefix (e.g. <code>--no-R</code> is the same as <code>--no-relative</code>).</p> <p>For example: if you want to use <code>-a</code> (<code>--archive</code>) but don't want <code>-o</code> (<code>--owner</code>), instead of converting <code>-a</code> into <code>-rlptgD</code>, you could specify <code>-a --no-o</code> (or <code>-a --no-owner</code>).</p> <p>The order of the options is important: if you specify <code>--no-r -a</code>, the <code>-r</code> option would end up being turned on, the opposite of <code>-a --no-r</code>. Note also that the side-effects of the <code>--files-from</code> option are NOT positional, as it affects the default state of several options and slightly changes the meaning of <code>-a</code> (see the <code>--files-from</code> option for more details).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY2NDEwNDAsICJpZCI6ICIxNDk0Mzk1MDAwMjIzLTAwNyIsICJtZCI6ICJOb3QgYWxsIG9wdGlvbnMgbWF5IGJlIHByZWZpeGVkIHdpdGggYSBgbm8tYDogb25seSBvcHRpb25zIHRoYXQgYXJlIGltcGxpZWQgYnkgb3RoZXIgb3B0aW9ucyAoZS5nLiBgLS1uby1EYCwgYC0tbm8tcGVybXNgKSBvciBoYXZlIGRpZmZlcmVudCBkZWZhdWx0cyBpbiB2YXJpb3VzIGNpcmN1bXN0YW5jZXMgKGUuZy4gYC0tbm8td2hvbGUtZmlsZWAsIGAtLW5vLWJsb2NraW5nLWlvYCwgYC0tbm8tZGlyc2ApLiBZb3UgbWF5IHNwZWNpZnkgZWl0aGVyIHRoZSBzaG9ydCBvciB0aGUgbG9uZyBvcHRpb24gbmFtZSBhZnRlciB0aGUgYG5vLWAgcHJlZml4IChlLmcuIGAtLW5vLVJgIGlzIHRoZSBzYW1lIGFzIGAtLW5vLXJlbGF0aXZlYCkuXG4gIFxuRm9yIGV4YW1wbGU6IGlmIHlvdSB3YW50IHRvIHVzZSBgLWFgIChgLS1hcmNoaXZlYCkgYnV0IGRvbiZhcG9zO3Qgd2FudCBgLW9gIChgLS1vd25lcmApLCBpbnN0ZWFkIG9mIGNvbnZlcnRpbmcgYC1hYCBpbnRvIGAtcmxwdGdEYCwgeW91IGNvdWxkIHNwZWNpZnkgYC1hIC0tbm8tb2AgKG9yIGAtYSAtLW5vLW93bmVyYCkuXG4gIFxuVGhlIG9yZGVyIG9mIHRoZSBvcHRpb25zIGlzIGltcG9ydGFudDogaWYgeW91IHNwZWNpZnkgYC0tbm8tciAtYWAsIHRoZSBgLXJgIG9wdGlvbiB3b3VsZCBlbmQgdXAgYmVpbmcgdHVybmVkIG9uLCB0aGUgb3Bwb3NpdGUgb2YgYC1hIC0tbm8tcmAuIE5vdGUgYWxzbyB0aGF0IHRoZSBzaWRlLWVmZmVjdHMgb2YgdGhlIGAtLWZpbGVzLWZyb21gIG9wdGlvbiBhcmUgTk9UIHBvc2l0aW9uYWwsIGFzIGl0IGFmZmVjdHMgdGhlIGRlZmF1bHQgc3RhdGUgb2Ygc2V2ZXJhbCBvcHRpb25zIGFuZCBzbGlnaHRseSBjaGFuZ2VzIHRoZSBtZWFuaW5nIG9mIGAtYWAgKHNlZSB0aGUgYC0tZmlsZXMtZnJvbWAgb3B0aW9uIGZvciBtb3JlIGRldGFpbHMpLlxuIn0=---->		rsync
rsync <b>--size-only</b>	rsync			<b>--size-only</b>		"<div>This modifies rsync's ""quick check"" algorithm for finding files that need to be transferred, changing it from the default of transferring files with either a changed size or a changed last-modified time to<i> just looking for files that have changed in size</i>. This is useful when starting to use rsync after using another mirroring system which may not preserve timestamps exactly. </div>"			rsync
rsync <b>--modify-window</b>	rsync			<b>--modify-window=<i>N</i></b>		<div>When comparing two timestamps, rsync treats the timestamps as being equal if they differ by no more than the given value. This is normally 0 (for an exact match), but you may find it useful to set this to a larger value in some situations. In particular, when transferring to or from an MS Windows FAT filesystem (which represents times with a 2-second resolution), <code><strike>--modify-window</strike>=1</code> is useful (allowing times to differ by up to 1 second).</div>			rsync
rsync --recursive	rsync		-r	--recursive		<p>This tells rsync to copy directories recursively. See also <code>--dirs</code> (<code>-d</code>).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY2ODk5NjYsICJpZCI6ICIxNDk0Mzk1MDAwMjI2LTAwNiIsICJtZCI6ICJUaGlzIHRlbGxzIHJzeW5jIHRvIGNvcHkgZGlyZWN0b3JpZXMgcmVjdXJzaXZlbHkuIFNlZSBhbHNvIGAtLWRpcnNgIChgLWRgKS5cbiJ9---->	<p>Beginning with rsync 3.0.0, the recursive algorithm used is now an incremental scan that uses much less memory than before and begins the transfer after the scanning of the first few directories have been completed. This incremental scan only affects our recursion algorithm, and does not change a non-recursive transfer. It is also only possible when both ends of the transfer are at least version 3.0.0.</p> <p>Some options require <code>rsync</code> to know the full file list, so these options disable the incremental recursion mode. These include: <code>--delete-before</code>, <code>--delete-after</code>, <code>--prune-empty-dirs</code>, and <code>--delay-updates</code>. Because of this, the default delete mode when you specify <code>--delete</code> is now <code>--delete-during</code> when both ends of the connection are at least 3.0.0 (use <code>--del</code> or <code>--delete-during</code> to request this improved deletion mode explicitly). See also the <code>--delete-delay</code> option that is a better choice than using <code>--delete-after</code>.<br /> Incremental recursion can be disabled using the <code>--no-inc-recursive</code> option or its shorter <code>--no-i-r</code> alias.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY2ODk5NDQsICJpZCI6ICIxNDk0Mzk1MDAwMjI2LTAwNyIsICJtZCI6ICJCZWdpbm5pbmcgd2l0aCByc3luYyAzLjAuMCwgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG0gdXNlZCBpcyBub3cgYW4gaW5jcmVtZW50YWwgc2NhbiB0aGF0IHVzZXMgbXVjaCBsZXNzIG1lbW9yeSB0aGFuIGJlZm9yZSBhbmQgYmVnaW5zIHRoZSB0cmFuc2ZlciBhZnRlciB0aGUgc2Nhbm5pbmcgb2YgdGhlIGZpcnN0IGZldyBkaXJlY3RvcmllcyBoYXZlIGJlZW4gY29tcGxldGVkLiBUaGlzIGluY3JlbWVudGFsIHNjYW4gb25seSBhZmZlY3RzIG91ciByZWN1cnNpb24gYWxnb3JpdGhtLCBhbmQgZG9lcyBub3QgY2hhbmdlIGEgbm9uLXJlY3Vyc2l2ZSB0cmFuc2Zlci4gSXQgaXMgYWxzbyBvbmx5IHBvc3NpYmxlIHdoZW4gYm90aCBlbmRzIG9mIHRoZSB0cmFuc2ZlciBhcmUgYXQgbGVhc3QgdmVyc2lvbiAzLjAuMC5cbiAgXG5Tb21lIG9wdGlvbnMgcmVxdWlyZSBgcnN5bmNgIHRvIGtub3cgdGhlIGZ1bGwgZmlsZSBsaXN0LCBzbyB0aGVzZSBvcHRpb25zIGRpc2FibGUgdGhlIGluY3JlbWVudGFsIHJlY3Vyc2lvbiBtb2RlLiBUaGVzZSBpbmNsdWRlOiBgLS1kZWxldGUtYmVmb3JlYCwgYC0tZGVsZXRlLWFmdGVyYCwgYC0tcHJ1bmUtZW1wdHktZGlyc2AsIGFuZCBgLS1kZWxheS11cGRhdGVzYC4gQmVjYXVzZSBvZiB0aGlzLCB0aGUgZGVmYXVsdCBkZWxldGUgbW9kZSB3aGVuIHlvdSBzcGVjaWZ5IGAtLWRlbGV0ZWAgaXMgbm93IGAtLWRlbGV0ZS1kdXJpbmdgIHdoZW4gYm90aCBlbmRzIG9mIHRoZSBjb25uZWN0aW9uIGFyZSBhdCBsZWFzdCAzLjAuMCAodXNlIGAtLWRlbGAgb3IgYC0tZGVsZXRlLWR1cmluZ2AgdG8gcmVxdWVzdCB0aGlzIGltcHJvdmVkIGRlbGV0aW9uIG1vZGUgZXhwbGljaXRseSkuIFNlZSBhbHNvIHRoZSBgLS1kZWxldGUtZGVsYXlgIG9wdGlvbiB0aGF0IGlzIGEgYmV0dGVyIGNob2ljZSB0aGFuIHVzaW5nIGAtLWRlbGV0ZS1hZnRlcmAuXG5JbmNyZW1lbnRhbCByZWN1cnNpb24gY2FuIGJlIGRpc2FibGVkIHVzaW5nIHRoZSBgLS1uby1pbmMtcmVjdXJzaXZlYCBvcHRpb24gb3IgaXRzIHNob3J0ZXIgYC0tbm8taS1yYCBhbGlhcy5cbiJ9---->		rsync
rsync --relative	rsync		-R	--relative		<div>Use relative paths. This means that the full path names specified on the command line are sent to the server rather than just the last parts of the filenames. This is particularly useful when you want to send several different directories at the same time.</div>	"<p>For example, if you used this command:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">rsync -av /foo/bar/baz.c remote:/tmp/ </pre></div> <p>this would create a file named <code>baz.c</code> in <code>/tmp/</code> on the remote machine. If instead you used</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">rsync -avR /foo/bar/baz.c remote:/tmp/ </pre></div> <p>then a file named <code>/tmp/foo/bar/baz.c</code> would be created on the remote machine, preserving its full path. These extra path elements are called ""implied directories"" (i.e. the ""foo"" and the ""foo/bar"" directories in the above example).</p> <p>Beginning with <strong>rsync</strong> 3.0.0, <strong>rsync</strong> always sends these implied directories as real directories in the file list, even if a path element is really a symlink on the sending side. This prevents some really unexpected behaviors when copying the full path of a file that you didn't realize had a symlink in its path. If you want to duplicate a server-side symlink, include both the symlink via its path, and referent directory via its real path. If you're dealing with an older <strong>rsync</strong> on the sending side, you may need to use the <strong><code>--no-implied-dirs</code></strong> option.</p> <p>It is also possible to limit the amount of path information that is sent as implied directories for each path you specify. With a modern <strong>rsync</strong> on the sending side (beginning with 2.6.7), you can insert a dot and a slash into the source path, like this:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">rsync -avR /foo/./bar/baz.c remote:/tmp/ </pre></div> <p>That would create <strong> /tmp/bar/baz.c</strong> on the remote machine. (Note that the dot must be followed by a slash, so ""/foo/."" would not be abbreviated.) For older <strong>rsync</strong> versions, you would need to use a chdir to limit the source path. For example, when pushing files:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">(</span><span style=""color: #24909d"">cd</span> /foo<span style=""color: #d0d0d0"">;</span> rsync -avR bar/baz.c remote:/tmp/<span style=""color: #d0d0d0"">)</span> </pre></div> <p>(Note that the parens put the two commands into a sub-shell, so that the <code>cd</code> command doesn't remain in effect for future commands.) If you're pulling files from an older rsync, use this idiom (but only for a non-daemon transfer):</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">rsync -avR --rsync-path<span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">""cd /foo; rsync""</span> <span style=""color: #ed9d13"">\</span> remote:bar/baz.c /tmp/ </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY2OTAwMzgsICJpZCI6ICIxNDk0Mzk1MDAwMjI3LTAwNyIsICJtZCI6ICJGb3IgZXhhbXBsZSwgaWYgeW91IHVzZWQgdGhpcyBjb21tYW5kOlxuICBcbiAgICA6OjpzaFxuICAgIHJzeW5jIC1hdiAvZm9vL2Jhci9iYXouYyByZW1vdGU6L3RtcC9cbiAgXG50aGlzIHdvdWxkIGNyZWF0ZSBhIGZpbGUgbmFtZWQgYGJhei5jYCBpbiBgL3RtcC9gIG9uIHRoZSByZW1vdGUgbWFjaGluZS4gSWYgaW5zdGVhZCB5b3UgdXNlZFxuICBcbiAgICA6OjpzaFxuICAgIHJzeW5jIC1hdlIgL2Zvby9iYXIvYmF6LmMgcmVtb3RlOi90bXAvXG4gIFxudGhlbiBhIGZpbGUgbmFtZWQgYC90bXAvZm9vL2Jhci9iYXouY2Agd291bGQgYmUgY3JlYXRlZCBvbiB0aGUgcmVtb3RlIG1hY2hpbmUsIHByZXNlcnZpbmcgaXRzIGZ1bGwgcGF0aC4gVGhlc2UgZXh0cmEgcGF0aCBlbGVtZW50cyBhcmUgY2FsbGVkICZxdW90O2ltcGxpZWQgZGlyZWN0b3JpZXMmcXVvdDsgKGkuZS4gdGhlICZxdW90O2ZvbyZxdW90OyBhbmQgdGhlICZxdW90O2Zvby9iYXImcXVvdDsgZGlyZWN0b3JpZXMgaW4gdGhlIGFib3ZlIGV4YW1wbGUpLlxuICBcbkJlZ2lubmluZyB3aXRoICoqcnN5bmMqKiAzLjAuMCwgKipyc3luYyoqIGFsd2F5cyBzZW5kcyB0aGVzZSBpbXBsaWVkIGRpcmVjdG9yaWVzIGFzIHJlYWwgZGlyZWN0b3JpZXMgaW4gdGhlIGZpbGUgbGlzdCwgZXZlbiBpZiBhIHBhdGggZWxlbWVudCBpcyByZWFsbHkgYSBzeW1saW5rIG9uIHRoZSBzZW5kaW5nIHNpZGUuIFRoaXMgcHJldmVudHMgc29tZSByZWFsbHkgdW5leHBlY3RlZCBiZWhhdmlvcnMgd2hlbiBjb3B5aW5nIHRoZSBmdWxsIHBhdGggb2YgYSBmaWxlIHRoYXQgeW91IGRpZG4mYXBvczt0IHJlYWxpemUgaGFkIGEgc3ltbGluayBpbiBpdHMgcGF0aC4gSWYgeW91IHdhbnQgdG8gZHVwbGljYXRlIGEgc2VydmVyLXNpZGUgc3ltbGluaywgaW5jbHVkZSBib3RoIHRoZSBzeW1saW5rIHZpYSBpdHMgcGF0aCwgYW5kIHJlZmVyZW50IGRpcmVjdG9yeSB2aWEgaXRzIHJlYWwgcGF0aC4gSWYgeW91JmFwb3M7cmUgZGVhbGluZyB3aXRoIGFuIG9sZGVyICoqcnN5bmMqKiBvbiB0aGUgc2VuZGluZyBzaWRlLCB5b3UgbWF5IG5lZWQgdG8gdXNlIHRoZSAqKmAtLW5vLWltcGxpZWQtZGlyc2AqKiBvcHRpb24uXG4gIFxuSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBsaW1pdCB0aGUgYW1vdW50IG9mIHBhdGggaW5mb3JtYXRpb24gdGhhdCBpcyBzZW50IGFzIGltcGxpZWQgZGlyZWN0b3JpZXMgZm9yIGVhY2ggcGF0aCB5b3Ugc3BlY2lmeS4gV2l0aCBhIG1vZGVybiAqKnJzeW5jKiogb24gdGhlIHNlbmRpbmcgc2lkZSAoYmVnaW5uaW5nIHdpdGggMi42LjcpLCB5b3UgY2FuIGluc2VydCBhIGRvdCBhbmQgYSBzbGFzaCBpbnRvIHRoZSBzb3VyY2UgcGF0aCwgbGlrZSB0aGlzOlxuICBcbiAgICA6OjpzaFxuICAgIHJzeW5jIC1hdlIgL2Zvby8uL2Jhci9iYXouYyByZW1vdGU6L3RtcC9cbiAgXG5UaGF0IHdvdWxkIGNyZWF0ZSAqKiAvdG1wL2Jhci9iYXouYyoqIG9uIHRoZSByZW1vdGUgbWFjaGluZS4gKE5vdGUgdGhhdCB0aGUgZG90IG11c3QgYmUgZm9sbG93ZWQgYnkgYSBzbGFzaCwgc28gJnF1b3Q7L2Zvby8uJnF1b3Q7IHdvdWxkIG5vdCBiZSBhYmJyZXZpYXRlZC4pIEZvciBvbGRlciAqKnJzeW5jKiogdmVyc2lvbnMsIHlvdSB3b3VsZCBuZWVkIHRvIHVzZSBhIGNoZGlyIHRvIGxpbWl0IHRoZSBzb3VyY2UgcGF0aC4gRm9yIGV4YW1wbGUsIHdoZW4gcHVzaGluZyBmaWxlczpcbiAgXG4gICAgOjo6c2hcbiAgICAoY2QgL2ZvbzsgcnN5bmMgLWF2UiBiYXIvYmF6LmMgcmVtb3RlOi90bXAvKVxuICBcbiAgXG4oTm90ZSB0aGF0IHRoZSBwYXJlbnMgcHV0IHRoZSB0d28gY29tbWFuZHMgaW50byBhIHN1Yi1zaGVsbCwgc28gdGhhdCB0aGUgYGNkYCBjb21tYW5kIGRvZXNuJmFwb3M7dCByZW1haW4gaW4gZWZmZWN0IGZvciBmdXR1cmUgY29tbWFuZHMuKSBJZiB5b3UmYXBvcztyZSBwdWxsaW5nIGZpbGVzIGZyb20gYW4gb2xkZXIgcnN5bmMsIHVzZSB0aGlzIGlkaW9tIChidXQgb25seSBmb3IgYSBub24tZGFlbW9uIHRyYW5zZmVyKTpcbiAgXG4gICAgOjo6c2hcbiAgICByc3luYyAtYXZSIC0tcnN5bmMtcGF0aD0mcXVvdDtjZCAvZm9vOyByc3luYyZxdW90OyBcXFxuICAgIHJlbW90ZTpiYXIvYmF6LmMgL3RtcC9cbiJ9---->"		rsync
rsync --info	rsync			--info=FLAGS		fine-grained informational verbosity			rsync
rsync --debug	rsync			--debug=FLAGS		"<ul> <li style=""text-align: left; "">Fine-grained control over the debug output you want to see. Flag names may be followed by a level number, with <code>0</code> meaning to silence that output, <code>1</code> being the default output level, and higher numbers increasing the output of that flag.</li> <li style=""text-align: left; "">Some debug messages will only be output when <code>--msgs2stderr</code> is specified, especially those pertaining to I/O and buffer debugging.</li> <li style=""text-align: left; "">Use <code><strike>--debug</strike>=help</code> to see all the available flag names, what they output, and what flag names are added for each increase in the verbose level.</li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTczOTY0MzgsICJpZCI6ICIxNDk0Mzk1MDAwMjI5LTAwNiIsICJtZCI6ICIqIEZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIGRlYnVnIG91dHB1dCB5b3Ugd2FudCB0byBzZWUuIEZsYWcgbmFtZXMgbWF5IGJlIGZvbGxvd2VkIGJ5IGEgbGV2ZWwgbnVtYmVyLCB3aXRoIGAwYCBtZWFuaW5nIHRvIHNpbGVuY2UgdGhhdCBvdXRwdXQsIGAxYCBiZWluZyB0aGUgZGVmYXVsdCBvdXRwdXQgbGV2ZWwsIGFuZCBoaWdoZXIgbnVtYmVycyBpbmNyZWFzaW5nIHRoZSBvdXRwdXQgb2YgdGhhdCBmbGFnLlxuKiBTb21lIGRlYnVnIG1lc3NhZ2VzIHdpbGwgb25seSBiZSBvdXRwdXQgd2hlbiBgLS1tc2dzMnN0ZGVycmAgaXMgc3BlY2lmaWVkLCBlc3BlY2lhbGx5IHRob3NlIHBlcnRhaW5pbmcgdG8gSS9PIGFuZCBidWZmZXIgZGVidWdnaW5nLlxuKiBVc2UgYC0tZGVidWc9aGVscGAgdG8gc2VlIGFsbCB0aGUgYXZhaWxhYmxlIGZsYWcgbmFtZXMsIHdoYXQgdGhleSBvdXRwdXQsIGFuZCB3aGF0IGZsYWcgbmFtZXMgYXJlIGFkZGVkIGZvciBlYWNoIGluY3JlYXNlIGluIHRoZSB2ZXJib3NlIGxldmVsLlxuIn0=---->"	"<p>Some examples:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">rsync -avvv --debug<span style=""color: #d0d0d0"">=</span>none src/ dest/ rsync -avA --del --debug<span style=""color: #d0d0d0"">=</span>del2,acl src/ dest/ </pre></div> <p>This option was added to <strong>3.1.0</strong>, so an older rsync on the server side might reject your attempts at fine-grained control (if one or more flags needed to be send to the server and the server was too old to understand them). See also the ""max verbosity"" caveat for dealing with a daemon. </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTczOTY0NTcsICJpZCI6ICIxNDk0Mzk1MDAwMjI5LTAwNyIsICJtZCI6ICJTb21lIGV4YW1wbGVzOlxuICBcbiAgICA6OjpiYXNoXG4gICAgcnN5bmMgLWF2dnYgLS1kZWJ1Zz1ub25lIHNyYy8gZGVzdC9cbiAgICByc3luYyAtYXZBIC0tZGVsIC0tZGVidWc9ZGVsMixhY2wgc3JjLyBkZXN0L1xuICBcblRoaXMgb3B0aW9uIHdhcyBhZGRlZCB0byAqKjMuMS4wKiosIHNvIGFuIG9sZGVyIHJzeW5jIG9uIHRoZSBzZXJ2ZXIgc2lkZSBtaWdodCByZWplY3QgeW91ciBhdHRlbXB0cyBhdCBmaW5lLWdyYWluZWQgY29udHJvbCAoaWYgb25lIG9yIG1vcmUgZmxhZ3MgbmVlZGVkIHRvIGJlIHNlbmQgdG8gdGhlIHNlcnZlciBhbmQgdGhlIHNlcnZlciB3YXMgdG9vIG9sZCB0byB1bmRlcnN0YW5kIHRoZW0pLiBTZWUgYWxzbyB0aGUgJnF1b3Q7bWF4IHZlcmJvc2l0eSZxdW90OyBjYXZlYXQgZm9yIGRlYWxpbmcgd2l0aCBhIGRhZW1vbi4gXG4ifQ==---->"		rsync
rsync --msgs2stderr	rsync			--msgs2stderr		special output handling for debugging			rsync
rsync --quiet	rsync		-q	--quiet		<div>This option decreases the amount of information you are given during the transfer, notably suppressing information messages from the remote server. This option is useful when invoking rsync from cron.</div>			rsync
rsync --no-motd	rsync			--no-motd		<div>This option affects the information that is output by the client at the start of a daemon transfer. This suppresses the <strike>message of the day</strike>, but it also affects the list of modules that the daemon sends in response to the <code>rsync host::</code> request (due to a limitation in the rsync protocol), so omit this option if you want to request the list of modules from the daemon.</div>			rsync
rsync --checksum	rsync		-c	--checksum		"<p>This changes the way rsync checks if the files have been changed and are in need of a transfer. Without this option, <code>rsync</code> uses a ""quick check"" that (by default) checks if each file's size and time of last modification match between the sender and receiver. <em>This option changes this to compare a 128-bit checksum for each file that has a matching size.</em></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY2ODkzMjIsICJpZCI6ICIxNDk0Mzk1MDAwMjMzLTAwNiIsICJtZCI6ICJUaGlzIGNoYW5nZXMgdGhlIHdheSByc3luYyBjaGVja3MgaWYgdGhlIGZpbGVzIGhhdmUgYmVlbiBjaGFuZ2VkIGFuZCBhcmUgaW4gbmVlZCBvZiBhIHRyYW5zZmVyLiBXaXRob3V0IHRoaXMgb3B0aW9uLCBgcnN5bmNgIHVzZXMgYSAmcXVvdDtxdWljayBjaGVjayZxdW90OyB0aGF0IChieSBkZWZhdWx0KSBjaGVja3MgaWYgZWFjaCBmaWxlJmFwb3M7cyBzaXplIGFuZCB0aW1lIG9mIGxhc3QgbW9kaWZpY2F0aW9uIG1hdGNoIGJldHdlZW4gdGhlIHNlbmRlciBhbmQgcmVjZWl2ZXIuIF9UaGlzIG9wdGlvbiBjaGFuZ2VzIHRoaXMgdG8gY29tcGFyZSBhIDEyOC1iaXQgY2hlY2tzdW0gZm9yIGVhY2ggZmlsZSB0aGF0IGhhcyBhIG1hdGNoaW5nIHNpemUuX1xuIn0=---->"	"<div>Generating the checksums means that both sides will expend a lot of disk I/O reading all the data in the files in the transfer (and this is prior to any reading that will be done to transfer changed files), so this can slow things down significantly.</div><div>The sending side generates its checksums while it is doing the file-system</div><div>scan that builds the list of the available files. The receiver generates its checksums when it is scanning for changed files, and will checksum any file that has the same size as the corresponding sender's file: files with either a changed size or a changed checksum are selected for transfer.</div><div>Note that rsync always verifies that each transferred file was</div><div>correctly reconstructed on the receiving side by checking a whole-file checksum that is generated as the file is transferred, but that automatic after-the-transfer verification has nothing to do with this option's before-the-transfer ""Does this file need to be updated?"" check.</div><div>For protocol 30 and beyond (first supported in 3.0.0), the checksum used is</div><div>MD5. For older protocols, the checksum used is MD4.</div>"		rsync
rsync --archive	rsync	expanded form	-a	--archive	rsync <code>-rlptgoD</code>	<div>Recursion and preserve almost everything except&nbsp;hardlinks, because finding multiply-linked files is expensive. You must separately specify&nbsp;<code>-H</code>.&nbsp;When <code>--files-from</code> is specified,&nbsp;<code>-r</code> is not implied.</div>			rsync
rsync --no-implied-dirs	rsync			--no-implied-dirs		don't send implied dirs with <code>--relative</code>			marked rsync
rsync --backup	rsync		-b	--backup		make backups (see <code>--suffix</code> & <code>--backup-dir</code>)			rsync
rsync --backup-dir	rsync			--backup-dir=DIR		make backups into hierarchy based in <u>DIR</u>			rsync
rsync --suffix	rsync			--suffix=SUFFIX		backup suffix (default <code>~</code> w/o <code>--backup-dir</code>)			rsync
rsync --update	rsync		-u	--update		skip files that are newer on the receiver			rsync
rsync --inplace	rsync			--inplace		update destination files in-place			rsync
rsync --append	rsync			--append		append data onto shorter files<div><br /></div><div>This causes rsync to update a file by appending data onto the end of the  file, which presumes that the data that already exists on the receiving  side is identical with the start of the file on the sending side. If a file  needs to be transferred and its size on the receiver is the same or  longer than the size on the sender, the file is skipped. This does not interfere with the  updating of a file's non-content attributes (e.g. permissions,  ownership, etc.) when the file does not need to be transferred, nor does it affect the updating of any  non-regular files. Implies <code>--inplace</code>, but does not conflict with <code>--sparse</code> (since it is always extending a file's length).</div>			marked rsync
rsync --append-verify	rsync			--append-verify		<code><strike>--append</strike></code> w/old data in file checksum<div><br /></div><div>This works just like the <code><strike>--append</strike></code> option, but the existing data on the receiving side is included in the full-file checksum verification step, which will cause a file to be resent if the final verification step fails (<code>rsync</code> uses a normal, non-<strike>appending</strike> <code>--inplace</code> transfer for the resend). Note: prior to <code>rsync</code> <b>3.0.0</b>, the <code><strike>--append</strike></code> option worked like <code><strike>--append-verify</strike></code>, so if you are interacting with an older <code>rsync</code> (or the transfer is using a protocol prior to<b> 30</b>), specifying either append option will initiate an <code><strike>--append-verify</strike></code> transfer. </div>			marked rsync
rsync --dirs	rsync		-d	--dirs		transfer directories without recursing	<p>Tell the sending side to include any directories that are encountered. Unlike <code>--recursive</code>, a directory's contents are not copied unless the directory name specified is <code>.</code>&nbsp;or ends with a trailing slash (e.g. <code>.</code>, <code>dir/.</code>, <code>dir/</code>, etc.). Without this option or the <code>--recursive</code> option, rsync will skip all directories it encounters (and output a message to that effect for each one). If you specify both <code>--dirs</code> and <code>--recursive</code>, <code>--recursive</code> takes precedence. The <code>--dirs</code> option is implied by the <code>--files-from</code> option or the <code>--list-only</code> option (including an implied <code>--list-only</code> usage) if <code>--recursive</code> wasn't specified (so that directories are seen in the listing). Specify <code>--no-dirs</code> (or <code>--no-d</code>) if you want to turn this off. There is also a backward-compatibility helper option, <code>--old-dirs</code> (or <code>--old-d</code>) that tells <code>rsync</code> to use a hack of <code>-r</code> <code>--exclude='/*/*'</code>&nbsp;to get an older <code>rsync</code> to list a single directory without recursing.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYyMTczMDIsICJpZCI6ICIxNDk0Mzk1MDAwMjQzLTAwNyIsICJtZCI6ICJUZWxsIHRoZSBzZW5kaW5nIHNpZGUgdG8gaW5jbHVkZSBhbnkgZGlyZWN0b3JpZXMgdGhhdCBhcmUgZW5jb3VudGVyZWQuIFVubGlrZSBgLS1yZWN1cnNpdmVgLCBhIGRpcmVjdG9yeSZhcG9zO3MgY29udGVudHMgYXJlIG5vdCBjb3BpZWQgdW5sZXNzIHRoZSBkaXJlY3RvcnkgbmFtZSBzcGVjaWZpZWQgaXMgYGxxLnJxYCBvciBlbmRzIHdpdGggYSB0cmFpbGluZyBzbGFzaCAoZS5nLiBgbHEucnFgLCBgbHFkaXIvLnJxYCwgYGxxZGlyL3JxYCwgZXRjLikuIFdpdGhvdXQgdGhpcyBvcHRpb24gb3IgdGhlIGAtLXJlY3Vyc2l2ZWAgb3B0aW9uLCByc3luYyB3aWxsIHNraXAgYWxsIGRpcmVjdG9yaWVzIGl0IGVuY291bnRlcnMgKGFuZCBvdXRwdXQgYSBtZXNzYWdlIHRvIHRoYXQgZWZmZWN0IGZvciBlYWNoIG9uZSkuIElmIHlvdSBzcGVjaWZ5IGJvdGggYC0tZGlyc2AgYW5kIGAtLXJlY3Vyc2l2ZWAsIGAtLXJlY3Vyc2l2ZWAgdGFrZXMgcHJlY2VkZW5jZS4gVGhlIGAtLWRpcnNgIG9wdGlvbiBpcyBpbXBsaWVkIGJ5IHRoZSBgLS1maWxlcy1mcm9tYCBvcHRpb24gb3IgdGhlIGAtLWxpc3Qtb25seWAgb3B0aW9uIChpbmNsdWRpbmcgYW4gaW1wbGllZCBgLS1saXN0LW9ubHlgIHVzYWdlKSBpZiBgLS1yZWN1cnNpdmVgIHdhc24mYXBvczt0IHNwZWNpZmllZCAoc28gdGhhdCBkaXJlY3RvcmllcyBhcmUgc2VlbiBpbiB0aGUgbGlzdGluZykuIFNwZWNpZnkgYC0tbm8tZGlyc2AgKG9yIGAtLW5vLWRgKSBpZiB5b3Ugd2FudCB0byB0dXJuIHRoaXMgb2ZmLiBUaGVyZSBpcyBhbHNvIGEgYmFja3dhcmQtY29tcGF0aWJpbGl0eSBoZWxwZXIgb3B0aW9uLCBgLS1vbGQtZGlyc2AgKG9yIGAtLW9sZC1kYCkgdGhhdCB0ZWxscyBgcnN5bmNgIHRvIHVzZSBhIGhhY2sgb2YgYGxxLXJgIGAtLWV4Y2x1ZGU9JmFwb3M7LyovKiZhcG9zO3JxYCB0byBnZXQgYW4gb2xkZXIgYHJzeW5jYCB0byBsaXN0IGEgc2luZ2xlIGRpcmVjdG9yeSB3aXRob3V0IHJlY3Vyc2luZy5cbiJ9---->		rsync
rsync --links	rsync		-l	--links		copy symlinks as symlinks			rsync
rsync --copy-links	rsync		-L	--copy-links		transform symlink into referent file/dir			rsync
rsync --copy-unsafe-links	rsync			--copy-unsafe-links		"<i>tl;dr:</i> only ""unsafe"" symlinks are transformed<div><br /></div><div>This tells rsync to copy the referent of symbolic links that point  outside the copied tree. Absolute symlinks are also treated like  ordinary files, and so are any symlinks in the source path itself when <code>--relative</code> is used. This option has no additional effect if <code><strike>--copy-links</strike></code> was also specified.&nbsp;</div>"			rsync
rsync --safe-links	rsync			--safe-links		ignore symlinks that point outside the tree			rsync
rsync --munge-links	rsync			--munge-links		munge symlinks to make them safer			marked rsync
rsync --copy-dirlinks	rsync		-k	--copy-dirlinks		transform symlink to dir into referent dir			rsync
rsync --keep-dirlinks	rsync		-K	--keep-dirlinks		treat symlinked dir on receiver as dir			rsync
rsync --hard-links	rsync		-H	--hard-links		preserve hard links			rsync
rsync --perms	rsync		-p	--perms		preserve permissions			rsync
rsync --fileflags	rsync			--fileflags		preserve file-flags (aka chflags)			rsync
rsync --executability	rsync		-E	--executability		preserve executability			rsync
rsync --chmod	rsync			--chmod=CHMOD		affect file and/or directory permissions			rsync
rsync --acls	rsync		-A	--acls		preserve ACLs (implies <code>-p</code>)			rsync
rsync --xattrs	rsync		-X	--xattrs		preserve extended attributes			rsync
rsync --hfs-compression	rsync			--hfs-compression		preserve <u>HFS</u> compression if supported			rsync
rsync --protect-decmpfs	rsync			--protect-decmpfs		preserve <u>HFS</u> compression as xattrs			rsync
rsync --owner	rsync		-o	--owner		preserve owner (super-user only)			rsync
rsync --group	rsync		-g	--group		preserve group			rsync
rsync --devices	rsync			--devices		preserve device files (super-user only)			rsync
rsync --specials	rsync			--specials		preserve special files			rsync
rsync -D	rsync		-D			same as <code>--devices</code> <code>--specials</code>			rsync
rsync --times	rsync		-t	--times		preserve modification times			rsync
rsync --crtimes	rsync		-N	--crtimes		preserve create times (newness)			rsync
rsync --omit-dir-times	rsync		-O	--omit-dir-times		omit directories from <code>--times</code>			rsync
rsync --omit-link-times	rsync		-J	--omit-link-times		omit symlinks from <code>--times</code>			rsync
rsync --super	rsync			--super		receiver attempts super-user activities			marked rsync
rsync --fake-super	rsync			--fake-super		store/recover privileged attrs using xattrs			rsync
rsync --sparse	rsync		-S	--sparse		handle sparse files efficiently			rsync
rsync --preallocate	rsync			--preallocate		allocate dest files before writing			rsync
rsync --dry-run	rsync		-n	--dry-run		perform a trial run with no changes made			rsync
rsync --whole-file	rsync		-W	--whole-file		copy files whole (w/o delta-xfer algorithm)			rsync
rsync --one-file-system	rsync		-x	--one-file-system		don't cross filesystem boundaries			rsync
rsync --block-size	rsync		-B	--block-size=SIZE		force a fixed checksum block-size			rsync
rsync --rsh	rsync		-e	--rsh=COMMAND		specify the remote shell to use			rsync
rsync --rsync-path	rsync			--rsync-path=PROGRAM		specify the rsync to run on remote machine			rsync
rsync --existing	rsync			--existing		skip creating new files on receiver			rsync
rsync --ignore-existing	rsync			--ignore-existing		skip updating files that exist on receiver			rsync
rsync --remove-source-files	rsync			--remove-source-files		sender removes synchronized files (non-dir)			rsync
rsync --delete	rsync			--delete		delete extraneous files from dest dirs			rsync
rsync --delete-before	rsync			--delete-before		receiver deletes before xfer, not during			rsync
rsync --delete-during	rsync	alias		--delete-during	rsync --del	receiver deletes during the transfer			rsync
rsync --delete-delay	rsync			--delete-delay		find deletions during, delete after			rsync
rsync --delete-after	rsync			--delete-after		receiver deletes after transfer, not during			rsync
rsync --delete-excluded	rsync			--delete-excluded		also delete excluded files from dest dirs			rsync
rsync --ignore-missing-args	rsync			--ignore-missing-args		ignore missing source args without error			rsync
rsync --delete-missing-args	rsync			--delete-missing-args		delete missing source args from destination			rsync
rsync --ignore-errors	rsync			--ignore-errors		delete even if there are I/O errors			rsync
rsync --force-delete	rsync			--force-delete		force deletion of dirs even if not empty			rsync
rsync --force-change	rsync			--force-change		affect user/system immutable files/dirs<div><br /></div><div>This option causes rsync to disable both user-immutable and system-immutable  flags  on        files  and  directories        that are being               updated or deleted on the        receiving side.         This option overrides               <code><strike>--force-uchange</strike></code> and <code><strike>--force-schange</strike></code>.</div>			rsync
rsync --force-uchange	rsync			--force-uchange		affect user-immutable files/dirs<div><div><div><br /></div><div>This option causes rsync to disable user-immutable flags on        files and directories        that are being updated or deleted on the        receiving side. It does not try to affect system flags. This option overrides&nbsp;<code><strike>--force-schange</strike></code>&nbsp;and&nbsp;<code><strike>--force-change</strike></code>.</div></div></div>			rsync
rsync --force-schange	rsync			--force-schange		affect system-immutable files/dirs<div><div><br /></div><div>This option causes rsync to disable system-immutable flags on        files and directories        that are being updated or deleted on the        receiving side. It does not try to affect user flags. This option overrides&nbsp;<code><strike>--force-uchange</strike></code>&nbsp;and&nbsp;<code><strike>--force-change</strike></code>.</div></div>			rsync
rsync --max-delete	rsync			--max-delete=NUM		don't delete more than <u>NUM</u> files			rsync
rsync --max-size	rsync			--max-size=SIZE		don't transfer any file larger than <u>SIZE</u>			rsync
rsync --min-size	rsync			--min-size=SIZE		don't transfer any file smaller than <u>SIZE</u>			rsync
rsync --partial	rsync			--partial		keep partially transferred files			rsync
rsync --partial-dir	rsync			--partial-dir=DIR		put a partially transferred file into <u>DIR</u>			rsync
rsync --delay-updates	rsync			--delay-updates		put all updated files into place at end			rsync
rsync --prune-empty-dirs	rsync		-m	--prune-empty-dirs		prune empty directory chains from file-list			rsync
rsync --numeric-ids	rsync			--numeric-ids		don't map uid/gid values by user/group name			rsync
rsync --usermap	rsync			--usermap=STRING		custom username mapping			rsync
rsync --groupmap	rsync			--groupmap=STRING		custom groupname mapping			rsync
rsync --chown	rsync			--chown=USER:GROUP		simple username/groupname mapping			rsync
rsync --timeout	rsync			--timeout=SECONDS		set I/O timeout in seconds			rsync
rsync --contimeout	rsync			--contimeout=SECONDS		set daemon connection timeout in seconds			rsync
rsync --ignore-times	rsync		-I	--ignore-times		Normally rsync will skip any files that are already the same size and have the same modification timestamp. This option turns off this “quick check” behavior, causing all files to be updated.			rsync
rsync --temp-dir	rsync		-T	--temp-dir=DIR		create temporary files in directory <u>DIR</u>			rsync
rsync --fuzzy	rsync		-y	--fuzzy		    This option tells <code>rsync</code> that it should look for a basis file for any destination file that is missing. The current algorithm looks in the same directory as the destination file for either a file that has an identical size and modified-time, or a similarly-named file. If found, <code>rsync</code> uses the fuzzy basis file to try to speed up the transfer.  Note that the use of the <code>--delete</code> option might get rid of any potential     fuzzy-match files, so either use <code>--delete-after</code> or specify some filename exclusions if you need to prevent this			marked rsync
rsync --compare-dest	rsync			--compare-dest=DIR		also compare received files relative to <u>DIR</u>			marked rsync
rsync --copy-dest	rsync			--copy-dest=<i>DIR</i>		    This option behaves like <code>--compare-dest</code>, but <code>rsync</code> will also copy unchanged files found in&nbsp;<i><code>DIR</code></i>&nbsp;to the destination directory using a local copy. This is useful for doing transfers to a new destination while leaving existing files intact, and then doing a flash-cutover when all files have been successfully transferred.<div><br /></div><div>Multiple <code>--copy-dest</code> directories may be provided, which will cause     <code>rsync</code> to search the list in the order specified for an unchanged file. If a match is not found, a basis file from one of the&nbsp;<i><code>DIR</code></i>s will be selected to try to speed up the transfer.  If&nbsp;<i><code>DIR</code></i>&nbsp;is a relative path, it is relative to the destination directory. </div>			rsync
rsync --link-dest	rsync			--link-dest=DIR		hardlink to files in <u>DIR</u> when unchanged			rsync
rsync --compress	rsync		-z	--compress		compress file data during the transfer			rsync
rsync --compress-level	rsync			--compress-level=NUM		explicitly set compression level			rsync
rsync --skip-compress	rsync			--skip-compress=LIST		skip compressing files with suffix in <u>LIST</u>			rsync
rsync --cvs-exclude	rsync		-C	--cvs-exclude		auto-ignore files in the same way <u>CVS</u> does			rsync
rsync --filter	rsync		-f	--filter=RULE		add a file-filtering <u>RULE</u>			rsync
rsync -F	rsync		-F			<p>The first time it is used is a shorthand for this rule: <code>--filter='dir-merge /.rsync-filter'</code><br /> This tells rsync to look for per-directory <code>.rsync-filter</code> files that have been sprinkled through the hierarchy and use their rules to filter the files in the transfer.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTcxNDM0NTUsICJpZCI6ICIxNDk0Mzk1MDAwMzIxLTAwNiIsICJtZCI6ICJUaGUgZmlyc3QgdGltZSBpdCBpcyB1c2VkIGlzIGEgc2hvcnRoYW5kIGZvciB0aGlzIHJ1bGU6IGAtLWZpbHRlcj0mYXBvcztkaXItbWVyZ2UgLy5yc3luYy1maWx0ZXImYXBvcztgXG5UaGlzIHRlbGxzIHJzeW5jIHRvIGxvb2sgZm9yIHBlci1kaXJlY3RvcnkgYC5yc3luYy1maWx0ZXJgIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIHNwcmlua2xlZCB0aHJvdWdoIHRoZSBoaWVyYXJjaHkgYW5kIHVzZSB0aGVpciBydWxlcyB0byBmaWx0ZXIgdGhlIGZpbGVzIGluIHRoZSB0cmFuc2Zlci5cbiJ9---->			rsync
rsync --exclude	rsync			--exclude=PATTERN		exclude files matching <u>PATTERN</u>			rsync
rsync --exclude-from	rsync			--exclude-from=FILE		read exclude patterns from <u>FILE</u>			rsync
rsync --include	rsync			--include=PATTERN		don't exclude files matching <u>PATTERN</u>			rsync
rsync --include-from	rsync			--include-from=FILE		read include patterns from <u>FILE</u>			rsync
rsync --files-from	rsync			--files-from=FILE		read list of source-file names from <u>FILE</u>			rsync
rsync --from0	rsync		-0	--from0		all *from/filter files are delimited by <code>\0</code>s<div><br /></div><div>This tells rsync that the rules/filenames it reads from a file are  terminated by a null (<code>\0</code>) character, not a NL, CR, or CR+LF. This  affects <code>--exclude-from</code>, <code>--include-from</code>, <code>--files-from</code>, and any merged files specified in a <code>--filter</code> rule. It does not affect <code>--cvs-exclude</code> (since all names read from a <code>.cvsignore</code> file are split on whitespace).&nbsp;</div>			rsync
rsync --protect-args	rsync		-s	--protect-args		no space-splitting; wildcard chars only			marked rsync
rsync --address	rsync			--address=ADDRESS		By default <code>rsync</code> will bind to the wildcard address when connecting to an <code>rsync</code> daemon. This&nbsp;option allows you to specify a specific IP address (or hostname) to bind to. See also this option in the <b><code>--daemon</code></b> mode section.&nbsp;			rsync
rsync --port	rsync			--port=PORT		specify double-colon alternate port number			rsync
rsync --sockopts	rsync			--sockopts=OPTIONS		specify custom <u>TCP</u> options			rsync
rsync --blocking-io	rsync			--blocking-io		use blocking I/O for the remote shell			rsync
rsync --outbuf	rsync			--outbuf=N|L|B		set out buffering to None, Line, or Block			rsync
rsync --stats	rsync			--stats		give some file-transfer stats			rsync
rsync --8-bit-output	rsync		-8	--8-bit-output		leave high-bit chars unescaped in output			rsync
rsync --human-readable	rsync		-h	--human-readable		output numbers in a human-readable format			rsync
rsync --progress	rsync			--progress		show progress during transfer			rsync
rsync -P	rsync		-P			same as <code>--partial</code> <code>--progress</code>			rsync
rsync --itemize-changes	rsync		-i	--itemize-changes		output a change-summary for all updates			rsync
rsync --remote-option	rsync		-M	--remote-option=OPTION		send <u>OPTION</u> to the remote side only			rsync
rsync --out-format	rsync			--out-format=FORMAT		output updates using the specified <u>FORMAT</u>			rsync
rsync --log-	rsync			--log-file=FILE		log what we're doing to the specified <u>FILE</u>			rsync
rsync --log-file-format	rsync			--log-file-format=FMT		log updates using the specified <u>FMT</u>			rsync
rsync --password-file	rsync			--password-file=FILE		read daemon-access password from <u>FILE</u>			rsync
rsync --list-only	rsync			--list-only		list the files instead of copying them			rsync
rsync --bwlimit	rsync			--bwlimit=<i>KBPS</i>		limit socket I/O bandwidth<div><br /></div><div>This option allows you to specify a maximum transfer rate in kilobytes per second. This option is most effective when using <code>rsync</code> with large files (several megabytes and up). Due to the nature of <code>rsync</code> transfers, blocks of data are sent, then if <code>rsync</code> determines the transfer was too fast, it will wait before sending the next data block. The result is an average transfer rate equaling the specified limit. A value of zero specifies no limit.</div>			rsync
rsync --write-batch	rsync			--write-batch=FILE		write a batched update to <u>FILE</u>			rsync
rsync --only-write-batch	rsync			--only-write-batch=FILE		like <code>--write-batch</code> but w/o updating dest			rsync
rsync --read-batch	rsync			--read-batch=FILE		read a batched update from <u>FILE</u>			rsync
rsync --protocol	rsync			--protocol=NUM		force an older protocol version to be used			rsync
rsync --iconv	rsync			--iconv=CONVERT_SPEC		request charset conversion of filenames			rsync
rsync --checksum-seed	rsync			--checksum-seed=NUM		set block/file checksum seed (advanced)			rsync
rsync --ipv4	rsync		-4	--ipv4		prefer IPv4			rsync
rsync --ipv6	rsync		-6	--ipv6		prefer IPv6			rsync
rsync -F -F	rsync		-F -F			<p>same as <code>--filter='dir-merge /.rsync-filter' --filter='- .rsync-filter'</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY3ODU3NDAsICJpZCI6ICIxNDk0Mzk1MDAwMzU1LTAwNiIsICJtZCI6ICJzYW1lIGFzIGAtLWZpbHRlcj0mYXBvcztkaXItbWVyZ2UgLy5yc3luYy1maWx0ZXImYXBvczsgLS1maWx0ZXI9JmFwb3M7LSAucnN5bmMtZmlsdGVyJmFwb3M7YFxuIn0=---->	<p>The <code>-F</code> option is a shorthand for adding two <code>--filter</code> rules to your command. The first time it is used is a shorthand for this rule: <code>CW --filter='dir-merge /.rsync-filter'</code><br /> This tells rsync to look for per-directory <code>.rsync-filter</code> files that have been sprinkled through the hierarchy and use their rules to filter the files in the transfer.</p> <p>If <code>-F</code> is repeated, it is a shorthand for this rule: <code>CW --filter='exclude .rsync-filter'</code><br /> This filters out the <code>.rsync-filter</code> files themselves from the transfer.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY3ODU3MzgsICJpZCI6ICIxNDk0Mzk1MDAwMzU1LTAwNyIsICJtZCI6ICJUaGUgYC1GYCBvcHRpb24gaXMgYSBzaG9ydGhhbmQgZm9yIGFkZGluZyB0d28gYC0tZmlsdGVyYCBydWxlcyB0byB5b3VyIGNvbW1hbmQuIFRoZSBmaXJzdCB0aW1lIGl0IGlzIHVzZWQgaXMgYSBzaG9ydGhhbmQgZm9yIHRoaXMgcnVsZTogYENXIC0tZmlsdGVyPSZhcG9zO2Rpci1tZXJnZSAvLnJzeW5jLWZpbHRlciZhcG9zO2BcblRoaXMgdGVsbHMgcnN5bmMgdG8gbG9vayBmb3IgcGVyLWRpcmVjdG9yeSBgLnJzeW5jLWZpbHRlcmAgZmlsZXMgdGhhdCBoYXZlIGJlZW4gc3ByaW5rbGVkIHRocm91Z2ggdGhlIGhpZXJhcmNoeSBhbmQgdXNlIHRoZWlyIHJ1bGVzIHRvIGZpbHRlciB0aGUgZmlsZXMgaW4gdGhlIHRyYW5zZmVyLlxuICBcbklmIGAtRmAgaXMgcmVwZWF0ZWQsIGl0IGlzIGEgc2hvcnRoYW5kIGZvciB0aGlzIHJ1bGU6IGBDVyAtLWZpbHRlcj0mYXBvcztleGNsdWRlIC5yc3luYy1maWx0ZXImYXBvcztgXG5UaGlzIGZpbHRlcnMgb3V0IHRoZSBgLnJzeW5jLWZpbHRlcmAgZmlsZXMgdGhlbXNlbHZlcyBmcm9tIHRoZSB0cmFuc2Zlci5cbiJ9---->		rsync
tar @<u>archive</u>	tar		@<u>archive</u>			<b><code>c</code>/<code>r</code> mode:</b> <code><u>archive</u></code> is opened and the entries in it will be appended to the current archive	As a simple example,&nbsp;<code>tar -c -f&nbsp;<u>-</u>&nbsp;<u>newfile</u>&nbsp;@<u>original.tar</u></code>&nbsp;writes a new archive to standard output containing a file&nbsp;<u>newfile</u>&nbsp;and all of the entries from&nbsp;<u>original.tar</u>. In contrast,&nbsp;<code>tar -c -f&nbsp;<u>-</u>&nbsp;<u>newfile</u>&nbsp;<u>original.tar</u></code>&nbsp;creates a new archive with only two entries. Similarly,&nbsp;<code>tar -czf&nbsp;<u>-</u>&nbsp;</code><code>--format pax @-</code>&nbsp;reads an archive from standard input (whose format will be determined automatically) and converts it into a&nbsp;<code>gzip</code>-compressed&nbsp;<code>pax</code>-format archive on&nbsp;<i>stdout</i>. In this way,&nbsp;<code>tar</code>&nbsp;can be used to convert archives from one format to another.		tar
tar -b	tar		-b <u>blocksize</u>			Specify the block size, in 512-byte records, for tape drive I/O. As a rule, this argument is only needed when reading from or writing to tape drives, and usually not even then as the default block size of 20 records (10240 bytes) is very common.			tar
tar -C	tar		-C <u>directory</u>			<b><code>c</code>/<code>r</code>&nbsp;mode:</b>&nbsp;change directory before adding following files<br /><div><b><code>x</code> mode:</b>&nbsp;change directory after opening archive but before extracting entries from archive</div>			tar
tar --check-links	tar		-l	--check-links		<b><code>c</code>/<code>r</code>&nbsp;mode:</b>&nbsp;Issue a warning message unless all links to each file are archived.			tar
tar --chroot	tar			--chroot		<b>x&nbsp;mode:</b>&nbsp;<code>chroot</code>() to the current directory after processing any <code>-C</code> options and before extracting any files.			tar
tar --exclude	tar			--exclude <u>pattern</u>		Do not process files or directories that match the specified pattern. Note that exclusions take precedence over patterns or filenames specified on the command line.			tar
tar --format	tar			--format <u>format</u>		<b><code>c</code>/<code>r</code>/<code>u</code>&nbsp;mode:</b>&nbsp;Use the specified format for the created archive. Supported formats include <code>cpio</code>, <code>pax</code>, <code>shar</code>, and <code>ustar</code>. Other formats may also be supported; see <code>libarchive-formats</code>(5) for more information about currently supported formats. In <code>r</code> and <code>u</code> modes, when extending an existing archive, the format specified here must be compatible with the format of the existing archive on disk.			tar
tar -f	tar		-f <u>file</u>			Read the archive from or write the archive to the specified file. The filename can be <code>-</code> for standard input or standard output.			tar
tar -H	tar		-H			<b><code>c</code>/<code>r</code> mode:</b> Symbolic links named on the command line will be followed; the target of the link will be archived, not the link itself.			tar
tar --include	tar			--include <u>pattern</u>		Process only files or directories that match the specified pattern. Note that exclusions specified with <code><strike>--exclude</strike></code> take precedence over <strike>inclusions</strike>. If no inclusions are explicitly specified, all entries are processed by default. The <code><strike>--include</strike></code> option is especially useful when filtering archives. For example, the command <code>tar -c -f <u>new.tar</u> <strike>--include</strike>='*foo*' @<u>old.tgz</u></code> creates a new archive <u>new.tar</u> containing only the entries from <u>old.tgz</u> containing the string `foo'.			tar
tar -k	tar		-k			<b><code>x</code>&nbsp;mode:</b>&nbsp;Do not overwrite existing files. In particular, if a file appears more than once in an archive, later copies will not overwrite earlier copies.			tar
tar --keep-newer-files	tar			--keep-newer-files		<b><code>x</code>&nbsp;mode:</b>&nbsp;Do not overwrite existing files that are newer than the versions appearing in the archive being extracted.			tar
tar -L	tar	synonym	-L		tar -h	<b><code>c</code>/<code>r</code>&nbsp;mode:</b>&nbsp;All symbolic links will be followed. Normally, symbolic links are archived as such. With this option, the target of the link will be archived instead.			tar
tar -m	tar		-m			<b><code>x</code>&nbsp;mode:</b>&nbsp;Do not extract modification time. By default, the modification time is set to the time stored in the archive.			tar
tar -n	tar		-n			<b><code>c</code>/<code>r</code>/<code>u</code>&nbsp;mode:</b>&nbsp;Do not recursively archive the contents of directories.			tar
tar --newer	tar			--newer <u>date</u>		<b><code>c</code>/<code>r</code>/<code>u</code>&nbsp;mode:</b>&nbsp;Only include files and directories newer than the specified date. This compares <i>ctime</i> entries.			tar
tar --newer-mtime	tar			--newer-mtime <u>date</u>		<b><code>c</code>/<code>r</code>/<code>u</code>&nbsp;mode:</b>&nbsp;Like <code><strike>--newer</strike></code>, except it compares <i>mtime</i> entries instead of <i>ctime</i> entries.			tar
tar --newer-than	tar			--newer-than <u>file</u>		<b><code>c</code>/<code>r</code>/<code>u</code>&nbsp;mode:</b>&nbsp;Only include files and directories newer than the specified file. This compares <i>ctime</i> entries.			tar
tar --newer-mtime-than	tar			--newer-mtime-than <u>file</u>		(<code>c</code>, <code>r</code>, and <code>u</code> modes only) Like <code>--newer-than</code>, except it compares mtime entries instead of ctime entries.			tar
tar --nodump	tar			--nodump		<b><code>c</code>/<code>r</code>&nbsp;mode:</b>&nbsp;Honor the <i>nodump</i> file flag by skipping this file.			tar
tar --null	tar			--null		<p>(use with <code>-I</code>, <code>-T</code>, or <code>-X</code>) Filenames or patterns are separated by null characters, not by newlines. This is often used to read filenames output by the <code>-print0</code> option to <code>find</code>.</p> <p>The <code><strike>--null</strike></code> option causes <code>--files-from=<b>file-of-names</b></code> (<code>-T <b>file-of-names</b></code>) to read file names terminated by a NUL instead of a newline, so files whose names contain newlines can be archived using <code>--files-from</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTcwMzk3MTgsICJpZCI6ICIxNDk0Mzk1MDAwMzgwLTAwNiIsICJtZCI6ICIodXNlIHdpdGggYC1JYCwgYC1UYCwgb3IgYC1YYCkgRmlsZW5hbWVzIG9yIHBhdHRlcm5zIGFyZSBzZXBhcmF0ZWQgYnkgbnVsbCBjaGFyYWN0ZXJzLCBub3QgYnkgbmV3bGluZXMuIFRoaXMgaXMgb2Z0ZW4gdXNlZCB0byByZWFkIGZpbGVuYW1lcyBvdXRwdXQgYnkgdGhlIGAtcHJpbnQwYCBvcHRpb24gdG8gYGZpbmRgLlxuICBcblRoZSBgLS1udWxsYCBvcHRpb24gY2F1c2VzIGAtLWZpbGVzLWZyb209ZmlsZS1vZi1uYW1lc2AgKGAtVCBmaWxlLW9mLW5hbWVzYCkgdG8gcmVhZCBmaWxlIG5hbWVzIHRlcm1pbmF0ZWQgYnkgYSBOVUwgaW5zdGVhZCBvZiBhIG5ld2xpbmUsIHNvIGZpbGVzIHdob3NlIG5hbWVzIGNvbnRhaW4gbmV3bGluZXMgY2FuIGJlIGFyY2hpdmVkIHVzaW5nIGAtLWZpbGVzLWZyb21gLlxuIn0=---->			tar
tar --numeric-owner	tar			--numeric-owner		<b><code>x</code>&nbsp;mode:</b>&nbsp;Ignore symbolic user and group names when restoring archives to disk, only numeric <i>uid</i> and<i> gid</i> values will be obeyed.			tar
tar -O	tar		-O			<b><code>x</code>&nbsp;mode:</b> write files to&nbsp;<i>stdout</i>&nbsp;rather than to disk<div><b><code>t</code>&nbsp;mode:</b> write file listing to <i>stderr</i> rather than to&nbsp;<i>stdout</i></div>			tar
tar -o	tar		-o			<b><code>x</code> mode:</b> Use the user and group of the user running the program rather than those specified in the archive. Note that this has no significance unless <code>-p</code> is specified, and the program is being run by the root user. In this case, the file modes and flags from the archive will be restored, but ACLs or owner information in the archive will be discarded.			tar
tar --one-file-system	tar			--one-file-system		<b><code>c</code>/<code>r</code>/<code>u</code>&nbsp;mode:</b>&nbsp;Do not cross mount points.			tar
tar --options	tar			--options options		<div>Select optional behaviors for particular modules. The argument is a text string containing comma-separated keywords and values. These are passed to the modules that handle particular formats to control how those formats will behave. Each option has one of the following forms:</div><div><ul><li><code>key=value</code><br />The key will be set to the specified value in every module that supports it. Modules that do not support this key will ignore it.</li><li><code>key</code><br />The key will be enabled in every module that supports it. This is equivalent to <code>key=1</code>.</li><li><code>!key</code><br />The key will be disabled in every module that supports it.</li><li><code>module:key=value</code>, <code>module:key</code>, <code>module:!key</code><br />As above, but the corresponding key and value will be provided only to modules whose name matches module.</li></ul></div>	<div>The currently supported modules and keys are:</div><div><ul><li><code>iso9660:joliet</code><br />Support Joliet extensions. This is enabled by default, use&nbsp;<code>!joliet</code>&nbsp;or&nbsp;<code>iso9660:!joliet</code>&nbsp;to disable.</li><li><code>iso9660:rockridge</code><br />Support Rock Ridge extensions. This is enabled by default, use&nbsp;<code>!rockridge</code>&nbsp;or&nbsp;<code>iso9660:!rockridge</code>&nbsp;to disable.</li><li><code>gzip:compression-level</code><br />A decimal integer from 0 to 9 specifying the&nbsp;<code>gzip</code>&nbsp;compression level.</li><li><code>xz:compression-level</code><br />A decimal integer from 0 to 9 specifying the&nbsp;<code>xz</code>&nbsp;compression level.</li><li><code>mtree:keyword</code><br />The&nbsp;<code>mtree</code>&nbsp;writer module allows you to specify which mtree keywords will be included in the output. Supported keywords include:&nbsp;<code>cksum</code>,&nbsp;<code>device</code>,&nbsp;<code>flags</code>,&nbsp;<code>gid</code>,&nbsp;<code>gname</code>,&nbsp;<code>indent</code>,&nbsp;<code>link</code>,&nbsp;<code>md5</code>,&nbsp;<code>mode</code>,&nbsp;<code>nlink</code>,&nbsp;<code>rmd160</code>,&nbsp;<code>sha1</code>,&nbsp;<code>sha256</code>,&nbsp;<code>sha384</code>,&nbsp;<code>sha512</code>,&nbsp;<code>size</code>,&nbsp;<code>time</code>,&nbsp;<code>uid</code>,&nbsp;<code>uname</code>. The default is equivalent to:&nbsp;<code>device</code>,&nbsp;<code>flags</code>,&nbsp;<code>gid</code>,&nbsp;<code>gname</code>,&nbsp;<code>link</code>,&nbsp;<code>mode</code>,&nbsp;<code>nlink</code>,&nbsp;<code>size</code>,&nbsp;<code>time</code>,&nbsp;<code>type</code>,&nbsp;<code>uid</code>,&nbsp;<code>uname</code>.</li><li><code>mtree:all</code><br />Enables all of the above keywords. You can also use&nbsp;<code>mtree:!all</code>&nbsp;to disable all keywords.</li><li><code>mtree:use-set</code><br />Enable generation of&nbsp;<code>/set</code>&nbsp;lines in the output.</li><li><code>mtree:indent</code><br />Produce human-readable output by indenting options and splitting lines to fit into 80 columns.</li><li><code>zip:compression=type</code><br />Use type as compression method. Supported values are&nbsp;<code>store</code>&nbsp;(uncompressed) and&nbsp;<code>deflate</code>&nbsp;(<code>gzip</code>&nbsp;algorithm).</li></ul></div><div>If a provided option is not supported by any module, that is a fatal error.</div>		tar
tar -P	tar		-P			Preserve pathnames. By default, absolute pathnames (those that begin with a <code>/</code> character) have the leading slash removed both when creating archives and extracting from them. Also, <code>tar</code> will refuse to extract archive entries whose pathnames contain <code>..</code> or whose target directory would be altered by a symlink. This option suppresses these behaviors.			tar
tar -p	tar		-p			<b>x&nbsp;mode:</b>&nbsp;Preserve file permissions. Attempt to restore the full permissions, including owner, file modes, file flags and ACLs, if available, for each item extracted from the archive. By default, newly-created files are owned by the user running <code>tar</code>, the file mode is restored for newly-created regular files, and all other types of entries receive default permissions. If <code>tar</code> is being run by root, the default is to restore the owner unless the <code>-o</code> option is also specified.			tar
tar --fast-read	tar		-q	--fast-read		<b><code>x</code>/<code>t</code>&nbsp;mode:</b>&nbsp;Extract or list only the first archive entry that matches each pattern or filename operand. Exit as soon as each specified pattern or filename has been matched. By default, the archive is always read to the very end, since there can be multiple entries with the same name and, by convention, later entries overwrite earlier entries. This option is provided as a performance optimization.			tar
tar -S	tar		-S			<b>x&nbsp;mode:</b>&nbsp;Extract files as sparse files. For every block on disk, check first if it contains only NULL bytes and seek over it otherwise. This works similiar to the <code>conv=sparse</code> option of <code>dd</code>.			tar
tar --strip-components	tar			--strip-components <u>count</u>		<b><code>x</code>&nbsp;mode:</b>&nbsp;Remove the specified number of leading path elements. Pathnames with fewer elements will be silently skipped. Note that the pathname is edited after checking inclusion/exclusion patterns but before security checks.			tar
tar -s	tar		-s <u>pattern</u>			Modify file or archive member names according to <code><u>pattern</u></code>&nbsp;formatted&nbsp;<code>/<u>old</u>/<u>new</u>/[gps]</code> where <code><u>old</u></code> is a basic regular expression (BRE), <code><u>new</u></code> is the replacement string of the matched part, and the optional trailing letters modify how the replacement is handled. If <code><u>old</u></code> is not matched, the pattern is skipped.	<br /><div><p><b><code><u>new</u></code>&nbsp;substitutions</b><br /><code>~</code>&nbsp;= the match<br /><code>1</code>-<code>9</code>&nbsp;= the content of the corresponding captured group</p><p><b>Optional trailing specifiers:</b><br /><code>g</code>: matching should continue after the matched part and stopped on the first unmatched pattern.<br /><code>s</code>: pattern applies to the value of symbolic links.<br /><code>p</code>: print to&nbsp;<i>stderr</i>&nbsp;original and new path names after successful substitutions.</p></div>		tar
tar -T	tar	synonym	-T <u>filename</u>		tar -I	<b><code>x</code>/<code>t</code>&nbsp;mode:</b>&nbsp;<code>tar</code> will read the list of names to be extracted from filename<br /><div><b><code>c</code>&nbsp;mode:&nbsp;</b><code>tar</code> will read names to be archived from filename.</div><div><br /></div><div>The special name <code>-C</code> on a line by itself will cause the current directory to be changed to the directory specified on the following line. Names are terminated by newlines unless <code>--null</code> is specified. Note that <code>--null</code> also disables the special handling of lines containing <code>-C.</code></div>			tar
tar -U	tar		-U			<b>x mode:</b>&nbsp;Unlink files before creating them. Without this option, <code>tar</code> overwrites existing files, which preserves existing hardlinks. With this option, existing hardlinks will be broken, as will any symlink that would affect the location of an extracted file.			tar
tar --use-compress-program	tar			--use-compress-program <u>program</u>		Pipe the input (<b><code>x</code>/<code>t</code> mode</b>) or the output (<b><code>c</code> mode</b>) through <i><code><u>program</u></code></i> instead of using the builtin compression support.			tar
tar -v	tar		-v			Produce verbose output.<div><br /></div><div><b><code>c</code>/<code>x</code>&nbsp;mode:</b>&nbsp;<code>tar</code> will list each file name as it is read from or written to the archive.</div><div><b>t mode:</b>&nbsp;<code>tar</code> will produce output similar to that of <code>ls</code>. Additional <code><strike>-v</strike></code> options will provide additional detail.</div>			tar
tar --version	tar			--version		Print version of <code>tar</code> and <code>libarchive</code>, and exit.			tar
tar -w	tar		-w			Ask for confirmation for every action.			tar
tar -X	tar		-X <u>filename</u>			Read a list of exclusion patterns from the specified file. See <code>--exclude</code> for more information about the handling of exclusions.			tar
tar -y	tar	synonym	-y		tar -j	"<b></b><b style=""font-weight: bold; ""><code>x</code>/<code>t</code>&nbsp;mode</b>: Ignored<div><br /></div><b><code>c</code> mode:</b>&nbsp;Compress the resulting archive with <code>bzip2</code>.&nbsp;Note some&nbsp;<code>tar</code>&nbsp;implementations do not recognize&nbsp;<code>bzip2</code>&nbsp;compression automatically when reading archives."			tar
tar -z	tar		-z			"<b style=""font-weight: bold; ""><code>x</code>/<code>t</code>&nbsp;mode</b>: Ignored<div><br /><div><b>c mode</b>: Compress the resulting archive with <code>gzip</code>.&nbsp;Note some&nbsp;<code>tar</code>&nbsp;implementations do not recognize&nbsp;<code>gzip</code>&nbsp;compression automatically when reading archives.</div></div>"			tar
tar -Z	tar		-Z			"<b><code><div></div></code></b><b><code></code></b><b style=""font-weight: bold; ""><code>x</code>/<code>t</code>&nbsp;mode</b>: Ignored<div><b><code><br /></code></b></div><b><code>c</code> mode:</b> Compress the resulting archive with <code>compress</code>.&nbsp;Note some&nbsp;<code>tar</code>&nbsp;implementations do not recognize&nbsp;<code>compress</code>&nbsp;compression automatically when reading archives."			tar
find -H	find		-H			<div><b>command line symlinks as references, other symlinks as files</b></div><div><br /></div>Cause the file information and file type (see <code>stat</code>(2)) returned for each symbolic link specified on the command line to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.  File information of all symbolic links not on the command line is that of the link itself.			find
find -L	find	deprecated equivalent primary	-L		find&nbsp;-follow	<div><b>all symlinks as references</b></div><div><br /></div><div>Cause the file information and file type (see <code>stat</code>(2)) returned for each symbolic link to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.</div>			find
find -P	find		-P			<div><b>all symlinks as files</b></div><div><br /></div>Cause the file information and file type (see <code>stat</code>(2)) returned for each symbolic link to be those of the link itself.  This is the default.			find
find -X	find		-X			"<div>Permit find to be safely used in conjunction with <code>xargs</code>.  If a file name contains any of the delimiting characters used by <code>xargs</code>, a diagnostic message is displayed on standard error, and the file is skipped.  The delimiting characters include single <code>'</code> and double <code>""</code> quotes, backslash <code>\</code>, space, tab and newline characters.</div><div>However, you may wish to consider the <code>-print0</code> primary in conjunction with <code>xargs -0</code> as an effective alternative.</div>"			find
find -d	find		-d			<div>Cause find to perform a depth-first traversal, i.e., directories are visited in post-order and all entries in a directory will be acted on before the directory itself.  By default, find visits directories in pre-order, i.e., before their contents.  Note, the default is not a breadth-first traversal.</div><div>This option is equivalent to the <code>-depth</code> primary of IEEE Std 1003.1-2001 (<code>POSIX.1</code>).  This&nbsp;option can be useful when <code>find</code> is used with <code>cpio</code>&nbsp;to process files that are contained in directories with unusual permissions.  It ensures that you have write permission while you are placing files in a directory, then sets the directory's permissions as the last thing.</div>			find
find -f	find		-f			Specify a file hierarchy for find to traverse.  File hierarchies may also be specified as the operands immediately following the options.			find
find -x	find		-x			<div>Prevent find from descending into directories that have a device number different than that of the file from which the descent began.</div><div>This option is equivalent to the deprecated <code>-xdev</code> primary.</div>			find
diff --ignore-case	diff		-i	--ignore-case		Ignore case differences in file contents.			diff
diff --ignore-file-name-case	diff			--ignore-file-name-case		Ignore case when comparing file names.			diff
diff --no-ignore-file-name-case	diff			--no-ignore-file-name-case		Consider case when comparing file names.			diff
diff --ignore-tab-expansion	diff		-E	--ignore-tab-expansion		Ignore changes due to tab expansion.			diff
diff --ignore-space-change	diff		-b	--ignore-space-change		Ignore changes in the amount of white space.			diff
diff --ignore-all-space	diff		-w	--ignore-all-space		Ignore all white space.			diff
diff --ignore-blank-lines	diff		-B	--ignore-blank-lines		Ignore changes whose lines are all blank.			diff
diff --ignore-matching-lines	diff		-I <u>RE</u>	--ignore-matching-lines=<u>RE</u>		Ignore changes whose lines all match <u>RE</u>.			diff
diff --strip-trailing-cr	diff			--strip-trailing-cr		Strip trailing carriage return on input.			diff
diff --text	diff		-a	--text		Treat all files as text.			diff
diff --context	diff		-c&nbsp;<u>NUM</u>	--context[=<u>NUM</u>]	-C <u>NUM</u>	Output <u>NUM</u> (default 3) lines of copied context.			diff
diff --unified	diff		-u&nbsp;<u>NUM</u>	--unified[=<u>NUM</u>]	-U <u>NUM</u>	Output <u>NUM</u> (default 3) lines of unified context.			diff
diff --label	diff			--label <u>LABEL</u>		Use <u>LABEL</u> instead of file name.			diff
diff --show-c-function	diff		-p	--show-c-function		Show which C function each change is in.			diff
diff --show-function-line	diff		-F <u>RE</u>	--show-function-line=<u>RE</u>		Show the most recent line matching <u>RE</u>.			diff
diff --brief	diff		-q	--brief		Output only whether files differ.			diff
diff --ed	diff		-e	--ed		Output an <code>ed</code> script.			diff
diff --normal	diff			--normal		Output a normal diff.			diff
diff --rcs	diff		-n	--rcs		Output an RCS format diff.			diff marked
diff --side-by-side	diff		-y	--side-by-side		Output in two columns.			diff
diff --width	diff		-W <u>NUM</u>	--width=<u>NUM</u>		Output at most <u>NUM</u> (default 130) print columns.			diff
diff --left-column	diff			--left-column		Output only the left column of common lines.			diff
diff --suppress-common-lines	diff			--suppress-common-lines		Do not output common lines.			diff
diff --ifdef	diff		-D <u>NAME</u>	--ifdef=<u>NAME</u>		Output merged file to show <code>#ifdef <u>NAME</u></code> diffs.			diff
diff --<u>GTYPE</u>-group-format	diff			--<u>GTYPE</u>-group-format=<u>GFMT</u>		<div>Similar, but format <u>GTYPE</u> input groups with <u>GFMT</u>.</div><div><u>LTYPE</u> is <code>old</code>, <code>new</code>, or <code>unchanged</code>. <u>GTYPE</u> is <u>LTYPE</u> or <code>changed</code>.</div><div><u>GFMT</u> may contain:</div><ul><li><code>%<</code>: lines from <u>FILE1</u></li><li><code>%></code>: lines from <u>FILE2</u></li><li><code>%=</code>: lines common to <u>FILE1</u> and <u>FILE2</u></li><li><code>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}<u>LETTER</u></code>: <code>printf</code>-style spec for <u>LETTER</u></li></ul><div>LETTERs are as follows for new group, lower case for old group:</div><ul><li><code>F</code>: first line number</li><li><code>L</code>: last line number</li><li><code>N</code>: number of lines = <code>L-F+1</code></li><li><code>E</code>: <code>F-1</code></li><li><code>M</code>: <code>L+1</code></li></ul><div>LFMT may contain:</div><ul><li><code>%L</code>: contents of line</li><li><code>%l</code>: contents of line, excluding any trailing newline</li><li><code>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}n</code>: <code>printf</code>-style spec for input line number</li></ul><div>Either <u>GFMT</u> or <u>LFMT</u> may contain:</div><ul><li><code>%%</code>: %</li><li><code>%c'C'</code>: the single character C</li><li><code>%c'\OOO'</code>: the character with octal code OOO</li></ul>			diff marked
diff --line-format	diff			--line-format=<u>LFMT</u>		<div>Similar, but format all input lines with <u>LFMT</u>.</div><div><u>LTYPE</u> is <code>old</code>, <code>new</code>, or <code>unchanged</code>. <u>GTYPE</u> is <u>LTYPE</u> or <code>changed</code>.</div><div><u>GFMT</u> may contain:</div><ul><li><code>%<</code>: lines from <u>FILE1</u></li><li><code>%></code>: lines from <u>FILE2</u></li><li><code>%=</code>: lines common to <u>FILE1</u> and <u>FILE2</u></li><li><code>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}<u>LETTER</u></code>: <code>printf</code>-style spec for <u>LETTER</u></li></ul><div>LETTERs are as follows for new group, lower case for old group:</div><ul><li><code>F</code>: first line number</li><li><code>L</code>: last line number</li><li><code>N</code>: number of lines = <code>L-F+1</code></li><li><code>E</code>: <code>F-1</code></li><li><code>M</code>: <code>L+1</code></li></ul><div>LFMT may contain:</div><ul><li><code>%L</code>: contents of line</li><li><code>%l</code>: contents of line, excluding any trailing newline</li><li><code>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}n</code>: <code>printf</code>-style spec for input line number</li></ul><div>Either <u>GFMT</u> or <u>LFMT</u> may contain:</div><ul><li><code>%%</code>: %</li><li><code>%c'C'</code>: the single character C</li><li><code>%c'\OOO'</code>: the character with octal code OOO</li></ul>			diff marked
diff --<u>LTYPE</u>-line-format	diff			--<u>LTYPE</u>-line-format=<u>LFMT</u>		<div>Similar, but format <u>LTYPE</u> input lines with <u>LFMT</u>.</div><div><u>LTYPE</u> is <code>old</code>, <code>new</code>, or <code>unchanged</code>. <u>GTYPE</u> is <u>LTYPE</u> or <code>changed</code>.</div><div><u>GFMT</u> may contain:</div><ul><li><code>%<</code>: lines from <u>FILE1</u></li><li><code>%></code>: lines from <u>FILE2</u></li><li><code>%=</code>: lines common to <u>FILE1</u> and <u>FILE2</u></li><li><code>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}<u>LETTER</u></code>: <code>printf</code>-style spec for <u>LETTER</u></li></ul><div>LETTERs are as follows for new group, lower case for old group:</div><ul><li><code>F</code>: first line number</li><li><code>L</code>: last line number</li><li><code>N</code>: number of lines = <code>L-F+1</code></li><li><code>E</code>: <code>F-1</code></li><li><code>M</code>: <code>L+1</code></li></ul><div>LFMT may contain:</div><ul><li><code>%L</code>: contents of line</li><li><code>%l</code>: contents of line, excluding any trailing newline</li><li><code>%[-][<u>WIDTH</u>][.[<u>PREC</u>]]{doxX}n</code>: <code>printf</code>-style spec for input line number</li></ul><div>Either <u>GFMT</u> or <u>LFMT</u> may contain:</div><ul><li><code>%%</code>: %</li><li><code>%c'C'</code>: the single character C</li><li><code>%c'\OOO'</code>: the character with octal code OOO</li></ul>			diff marked
diff --paginate	diff		-l	--paginate		Pass the output through <code>pr</code> to paginate it.			diff
diff --expand-tabs	diff		-t	--expand-tabs		Expand tabs to spaces in output.			diff
diff --initial-tab	diff		-T	--initial-tab		Make tabs line up by prepending a tab.			diff
diff --recursive	diff		-r	--recursive		Recursively compare any subdirectories found.			diff
diff --new-file	diff		-N	--new-file		Treat absent files as empty.			diff
diff --unidirectional-new-file	diff			--unidirectional-new-file		Treat absent first files as empty.			diff
diff --report-identical-files	diff		-s	--report-identical-files		Report when two files are the same.			diff
diff --exclude	diff		-x <u>PAT</u>	--exclude=<u>PAT</u>		Exclude files that match <u>PAT</u>.			diff
diff --exclude-from	diff		-X <u>FILE</u>	--exclude-from=<u>FILE</u>		Exclude files that match any pattern in <u>FILE</u>.			diff
diff --starting-file	diff		-S <u>FILE</u>	--starting-file=<u>FILE</u>		Start with <u>FILE</u> when comparing directories.			diff
diff --from-file	diff			--from-file=<u>FILE1</u>		Compare <u>FILE1</u> to all operands.  <u>FILE1</u> can be a directory.			diff
diff --to-file	diff			--to-file=<u>FILE2</u>		Compare all operands to <u>FILE2</u>.  <u>FILE2</u> can be a directory.			diff
diff --horizon-lines	diff			--horizon-lines=<u>NUM</u>		Keep <u>NUM</u> lines of the common prefix and suffix.			diff
diff --minimal	diff		-d	--minimal		Try hard to find a smaller set of changes.			diff
diff --speed-large-files	diff			--speed-large-files		Assume large files and many scattered small changes.			diff
diff --version	diff		-v	--version		Output version info.			diff
diff --help	diff			--help		Output this help.			diff
find -E	find		-E			Interpret regular expressions followed by <code>-regex</code> and <code>-iregex</code> primaries as extended (modern) regular expressions rather than basic regular expressions (BRE's).  The <code>re_format</code>(7) manual page fully describes both formats.			find
find -s	find		-s			Cause find to traverse the file hierarchies in lexicographical order, i.e., alphabetical order within each directory.  Note: <code>find -s</code> and <code>find | sort</code> may give different results.			find
find primary -Bmin	find	primary			-Bmin <u>n</u>	True if the difference between the time of a file's inode creation and the time <code>find</code> was started, rounded up to the next full minute, is <code>n</code> minutes.			find
find primary -Bnewer	find	primary			-Bnewer <u>file</u>	<i>Shorter of two meaning:</i>&nbsp;True if the current file has a more recent&nbsp;<b>inode creation time</b>&nbsp;than the&nbsp;<b>modification time</b>&nbsp;of&nbsp;<u>file</u>.	Equivalent to&nbsp;<code>-newerBm&nbsp;<u>file</u></code>		find
find primary -Btime	find	primary			-Btime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the time of a file's inode creation and the time find was started, rounded up to the next full 24-hour period, is <code>n</code> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the time of a file's inode creation and the time find was started is exactly <code>n</code> units.  Please refer to the <code>-e</code> primary description for information on supported time units.</div>			find
find primary -acl	find	primary			-acl	May be used in conjunction with other primaries to locate files with extended ACLs.  See <code>acl</code>(3) for more information.			find
find primary -amin	find	primary			-amin <u>n</u>	True if the difference between the file last access time and the time <code>find</code> was started, rounded up to the next full minute, is <code>n</code> minutes.			find
find primary -anewer	find	primary			-anewer <u>file</u>	<i>Shorter of two meaning:</i>&nbsp;True if the current file has a more recent&nbsp;<b>access time</b>&nbsp;than the&nbsp;<b>modification time</b>&nbsp;of&nbsp;<u>file</u>.	Equivalent to&nbsp;<code>-neweram&nbsp;<u>file</u></code>		find
find primary -atime	find	primary			-atime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the file last access time and the time find was started, rounded up to the next full 24-hour period, is <code>n</code> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the file last access time and the time find was started is exactly <code>n</code> units.  Possible time units are as follows:</div><ul><li><code>s</code>: second</li><li><code>m</code>: minute (60 seconds)</li><li><code>h</code>: hour (60 minutes)</li><li><code>d</code>: day (24 hours)</li><li><code>w</code>: week (7 days)</li></ul><div>Any number of units may be combined in one <code>-atime</code> argument, for example, <code>-atime -1h30m</code>.  Units are probably only useful when used in conjunction with the <code>+</code> or <code>-</code> modifier.</div>			find
find primary -cmin	find	primary			-cmin <u>n</u>	True if the difference between the time of last change of file status information and the time find was started, rounded up to the next full minute, is <code>n</code> minutes.			find
find primary -cnewer	find	primary			-cnewer <u>file</u>	<i>Shorter of two meaning:</i>&nbsp;True if the current file has a more recent&nbsp;<b>change time</b>&nbsp;than the&nbsp;<b>modification time</b>&nbsp;of&nbsp;<u>file</u>.	Equivalent to&nbsp;<code>-newercm&nbsp;<u>file</u></code>		find
find primary -ctime	find	primary			-ctime <u>n</u>[<u>smhdw</u>]	<div>If no units are specified, this primary evaluates to true if the difference between the time of last change of file status information and the time find was started, rounded up to the next full 24-hour period, is <code>n</code> 24-hour periods.</div><div>If units are specified, this primary evaluates to true if the difference between the time of last change of file status information and the time find was started is exactly <code>n</code> units.  Please refer to the <code>-e</code> primary description for information on supported time units.</div>			find
find primary -d	find	primary			-d	Same as <code>-depth</code>.  <b>GNU</b> <code>find</code> implements this as a primary in mistaken emulation of <b>FreeBSD</b> <code>find</code>.			find
find primary -delete	find	primary			-delete	Delete found files and/or directories.  Always returns true.  This executes from the current working directory as find recurses down the tree.  It will not attempt to delete a filename with a <code>/</code> character in its pathname relative to <code>.</code> for security reasons.  Depth-first traversal processing is implied by this option.  Following symlinks is incompatible with this option.			find
find primary -depth	find	primary			-depth	Always true; same as the <code>-d</code> option.			find
find primary -empty	find	primary			-empty	True if the current file or directory is empty.			find
find primary -exec ;	find	primary			-exec <u>utility</u> [argument ...] ;	True if the program named <u>utility</u> returns a zero value as its exit status.  Optional arguments may be passed to the utility.  The expression must be terminated by a semicolon (<code>;</code>).  If you invoke find from a shell you may need to quote the semicolon if the shell would otherwise treat it as a control operator.  If the string <code>{}</code> appears anywhere in the utility name or the arguments it is replaced by the pathname of the current file.  <u>Utility</u> will be executed from the directory from which find was executed.  Utility and arguments are not subject to the further expansion of shell patterns and constructs.			find
find primary -execdir ;	find	primary			-execdir <u>utility</u> [<u>argument</u> ...] ;	Identical to the <code>-exec</code> primary with the exception that <u>utility</u> will be executed from the directory that holds the current file.  The filename substituted for the string <code>{}</code> is not qualified.			find
find primary -flags	find	primary			-flags [-|+]<u>flags</u>,<u>notflags</u>	<div>The flags are specified using symbolic names.  Those with the <code>no</code> prefix (except <code>nodump</code>) are said to be <i>notflags</i>.  Flags in <i>flags</i> are checked to be set, and flags in <i>notflags</i> are checked to be not set.  Note that this is different from <code>-perm</code>, which only allows the user to specify mode bits that are set.</div><div>If flags are preceded by a dash (<code>-</code>), this primary evaluates to true if at least all of the bits in flags and none of the bits in <i>notflags</i> are set in the file's flags bits.  If flags are preceded by a plus (<code>+</code>), this primary evaluates to true if any of the bits in flags is set in the file's flags bits, or any of the bits in <i>notflags</i> is not set in the file's flags bits.  Otherwise, this primary evaluates to true if the bits in flags exactly match the file's flags bits, and none of the flags bits match those of <i>notflags</i>.</div>			find marked
find primary -fstype	find	primary			-fstype <u>type</u>	True if the file is contained in a file system of type <u>type</u>.  The <code>lsvfs</code>(1) command can be used to find out the types of file systems that are available on the system.  In addition, there are two pseudo-types, <code>local</code> and <code>rdonly</code>.  The former matches any file system physically mounted on the system where the find is being executed and the latter matches any file system which is mounted read-only.			find
find primary -gid	find	primary			-gid <u>gname</u>	The same thing as <code>-group</code> <u>gname</u> for compatibility with GNU <code>find</code>.  GNU <code>find</code> imposes a restriction that <u>gname</u> is numeric, while <code>find</code>(1) does not.			find
find primary -group	find	primary			-group <u>gname</u>	True if the file belongs to the group <u>gname</u>.  If <u>gname</u> is numeric and there is no such group name, then <u>gname</u> is treated as a group ID.			find
find primary -ignore_readdir_race	find	primary			-ignore_readdir_race	This option is for GNU <code>find</code> compatibility and is ignored.			find
find primary -ilname	find	primary			-ilname <u>pattern</u>	Like <code>-lname</code>, but the match is case insensitive.  This is a GNU <code>find</code> extension.			find
find primary -iname	find	primary			-iname <u>pattern</u>	Like <code>-name</code>, but the match is case insensitive.			find
find primary -inum	find	primary			-inum <u>n</u>	True if the file has inode number <u>n</u>.			find
find primary -ipath	find	primary			-ipath <u>pattern</u>	Like <code>-path</code>, but the match is case insensitive.			find
find primary -iregex	find	primary			-iregex <u>pattern</u>	Like <code>-regex</code>, but the match is case insensitive.			find
find primary -iwholename	find	primary			-iwholename <u>pattern</u>	The same thing as <code>-ipath</code>, for GNU <code>find</code> compatibility.			find
find primary -links	find	primary			-links <u>n</u>	True if the file has <u>n</u> links.			find
find primary -lname	find	primary			-lname <u>pattern</u>	Like <code>-name</code>, but the contents of the symbolic link are matched instead of the file name.  Note that this only matches broken symbolic links if symbolic links are being followed.  This is a GNU <code>find</code> extension.			find
find primary -ls	find	primary			-ls	This primary always evaluates to true.  The following information for the current file is written to standard output: its inode number, size in 512-byte blocks, file permissions, number of hard links, owner, group, size in bytes, last modification time, and pathname.  If the file is a block or character special file, the device number will be displayed instead of the size in bytes.  If the file is a symbolic link, the pathname of the linked-to file will be displayed preceded by <code>-></code>.  The format is identical to that produced by <code>ls -dgils</code>.			find
find primary -maxdepth	find	primary			-maxdepth <u>n</u>	<p>Always true; descend at most <em>n</em> directory levels below the command line arguments. If any <code>-h</code> primary is specified, it applies to the entire expression even if it would not normally be evaluated. Setting this primary to value&nbsp;<code>0</code> limits the whole search to the command line arguments.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5MTksICJpZCI6ICIxNDk0NDA0NDcwMzU0LTAwNiIsICJtZCI6ICJBbHdheXMgdHJ1ZTsgZGVzY2VuZCBhdCBtb3N0IF9uXyBkaXJlY3RvcnkgbGV2ZWxzIGJlbG93IHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzLiBJZiBhbnkgYC1oYCBwcmltYXJ5IGlzIHNwZWNpZmllZCwgaXQgYXBwbGllcyB0byB0aGUgZW50aXJlIGV4cHJlc3Npb24gZXZlbiBpZiBpdCB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgZXZhbHVhdGVkLiBgLW1heGRlcHRoIDBgIGxpbWl0cyB0aGUgd2hvbGUgc2VhcmNoIHRvIHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzLlxuIn0=---->			find
find primary -mindepth	find	primary			-mindepth <u>n</u>	<p>Always true; do not apply any tests or actions at levels less than <em>n</em>. If any <code>-h</code> primary is specified, it applies to the entire expression even if it would not normally be evaluated. <code><strike>-mindepth</strike> 1</code> processes all but the command line arguments.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5MjUsICJpZCI6ICIxNDk0NDA0NDcwMzU1LTAwNiIsICJtZCI6ICJBbHdheXMgdHJ1ZTsgZG8gbm90IGFwcGx5IGFueSB0ZXN0cyBvciBhY3Rpb25zIGF0IGxldmVscyBsZXNzIHRoYW4gX25fLiBJZiBhbnkgYC1oYCBwcmltYXJ5IGlzIHNwZWNpZmllZCwgaXQgYXBwbGllcyB0byB0aGUgZW50aXJlIGV4cHJlc3Npb24gZXZlbiBpZiBpdCB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgZXZhbHVhdGVkLiBgLW1pbmRlcHRoIDFgIHByb2Nlc3NlcyBhbGwgYnV0IHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzLlxuIn0=---->			find
find primary -mmin	find	primary			-mmin <u>n</u>	<p>True if the difference between the file last modification time and the time find was started, rounded up to the next full minute, is <code>n</code> minutes.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5MzAsICJpZCI6ICIxNDk0NDA0NDcwMzU2LTAwNiIsICJtZCI6ICJUcnVlIGlmIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGZpbGUgbGFzdCBtb2RpZmljYXRpb24gdGltZSBhbmQgdGhlIHRpbWUgZmluZCB3YXMgc3RhcnRlZCwgcm91bmRlZCB1cCB0byB0aGUgbmV4dCBmdWxsIG1pbnV0ZSwgaXMgYG5gIG1pbnV0ZXMuXG4ifQ==---->			find
find primary -mnewer	find	primary			-mnewer <u>file</u>	<div><i>Middle of three meaning:&nbsp;</i>True if the current file has a more recent <b>last modification time</b> than&nbsp;<u>file</u>.</div>	Equivalent&nbsp;to&nbsp;<code>-newer&nbsp;<u>file</u></code>&nbsp;and&nbsp;<code>-newermm&nbsp;<u>file</u></code>		find
find primary -mount	find	primary			-mount	<p>The same thing as <code>-xdev</code>, for GNU <code>find</code> compatibility.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5MzcsICJpZCI6ICIxNDk0NDA0NDcwMzU4LTAwNiIsICJtZCI6ICJUaGUgc2FtZSB0aGluZyBhcyBgLXhkZXZgLCBmb3IgR05VIGBmaW5kYCBjb21wYXRpYmlsaXR5LlxuIn0=---->			find
find primary -mtime	find	primary			-mtime <u>n</u>[<u>smhdw</u>]	<p>If no units are specified, this primary evaluates to true if the difference between the file last modification time and the time find was started, rounded up to the next full 24-hour period, is <em>n</em> 24-hour periods.<br /> If units are specified, this primary evaluates to true if the difference between the file last modification time and the time find was started is exactly <em>n</em> units. Please refer to the <code>-e</code> primary description for information on supported time units.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5NDEsICJpZCI6ICIxNDk0NDA0NDcwMzU5LTAwNiIsICJtZCI6ICJJZiBubyB1bml0cyBhcmUgc3BlY2lmaWVkLCB0aGlzIHByaW1hcnkgZXZhbHVhdGVzIHRvIHRydWUgaWYgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgZmlsZSBsYXN0IG1vZGlmaWNhdGlvbiB0aW1lIGFuZCB0aGUgdGltZSBmaW5kIHdhcyBzdGFydGVkLCByb3VuZGVkIHVwIHRvIHRoZSBuZXh0IGZ1bGwgMjQtaG91ciBwZXJpb2QsIGlzIF9uXyAyNC1ob3VyIHBlcmlvZHMuXG5JZiB1bml0cyBhcmUgc3BlY2lmaWVkLCB0aGlzIHByaW1hcnkgZXZhbHVhdGVzIHRvIHRydWUgaWYgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgZmlsZSBsYXN0IG1vZGlmaWNhdGlvbiB0aW1lIGFuZCB0aGUgdGltZSBmaW5kIHdhcyBzdGFydGVkIGlzIGV4YWN0bHkgX25fIHVuaXRzLiBQbGVhc2UgcmVmZXIgdG8gdGhlIGAtZWAgcHJpbWFyeSBkZXNjcmlwdGlvbiBmb3IgaW5mb3JtYXRpb24gb24gc3VwcG9ydGVkIHRpbWUgdW5pdHMuXG4ifQ==---->			find
find primary -name	find	primary			-name <u>pattern</u>	<p>True if the last component of the pathname being examined matches <em>pattern</em>. Special shell pattern matching characters (<code>[</code>, <code>]</code>, <code>*</code>, and <code>?</code>) may be used as part of <em>pattern</em>. These characters may be matched explicitly by escaping them with a backslash (<code>\</code>).</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5NDYsICJpZCI6ICIxNDk0NDA0NDcwMzYwLTAwNiIsICJtZCI6ICJUcnVlIGlmIHRoZSBsYXN0IGNvbXBvbmVudCBvZiB0aGUgcGF0aG5hbWUgYmVpbmcgZXhhbWluZWQgbWF0Y2hlcyBfcGF0dGVybl8uIFNwZWNpYWwgc2hlbGwgcGF0dGVybiBtYXRjaGluZyBjaGFyYWN0ZXJzIChgW2AsIGBdYCwgYCpgLCBhbmQgYD9gKSBtYXkgYmUgdXNlZCBhcyBwYXJ0IG9mIF9wYXR0ZXJuXy4gVGhlc2UgY2hhcmFjdGVycyBtYXkgYmUgbWF0Y2hlZCBleHBsaWNpdGx5IGJ5IGVzY2FwaW5nIHRoZW0gd2l0aCBhIGJhY2tzbGFzaCAoYFxcYCkuXG4ifQ==---->			find
find primary -newer	find	primary			-newer <u>file</u>	<i>Shortest of three meaning: </i>True if the current file has a more recent <b>last modification time</b> than <u>file</u>.	Equivalent&nbsp;to&nbsp;<code>-mnewer&nbsp;<u>file</u></code>&nbsp;and&nbsp;<code>-newermm&nbsp;<u>file</u></code>		find
find primary -nogroup	find	primary			-nogroup	True if the file belongs to an unknown group.			find
find primary -noignore_readdir_race	find	primary			-noignore_readdir_race	<p>This option is for GNU <code>find</code> compatibility and is ignored.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNDc5NTksICJpZCI6ICIxNDk0NDA0NDcwMzY0LTAwNiIsICJtZCI6ICJUaGlzIG9wdGlvbiBpcyBmb3IgR05VIGBmaW5kYCBjb21wYXRpYmlsaXR5IGFuZCBpcyBpZ25vcmVkLlxuIn0=---->			find
find primary -noleaf	find	primary			-noleaf	This option is for GNU <code>find</code> compatibility.  In GNU <code>find</code> it disables an optimization not relevant to <code>find</code>(1), so it is ignored.			find
find primary -nouser	find	primary			-nouser	True if the file belongs to an unknown user.			find
find primary -ok	find	primary			-ok <u>utility</u> [<u>argument</u> ...] ;	The <code>-k</code> primary is identical to the <code>-c</code> primary with the exception that find requests user affirmation for the execution of the utility by printing a message to the terminal and reading a response.  If the response is not affirmative (<code>y</code> in the <code>POSIX</code> locale), the command is not executed and the value of the <code>-ok</code> expression is false.			find
find primary -okdir	find	primary			-okdir <u>utility</u> [<u>argument</u> ...] ;	The <code>-r</code> primary is identical to the <code>-r</code> primary with the same exception as described for the <code>-k</code> primary.			find
find primary -path	find	primary			-path <u>pattern</u>	True if the pathname being examined matches pattern.  Special shell pattern matching characters (<code>[</code>, <code>]</code>, <code>*</code>, and <code>?</code>) may be used as part of pattern.  These characters may be matched explicitly by escaping them with a backslash (<code>\</code>).  Slashes (<code>/</code>) are treated as normal characters and do not have to be matched explicitly.			find
find primary -perm	find	primary			-perm [-|+]<u>mode</u>	The mode may be either symbolic (see <code>chmod</code>(1)) or an octal number.  If the mode is symbolic, a starting value of zero is assumed and the mode sets or clears permissions without regard to the process' file mode creation mask.  If the mode is octal, only bits <code>07777</code> (<code>S_ISUID</code> | <code>S_ISGID</code> | <code>S_ISTXT</code> | <code>S_IRWXU</code> | <code>S_IRWXG</code> | <code>S_IRWXO</code>) of the file's mode bits participate in the comparison.  If the mode is preceded by a dash (<code>-</code>), this primary evaluates to true if at least all of the bits in the mode are set in the file's mode bits.  If the mode is preceded by a plus (<code>+</code>), this primary evaluates to true if any of the bits in the mode are set in the file's mode bits.  Otherwise, this primary evaluates to true if the bits in the mode exactly match the file's mode bits.  Note, the first character of a symbolic mode may not be a dash (<code>-</code>).			find
find primary -print	find	primary			-print	This primary always evaluates to true.  It prints the pathname of the current file to standard output.  If none of <code>-exec</code>, <code>-ls</code>, <code>-print</code>, <code>-print0</code>, or <code>-ok</code> is specified, the given expression shall be effectively replaced by ( given expression ) <code>-print</code>.			find
find primary -print0	find	primary			-print0	This primary always evaluates to true.  It prints the pathname of the current file to standard output, followed by an ASCII <code>NUL</code> character (character code <code>0</code>).			find
find primary -prune	find	primary			-prune	This primary always evaluates to true.  It causes find to not descend into the current file.  Note, the <code>-e</code> primary has no effect if the <code>-d</code> option was specified.			find
find primary -regex	find	primary			-regex <u>pattern</u>	True if the whole path of the file matches <u>pattern</u> using regular expression.  To match a file named <code>./foo/xyzzy</code>, you can use the regular expression <code>.*/[xyz]*</code> or <code>.*/foo/.*</code>, but not <code>xyzzy</code> or <code>/foo/</code>.			find
find primary -samefile	find	primary			-samefile <u>name</u>	True if the file is a hard link to <u>name</u>.  If the command option <code>-L</code> is specified, it is also true if the file is a symbolic link and points to name.			find
find primary -size	find	primary			-size <u>n</u>[<u>ckMGTP</u>]	<div>True if the file's size, rounded up, in 512-byte blocks is <u>n</u>.  If <u>n</u> is followed by a <u>c</u>, then the primary is true if the file's size is <u>n</u> bytes (characters).  Similarly if <u>n</u> is followed by a scale indicator then the file's size is compared to <u>n</u> scaled as:</div><ul><li><code>k</code>: kilobytes (1024 bytes)</li><li><code>M</code>: megabytes (1024 kilobytes)</li><li><code>G</code>: gigabytes (1024 megabytes)</li><li><code>T</code>: terabytes (1024 gigabytes)</li><li><code>P</code>: petabytes (1024 terabytes)</li></ul>			find
find primary -type	find	primary			-type <u>t</u>	<div>True if the file is of the specified type.  Possible file types are as follows:</div><ul><li><code>b</code>: block special</li><li><code>c</code>: character special</li><li><code>d</code>: directory</li><li><code>f</code>: regular file</li><li><code>l</code>: symbolic link</li><li><code>p</code>: FIFO</li><li><code>s</code>: socket</li></ul>			find
find primary -uid	find	primary			-uid <u>uname</u>	The same thing as <code>-user</code> <u>uname</u> for compatibility with GNU <code>find</code>.  GNU <code>find</code> imposes a restriction that <u>uname</u> is numeric, while <code>find</code>(1) does not.			find
find primary -user	find	primary			-user <u>uname</u>	True if the file belongs to the user <u>uname</u>.  If <u>uname</u> is numeric and there is no such user name, then <u>uname</u> is treated as a user ID.			find
find primary -wholename	find	primary			-wholename <u>pattern</u>	The same thing as <code>-path</code>, for GNU <code>find</code> compatibility.			find
find primary -xattr	find	primary			-xattr	True if the file has any extended attributes.			find
find primary -xattrname	find	primary			-xattrname <u>name</u>	True if the file has an extended attribute with the specified <u>name</u>.			find
find operator ( )	find	operator			( <u>expression</u> )	This evaluates to true if the parenthesized expression evaluates to true.			find
find operator !	find	operator			! <u>expression</u>	This is the unary NOT operator.  It evaluates to true if the expression is false.			find
find operator -not	find	operator			-not <u>expression</u>	This is the unary NOT operator.  It evaluates to true if the expression is false.			find
find operator -false	find	operator			-false	Always false.			find
find operator -true	find	operator			-true	Always true.			find
find operator -and	find	operator			<u>expression</u> -and <u>expression</u>	The <code>-and</code> operator is the logical AND operator.  As it is implied by the juxtaposition of two expressions it does not have to be specified.  The expression evaluates to true if both expressions are true.  The second expression is not evaluated if the first expression is false.			find
find operator <u>EXPR</u> <u>EXPR</u>	find	operator			<u>expression</u> <u>expression</u>	The <code>-and</code> operator is the logical AND operator. The expression evaluates to true if either the first or the second expression is true.  The second expression is not evaluated if the first expression is true.			find
find operator -or	find	operator			<u>expression</u> -or <u>expression</u>	The <code>-or</code> operator is the logical OR operator.  As it is implied by the juxtaposition of two expressions it does not have to be specified.  The expression evaluates to true if both expressions are true.  The second expression is not evaluated if the first expression is false.			find
find primary -type b	find	primary -type			b	block special			find
find primary -type c	find	primary -type			c	character special			find
find primary -type d	find	primary -type			d	directory			find
find primary -type f	find	primary -type			f	regular file			find
find primary -type l	find	primary <code>-type</code>			l	symbolic link			find
find primary -type p	find	primary -type			p	FIFO			find
find primary -type s	find	primary -type			s	socket			find
find primary -size k	find	primary -size			k	kilobytes (1024 bytes)			find
find primary -size M	find	primary -size			M	megabytes (1024 kilobytes)			find
find primary -size G	find	primary -size			G	gigabytes (1024 megabytes)			find
find primary -size T	find	primary -size			T	terabytes (1024 gigabytes)			find
find primary -size P	find	primary -size			P	petabytes (1024 terabytes)			find
find primary -atime s	find	primary -atime			s	second			find
find primary -atime m	find	primary -atime			m	minute (60 seconds)			find
find primary -atime h	find	primary -atime			h	hour (60 minutes)			find
find primary -atime d	find	primary -atime			d	day (24 hours)			find
find primary -atime w	find	primary -atime			w	week (7 days)			find
find primary -depth<u>n</u>	find	primary			-depth <u>n</u>	True if the depth of the file relative to the starting point of the traversal is <code>n</code>.			find
find primary -exec {} +	find	primary			-exec <u>utility</u> [<u>argument</u> ...] {} +	Same as <code>-exec</code>, except that <code>{}</code> is replaced with as many pathnames as possible for each invocation of <u>utility</u>.  This behaviour is similar to that of <code>xargs</code>(1).			find
find primary -execdir {} +	find	primary			-execdir <u>utility</u> [<u>argument</u> ...] {} +	Same as <code>-execdir</code>, except that <code>{}</code> is replaced with as many pathnames as possible for each invocation of <u>utility</u>.  This behaviour is similar to that of <code>xargs</code>(1).			find
locate	locate					<p>Searches a database for all pathnames which match the specified pattern. The database is recomputed periodically (usually weekly or daily), and contains the pathnames of all files which are publicly accessible.</p> <p>Shell globbing and quoting characters (<code>*</code>, <code>?</code>, <code>\</code>, <code>[</code> and <code>]</code>) may be used in pattern, although they will have to be escaped from the shell. Preceding any character with a backslash (<code>\</code>) eliminates any special meaning which it may have. The matching differs in that no characters must be matched explicitly, including slashes (<code>/</code>).</p> <p>As a special case, a pattern containing no globbing characters <code>foo</code> is matched as though it were <code>*foo*</code>.</p> <p>Historically, locate only stored characters between 32 and 127. The current implementation store any character except newline (<code>\n</code>) and NUL (<code>\0</code>). The 8-bit character support does not waste extra space for plain ASCII file names. Characters less than 32 or greater than 127 are stored in 2 bytes.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU4NDE0MzQsICJpZCI6ICIxNDk0NDA1NDQ3MjA3LTAwNiIsICJtZCI6ICJTZWFyY2hlcyBhIGRhdGFiYXNlIGZvciBhbGwgcGF0aG5hbWVzIHdoaWNoIG1hdGNoIHRoZSBzcGVjaWZpZWQgcGF0dGVybi4gVGhlIGRhdGFiYXNlIGlzIHJlY29tcHV0ZWQgcGVyaW9kaWNhbGx5ICh1c3VhbGx5IHdlZWtseSBvciBkYWlseSksIGFuZCBjb250YWlucyB0aGUgcGF0aG5hbWVzIG9mIGFsbCBmaWxlcyB3aGljaCBhcmUgcHVibGljbHkgYWNjZXNzaWJsZS5cbiAgXG5TaGVsbCBnbG9iYmluZyBhbmQgcXVvdGluZyBjaGFyYWN0ZXJzIChgKmAsIGA/YCwgYFxcYCwgYFtgIGFuZCBgXWApIG1heSBiZSB1c2VkIGluIHBhdHRlcm4sIGFsdGhvdWdoIHRoZXkgd2lsbCBoYXZlIHRvIGJlIGVzY2FwZWQgZnJvbSB0aGUgc2hlbGwuIFByZWNlZGluZyBhbnkgY2hhcmFjdGVyIHdpdGggYSBiYWNrc2xhc2ggKGBcXGApIGVsaW1pbmF0ZXMgYW55IHNwZWNpYWwgbWVhbmluZyB3aGljaCBpdCBtYXkgaGF2ZS4gVGhlIG1hdGNoaW5nIGRpZmZlcnMgaW4gdGhhdCBubyBjaGFyYWN0ZXJzIG11c3QgYmUgbWF0Y2hlZCBleHBsaWNpdGx5LCBpbmNsdWRpbmcgc2xhc2hlcyAoYC9gKS5cbiAgXG5BcyBhIHNwZWNpYWwgY2FzZSwgYSBwYXR0ZXJuIGNvbnRhaW5pbmcgbm8gZ2xvYmJpbmcgY2hhcmFjdGVycyBgZm9vYCBpcyBtYXRjaGVkIGFzIHRob3VnaCBpdCB3ZXJlIGAqZm9vKmAuXG4gIFxuSGlzdG9yaWNhbGx5LCBsb2NhdGUgb25seSBzdG9yZWQgY2hhcmFjdGVycyBiZXR3ZWVuIDMyIGFuZCAxMjcuIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIHN0b3JlIGFueSBjaGFyYWN0ZXIgZXhjZXB0IG5ld2xpbmUgKGBcXG5gKSBhbmQgTlVMIChgXFwwYCkuIFRoZSA4LWJpdCBjaGFyYWN0ZXIgc3VwcG9ydCBkb2VzIG5vdCB3YXN0ZSBleHRyYSBzcGFjZSBmb3IgcGxhaW4gQVNDSUkgZmlsZSBuYW1lcy4gQ2hhcmFjdGVycyBsZXNzIHRoYW4gMzIgb3IgZ3JlYXRlciB0aGFuIDEyNyBhcmUgc3RvcmVkIGluIDIgYnl0ZXMuXG4ifQ==---->	<code>locate</code> [<code>-0Scims</code>] [<code>-l</code> <u>limit</u>] [<code>-d</code> <u>database</u>] <u>pattern</u> ...	y	locate
locate -0	locate		-0			Print pathnames separated by an ASCII NUL character (character code 0) instead of default NL (newline, character code 10).			locate
locate -S	locate		-S			Print some statistics about the database and exit.			locate
locate -c	locate		-c			Suppress normal output; instead print a count of matching file names.			locate
locate -d	locate		-d <u>database</u>			"<div>Search in database instead of the default file name database. &nbsp;Multiple <code>-d</code> options are allowed. &nbsp;Each additional <code>-d</code> option adds</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the specified database to the list of databases to be searched.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The option database may be a colon-separated list of databases. &nbsp;A single colon is a reference to the default database.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<code>$ locate -d $HOME/lib/mydb: foo</code></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;will first search string ""foo"" in <code>$HOME/lib/mydb</code> and then in <code>/var/db/locate.database</code>.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$ locate -d $HOME/lib/mydb::/cdrom/locate.database foo</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;will first search string ""foo"" in <code>$HOME/lib/mydb</code> and then in <code>/var/db/locate.database</code> and then in <code>/cdrom/locate.database</code>.</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<code>$ locate -d db1 -d db2 -d db3 pattern</code></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;is the same as</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<code>$ locate -d db1:db2:db3 pattern</code></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;or</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<code>$ locate -d db1:db2 -d db3 pattern</code></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;If <code>-</code> is given as the database name, standard input will be read instead. &nbsp;For example, you can compress your database and use:</div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<code>$ zcat database.gz | locate -d - pattern</code></div><div><br /></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;This might be useful on machines with a fast CPU and little RAM and slow I/O. &nbsp;Note: you can only use one pattern for stdin.</div>"			locate
locate -i	locate		-i			<div>Ignore case distinctions in both the pattern and the database.</div>			locate
locate -l	locate		-l <u>number</u>			<div>Limit output to <u>number</u> of file names and exit.</div>			locate
locate -m	locate		-m			<div>Use <code>mmap</code>(2) instead of the <code>stdio</code>(3) library. &nbsp;This is the default behavior and is faster in most cases.</div>			locate
locate -s	locate		-s			<div>Use the <code>stdio</code>(3) library instead of <code>mmap</code>(2).</div>			locate
apropos	apropos					searches  a  set  of database files containing short descriptions of system commands for keywords and displays the result on the        standard output	apropos&nbsp;<u>keyword</u>	y	
whatis	whatis					Searches  a  set  of  database files containing short descriptions of system commands for keywords and displays the result on the        standard output.  Only complete word matches are displayed.	<code>whatis</code>&nbsp;<u>keyword</u><div><u><br /></u></div><div>The database is created using the command <code>/usr/libexec/makewhatis</code></div>	y	
man [section]	man					<p>Following 8 sections are available in the man page.</p> <ol> <li>General commands</li> <li>System calls</li> <li>C library functions</li> <li>Special files (usually devices, those found in /dev) and drivers</li> <li>File formats and conventions</li> <li>Games and screensavers</li> <li>Miscellaneous</li> <li>System administration commands and daemons</li></ol>	<b><div>$ whatis crontab</div><div>crontab (1) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- maintain crontab files for individual users (V3)</div><div>crontab (5) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- tables for driving cron</div><div><br /></div><div>$ man 5 crontab</div></b>	y	
What is the main characteristic of a  <b>distributed                   version control system                   (DVCS)</b>?	A distributed version control system has no                   central server which                   stores the data. Every local copy contains the full history of the                   source code.                                   					
Does the use of a                   <b>DVCS</b> require a                   central                   code                   repository?                                   	No.					
Where does Git                   <b>commit</b> file changes to?<br />	To the local repository.					
What happens when you <b>clone</b> a                   repository with                    Git?	An exact copy of the                   repository is created locally.<br />					
Does the local clone of a remote repository include the                   complete history of the source code?	Yes.					
What's the meaning of <b>master branch</b>?	"The ""master"" in Git is the default branch, which generally represents the most stable code."					
What is a <b>commit</b>?	A commit is a pointer to a spot&nbsp;(revision)&nbsp;on the code history.					
How are Git commits <b>identified</b>?	Instead of numbering commits, Git uses the code contents of the commit to create a unique, 40 character SHA-1 hash.					
Does a branch created in a repository,&nbsp;which was cloned from another repository, need to have a&nbsp;counterpart in the&nbsp;remote repository?<br /> 	No it doesn't.					
Which two steps are neccessary to persist modifications on a file in the repository?<br />	1. Staging (mark the file to be relevant for Git) = adding the file to the index.<br />2. Commiting: storing the changes in the Git repository.<br />					
What does the term <b>staging</b> describe?	Marking changes as relevant for the version control, by adding them to the index.					
What is a <b>Revision</b>?<br />	A revision represents a version of the source code. Git identifies                                                revisions                                                with SHA-1 IDs using a commit object. SHA-1 IDs are 160 bits long and are                                                represented                                                in                                                hexadecimal. The latest version can be addressed                                                via                                                HEAD, the version before that via                                                HEAD~1                                                and so on.					
In which file does Git store <b>global settings</b>?<br />	In the <b>.gitconfig</b> file.<br />					
Which file tells Git which files and directories to <b>ignore</b>?<br />	<pre>.gitignore</pre>					
What is the difference between <b>local .gitignore</b> and <b>global .gitignore</b> files, regarding visibility?<br />	The local                .gitignore                file can be committed into the Git repository and                therefore is visible                to everyone who clones the repository. The                global                .gitignore                file is only                locally visible.                             					
How are <b>empty directories</b> handled under Git version control / by common practice?	Git ignores empty directories, i.e. it does not put them under version control. Common practice for tracking an empty directory though, is to put a file called <b>.gitkeep</b> into such a directory.<br />					
What does the command <b>git reflog</b>&nbsp;do?<br />	It displays the history of the complete changes of the current branch, based on the HEAD revision.<br />					
Does <b>git reflog</b>&nbsp;also contain deleted commits?	Yes.					
How is the <b>default branch</b> called in Git?<br />	Master.					
What does the term <b>merging</b>&nbsp;describe?<br />	The process of combining changes of two branches.					
What is a <b>merge conflict</b>?<br />	A merge conflict occurs, if two people have modified the same content and Git cannot automatically determine how both changes should be applied.<br />					
What does the <b>rebase</b>&nbsp;command do?<br>	In general terms - rewrites history. E.g: Combining several commits into<br>                  one commit. Or replaying changes from one branch on top of the other.					
What functionality does the <b>stash</b> command add?<br />	Saving the current uncommmitted changes and&nbsp;checkout&nbsp;the last committed revision. This allows pulling-in the latest changes or to develop an urgent fix. Afterwards the stashed changes can be restored, which will reapply the changes to the current version of the source code.<br /> 					
What's the rule of thumb, concerning the <b>stash</b>&nbsp;command?<br />	It should be the exception to using Git. Typically you would create new branches for new features and switch between branches.<br />					
What is a <b>patch file</b>?<br />	A text file that contains changes to the source code.					
What is an <b>alias</b> in Git?	An alias in Git allows you to setup your own Git command. E.g. you can define an alias which is a short form of your own favorite commands or you can combine several commands with an alias.					
Name two <b>transport types</b>&nbsp;that are supported protocols for Git checkouts	The native Git protocol is <b>git</b>, alternatively the <b>http</b> protocol is also supported.					
What happens in regards to naming of the original repository, when <b>cloning</b> a remote repository?<br />	"The original repository will automatically be called ""origin"".<br />"					
What is the possibility of using the <b>HTTP protocol</b> with Git especially helpful for?	If a firewall blocks all requests other than http.<br />					
Which are the two variants of <b>ssh keys</b>?<br />	Public and private.<br />					
What does <b>rev~</b> stand for?	"The first parent of a revision ""rev"""					
What is the starting point of the scope of <b>.gitignore</b> files?	They define ignore definitions for the whole directory tree, starting from the point where the .gitignore file itself resides.					
"What's the difference between <b>git pull</b> and <b>git fetch</b>? (<span style="" font-style: normal; font-weight: normal;"">In the simplest terms)</span>"	git pull does a git fetch followed by a git merge.					
What is the difference between <b>git commit</b> and <b>git push</b>?	<b>commit:</b> adding changes to the repository.<div><b>push</b>: to transfer the last commit(s) to a remote server</div>					
What is the <b>head</b> in Git?	The head is a pointer to the current branch, which is in turn the last commit you made or checked out into your working directory.					
What is the <b>index</b> in Git?	"It's a snapshot of changes contained in your next commit, this way it's the ""<b>proposed next commit</b>""."					
What does <b>head^</b> mean?	It means the first parent of the tip of the current branch.					
What is the difference between <b>head~</b> and <b>head^</b> ?	&nbsp;~&lt;n&gt; means the revision that is the &lt;n&gt;th generation ancestor of the named revision, following only the first parents.<div>^&lt;n&gt; means the &lt;n&gt;th parent of that revision.</div>					marked
What is a local version control system?	A database of changes kept on the same computer as the files being versioned.					
How is a distributed version control system different from others?	Every client has a full backup of all the data.					
"What is the ""snapshot"" concept?"	In Git, the data is more like a stream of complete snapshots of a mini filesystem rather than a list of file changes like you'll see in SVN, Perforce, etc.					
Why are most git operations so fast?<br>	They happen on the local disk, rather than over a network<br>					
How does git maintain file integrity?<br>	Everything is SHA-1 checksummed and stored not by filename, but rather hash value of each file's contents.<br>					
What are the 3 git states your files can reside in?<br>	committed, modified, and staged<br>					
"What does it mean when a file is in the ""committed"" state?<br>"	The data is safely stored in your local database<br>					
"What does it mean if a file is in the ""modified"" state?<br>"	You have changed the file, but not yet committed it.<br>					
"What does it mean if a file is in the ""staged"" state?<br>"	You have marked a file in its current state to go into the next commit snapshot.<br>					
What are the 3 sections of a git project?<br />	the Git directory (repository), the working directory, and the staging area<br />					marked
What is stored in the Git directory?<br>	The metadata and object database for your project<br>					
What is copied when you clone a repository from another computer?<br>	the Git directory<br>					
What is the working directory?<br>	A single checkout of one version of the project. These files are pulled out of the compressed database in the git directory and placed on disk for you to use and modify.<br>					
What is the staging area?	"It is a file in the git directory that stores information about what goes into the next commit. It is sometimes referred to as the ""index""."					
What is the 3-step basic git workflow?	1. modify files in working directory<div>2. stage files, adding snapshots of them to the staging area</div><div>3. commit, which takes the files in the staging area and stores that snapshot permanently to your git directory</div>					
Where are the three places that git config variables can be stored?	1. systemwide: &nbsp;/etc/gitconfig<div>2. per user: ~/.gitconfig or ~/.config/git/config</div><div>3. per project: .git/config</div>					
What option do you pass to git config to modify system-level configs?	--system					
What option do you pass to git config to make changes for specific to your user?	--global					
What are three ways to get help on a git verb?	1. git help &lt;verb&gt;<div>2. git &lt;verb&gt; --help</div><div>3. man git-&lt;verb&gt;</div>					
"How do you get a copy of an existing git repository, say https://github.com/libgit2/libgit2<span style=""line-height: 1.1;"">?</span><br>"	git clone&nbsp;https://github.com/libgit2/libgit2					
What are a couple different transfer protocols used by git?	https://<div>git://</div>					
What is the difference between a tracked and untracked file?	Tracked files are all files that were in the last snapshot. They can be unmodified, modified, or staged. Untracked files are not in the latest snapshot or staged.					
Why is it possible for a tracked file to be both in staging and modified state?	"Because the staged version is the contents of the file at the exact time you ran ""git add"" to stage the file. You have to run ""git add"" again if you've modified it and want to stage the latest contents of the file."					
What file is used to ignore some untracked files?	.gitignore					
What is the default shortname for cloned repositories?	origin					
How does git fetch affect your local repository?	It pulls the data, but does not merge or modify your working copy. To actually merge, it must be manually done.					
What is stored in a git commit object?	* pointer to the snapshot of the staged content<div>* author's name and email</div><div>* commit message</div><div>* pointer to the commit(s) directly before this one</div>					
What is a branch in terms of git commit objects?	A lightweight movable pointer to one of the commits					
What is the name of the special pointer which tells you which local branch you're currently on?	HEAD					
What happens to the HEAD pointer when you create a new branch?	Nothing, it continues to point to the existing branch (such as master, if you haven't changed it yet). It does not switch to the new branch automatically.					
What happens to the working directory when you switch branches?	The files are updated to reflect the last commit of the branch. If it cannot be updated cleanly, git will not let you switch.					
Why is a git branch cheap?	A branch is a simple file that contains the 40 character SHA-1 checksum of the commit it points to.					
"What is a ""fast-forward"" merge?"	"When you try to merge a commit that can be reached by following the first commit's history, git will simply move the pointer forward because there is no divergent work to merge together. This is known as a ""fast-forward"" merge."					
What is a merge commit?	When two divergent branches are merged, git creates a new snapshot and a new commit that points to it. A merge commit has more than one parent.					
How is git different in dealing with the merge base when merging branches?	Git determines the best common ancestor to use for its merge base, which is a lot simpler than many other VCSes.					
What does the leading * character mean in the output of git branch?	It indicates the branch you have currently checked out (that HEAD points to).					
What is the name used for a branching workflow where sets of commits graduate to a more stable silo when they're fully tested?<br>	progressive-stability branching<br>					
What is the name for a short-lived branch for a single particular feature or related work?<br>	topic branch<br>					
What are remote branches?<br>	Pointers to the state of branches in remote repositories. They are local branches that you cannot move.<br>					
When are remote branch pointers updated?<br>	They are automatically moved when you do any network communication.<br>					
When you fetch a remote branch, will it automatically set up a local branch with the same name?	No. You must either merge it or create your own branch from it.					
What is the shorthand for referencing the tracking remote and branch?	@{u} or @{upstream}					marked
How does rebasing affect the commit history differently than a merge?	A rebase will make the commit history look linear/clean rather than a bunch of branch merges. This is often done to make sure your commits apply cleanly to a remote branch.					
What one tip should you follow to avoid a drawback of rebasing?	Do not rebase commits that exist outside of your repository.					
What is a good general rule for deciding when to rebase or to merge?	Rebase local changes you haven't shared yet in order to clean up, but never rebase anything you pushed somewhere.					
"What is a ""bare repository""?"	A repository that doesn't contain a working directory					
Which command will <b>initialize a new, empty repository</b> in the current working directory?	<pre>git init</pre>			
"What command is used to configure the local user's email (""email""), that are used when committing to Git repositories?"	"<pre><span style=""font-family: Arial"">git config --global user.email ""email""</span></pre>"			git shell
What does this command do:&nbsp;<b>git add . &nbsp;</b>	It adds everything inside the current working directory to the index.					
Which commands are needed to <b>add</b> <b>all .js files </b>to the local Git repository?	<pre>git add *.js</pre>			
"Which command will <b>commit</b> to the local repository, including a <b>commit message </b>(""message"")?"	"<pre>git commit -m ""message""</pre>"			
Which command prints&nbsp;&nbsp;the <b>current state</b> of your code/repository?	"<pre style=""text-align: justify;"">git status</pre>"			
Which Git command is used to <b>list the existing branches</b>?	<pre>git branch</pre>		"Ommitting all options to the ""git branch"" command, will list the existing branches."	
"Which command <b>creates</b> a new branch (""branchname"")?"	<pre>git branch branchname</pre>			
"Which command will switch to the branch ""myotherbranch""?"	"<pre style=""line-height: 25px;"">git checkout myotherbranch</pre>"			
"What commands will join everything from the branch ""bigIdea"" to be part of the ""master"" branch?"	<pre>git checkout master</pre> <pre>git merge bigIdea</pre>					
"Which command will delete (even) an unmerged branch (""branchname"")?"	git branch -D branchname			
Which command displays the existing <b>global Git settings</b>?<br />	<pre>git config --list</pre>			
Which command shows<b> commit logs </b>(list of all commits, starting with newest)?<br />	<pre>git log</pre>	<div>For each commit the following info would be displayed</div>1. SHA-1 identifier<br />2. Author and Email<br />3. Date + time of the commit<br />4. Commit message header		
Which command displays all <b>changes to tracked files since the last commit</b>?<br />	<pre>git diff</pre>			
"Which command displays the changes in a <b>specific commit </b>(""commitid"")?"	<pre>git show commitid</pre>			
"Which command displays the <b>change history</b> of a specific file (""filename"")?"	<pre>git log filename</pre>			
"Which command displays which commit and author modified a file (""filename"") on a line by line basis?"	<pre>git blame filename</pre>			
"Which command deletes a file (""filename"")&nbsp;from the working directory and at the same time marks it for the next commit?<br />"	<pre>git rm filename</pre>			
Which command displays the existing defined <b>remote repositories</b>?<br />	<pre>git remote</pre>			
Which command <b>cleans</b>&nbsp;untracked changes in the working directory?	<pre>git clean -f</pre>	"optional:<div>-d to remove untracked directories</div><div>-x remove also ""ignored files""</div>"		
"How can you <b>revert a deleted or changed file </b>(""filename"")<b> that has not yet been added to the index</b>?<br />"	git checkout filename	Add -- after checkout to avoid naming conflicts if you have tag or branch with the same name		
"How can you checkout older revisions of your source code (revision ""commitid"")?<br />"	git checkout commitid	Via checking out specific commit id		
"Which command removes an added file (""filename"") from the index again?<br />"	<pre>git reset filename</pre>			
"How can all changes of a commit (""commitid"") be reverted and a new commit be recorded, which documents that the other commit was reverted?<br />"	<pre>git revert commitid</pre>			
Which command lists the <b>available tags</b>?<br />	<pre>git tag</pre>			
"Which command creates a <b>new tag </b>(""tagname"") <b>with a description&nbsp;</b>(description)?"	<pre>git tag tagname -m 'description'</pre>			
"Which command will <b>check out a specific tag </b>(""tagname"")?"	<pre>git checkout tagname</pre>			
Which command / parameter <b>lists all branches, including remote</b> branches?	<pre>git branch -a</pre>			
Which command <b>creates a new branch </b>(branchname)<b> and switches to it</b>?	git checkout -b branchname			
"Which command would <b>delete </b>the local ""testing"" branch (if it is merged)?<br />"	<pre>git branch -d testing</pre>			
"Which command <b>merges differences</b> of the ""testing"" branch into the current active branch?<br />"	<pre>git merge testing</pre>			
Which default Git tool exists for <b>resolving conflicts</b>, which command starts it?<br />	git mergetool			
Which command would <b>start interactive rebase </b>of the last seven commits?	<pre>git rebase -i HEAD~7</pre>		"More info on interactive mode here:&nbsp;<a href=""https://git-scm.com/docs/git-rebase"">https://git-scm.com/docs/git-rebase</a>"	
"Which command displays <b>which commit deleted a specific file </b>(""filename"")?<br />"	<pre>git log -- filename</pre>			
What is the <b>--</b> option in <b>git log</b>&nbsp;used for?<br />	To see the commit history for a file, even if the file has been deleted.<br />					
"Which command will define an alias ""add-commit"", which<br />                  combines<br /> <b>git add . -A</b><br />                  and<br /> <b>git commit</b>?"	"<pre class=""programlisting"">git config --global alias.add-commit <span class=""hl-string"">'!git add . -A &amp;&amp; git commit'</span></pre>"	! is to specify that it's an external command		
What does the command do: <b>git reset --soft HEAD~</b>	Undo the last commit. The affected files will be back on stage again.					
What does <b>git reset --hard HEAD~</b>&nbsp;do? (instead of HEAD~ it could be also a commit SHA-1 or another reference)	Undo the last commit, unstage files AND undo any changes in the working directory. (Not tracked files won't be affected)					
Which parameter allows you to <b>stage an ignored file</b>?	<pre>--force</pre>			
"Which Git command <b>newly stages a specific file </b>(""filename"")?"	<pre>git add filename</pre>			
"Which command will <b>undo the checking-in of an unwanted change </b>in a file ""filename""&nbsp;(remove the respective file from the index), but keep the changes in the filesystem?"	<pre>git reset filename</pre>			
What is the difference between:<br><pre>git checkout -f</pre> and <pre>git reset --hard HEAD</pre>?	None, with these parameters they do exactly the same.					
Remove main.txt from staging but keep in working (untrack file, after this and commit file would be remove from repo)	git rm --cached main.txt			
"Which command / parameter changes the message of the last commit? (for ""newmessage"")<br />"	"<code>git commit --amend -m ""newmessage""</code><br />"			
"Clone an existing repository (address: ""url"")"	git clone url			
Create a new local repository	git init			
Add some (allows you interactively to choose which) changes in <i>file</i> to the next commit	git add -p <i>file</i>			
Commit all local changes in tracked files	git commit -a			
Commit previously staged changes	git commit			
Change the last commit [only before pushing]	git commit --amend			
"Show changes over time (diffs) for a specific file (""filename"")"	git log -p <i>filename</i>			
Switch HEAD to <i>branch</i>	git checkout<i>&nbsp;branch</i>			
"Create a new branch (name ""nbranch"") based on current HEAD"	git branch n<i>branch</i>			
"Create a new tracking branch (""tbranch"") based on a remote branch (""rbranch"")"	git branch --track t<i>branch</i> <i>rbranch</i>			
"Delete a local branch (""branch"")"	git branch -d <i>branch</i>			
"Mark the current commit with a tag (""tagname"")"	git tag <i>tagname</i>			
"Show information about a remote&nbsp;(""origin"")"	git remote show <i>origin</i>			
Add remote server 'url' with shortname 'myurl'	git remote add myurl url			
"Download all changes from <i>remote&nbsp;</i>(""origin"")&nbsp;but don't integrate into HEAD"	git fetch <i>origin</i>			
"Download changes from remote&nbsp;(""origin"")&nbsp;branch ""branch"" and directly merge into HEAD"	git pull <i>origin</i> <i>branch</i>			
"Publish local changes (for a branch ""branch"") on a remote (""origin"")"	git push <i>origin</i>&nbsp;<i>branch</i>			
"Delete a ""branch"" on the remote&nbsp;(""origin"") (old way)"	git push <i>origin</i>&nbsp;:<i>branch</i>			
Publish your tags	git push --tags			
Merge <i>branch</i> into your current HEAD	git merge <i>branch</i>			
Rebase your current HEAD onto <i>branch</i>	git rebase <i>branch</i>			
Abort a rebase	git rebase --abort			
Continue a rebase after resolving conflicts	git rebase --continue			
Use your configured merge tool to solve conflicts	git mergetool			
Use your editor to manually solve conflicts during merge/rebase and after resolving mark file as resolved with:	git add <i>resolved-file or</i><div>git rm <i>resolved-file</i></div>					marked
Discard all local changes in working directory	git reset --hard HEAD			
"Discard local changes in a specific file (""filename"")"	git checkout&nbsp;<i>filename</i>			
Reset your HEAD pointer to some previous <i>commit</i> (and discard all changes since then)	git reset --hard <i>commit</i>			
Reset your HEAD pointer to some previous commit, and preserve all changes as unstaged changes	git reset <i>commit</i>			
"Reset your HEAD pointer to some previous commit (""commit"") and preserve uncommited local changes"	git reset --keep <i>commit</i>	If a file that is different between &lt;commit&gt; and HEAD has local changes, reset is aborted.		
What tool is used to get and set configuration variables that control how git looks and operates?	git config			
What .gitignore pattern would you use to ignore all .txt files in the doc folder?	doc/**/*.txt		"<a href=""https://git-scm.com/docs/gitignore"">https://git-scm.com/docs/gitignore</a>"	
How can you skip the staging area for modified, tracked files when doing a commit?	git commit -a			
How do you delete a <i>file</i> that has been modified and already added to the staging area?	git rm -f file			
"How do you rename or move a file in git (""src"" to ""target"")?"	git mv src target			
What are some of the options to view the commit log history in different formats?	"--pretty=[oneline | short | full | fuller]<div>--pretty=format:""...""</div>"					
How do you view the history for author jdoe with keyword potato in the commit message made in the last two weeks that added or removed a reference to the function mashThePotato that were not merges?	git log --author jdoe --grep potato --all-match -SmashThePotato --since=2.weeks --no-merges					
"Why is git reset considered safe without ""--hard"" option?"	It only affects your staging area					
How do you tag revision 0123abc with the name v1.0?	git tag v1.0 0123abc			
"What happens if you try to delete a branch with ""git branch -d &lt;name&gt;"" that has not yet been merged?"	It will fail, and offer -D if you really want to lose your branch.					
"If you want to use a different name than ""origin"" (eg ""norig"") for the remote when cloning a repository (""repo""), what parameter would you use?<br />"	git clone -o norig repo<br />			
"How would you share a local branch called ""badname"" as ""goodname"" on a remote called ""origin""?<br>"	git push origin badname:goodname<br>			
How would you set up a credential cache so that you don't have to keep typing your password for git push?	git config --global credential.helper cache			
If you have a local branch and you want it to use a remote branch (say origin/hotfix) as upstream, how would you set it?	git branch -u origin/hotfix			
How do you see what tracking branches you have set up?	git branch -vv			
"How would you delete a remote branch (""serverfix"") from the server (""origin"")?"	git push origin --delete serverfix			
How would you use rebase to apply master changes to branch b1, then apply b1 changes to master? The result being a linear history.	<div># method: 1</div>git checkout b1<div>git rebase master</div><div>git checkout master</div><div>git merge b1</div><div><br /></div><div># method: 2</div><div>git rebase b1 master</div><div>git checkout master</div><div>git merge b1</div>					
If you have changes on commits that no longer exist upstream (due to a remote rebase), how can you pull in those changes and avoid conflicts that would happen with git pull origin/master?	<div>git pull --rebase origin/master</div>			
"What are limitations of the command that changes the message of the last commit (<span style=""font-family: monospace"">git commit --amend</span>)?"	It only works before the commit has been pushed to remote repo.					git shell
"What command is used to configure the local user's name (""Name""), that are used when committing to Git repositories?"	"<pre>git config --global user.name ""Name""</pre>"			git shell
"Show what file would be delited with ""git clean"" (dry run)"	git clean -n	(or --dry-run)		git marked shell
"What option should you add to ""git clean"" in order to remove untracked directories"	-d			git shell
"What option should you add to ""git clean"" in order to remove ""ignored"" files"	-x			git shell
"Which command will&nbsp;<b>show the entire history (</b>including renames<b>)&nbsp;</b>for the file (""filename"")?"	<pre>git log --follow -p filename</pre>			git shell
<b>Create a stash</b>&nbsp;with uncommitted changes (analogous to save uncommited changes, and do reset hard)	git stash			command git shell stash
<b>Reapply the stashed changes</b>&nbsp;<b>and</b>&nbsp;<b>delete the stash&nbsp;</b>from the list of stashes	git stash pop			command git shell stash
<b>Reapply the stashed changes</b>&nbsp;without deleting<b>&nbsp;stash&nbsp;</b>from the list of stashes	git stash apply			command git shell stash
Show git stash stack (list of stashes)	git stash list			command git shell stash
Show branches already merged into current branch	git branch --merged			command git shell
Show branches not yet merged into current branch	git branch --no-merged			command git shell
Rebase master onto develop without checking it out	git rebase master develop			command git shell
Show remote servers with URL displayed	git remote -v			command git shell
Rename remote 'server1' to 'server2'	git remote rename server1 server2			command git shell
Remove remote 'server1'	git remote rm server1			command git shell
Show last two commits with diffs	git log -p -2			command git shell
Show commit logs with stats	git log --stat			command git shell
<div>Show commit logs one per line</div>	git log --pretty=oneline			command git shell
Show commit logs with ascii graph	git log --graph			command git shell
Show commit log for the last week	git log --since=1.week			command git shell
<div>Show prev commits for each lines 10-15 of file.rb</div>	git blame -L 10,15 file.rb			command git shell
Reapply stash 2	git stash apply stash@{2}			command git shell
Reapply stashed changes along with the changes in index (staging the changes, for example)	git stash apply --index			command git shell
Drop stash 2	git stash drop stash@{2}			command git shell
Create branch 'mybranch' from stash	git stash branch mybranch			command git shell
Delete all stashes	git stash clear			command git shell
Show what's staged but not yet committed	git diff --staged			command git shell
Start binary search of commits to find bad commit	git bisect start		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
Mark current commit as broken during bisect	git bisect bad		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
<div>Mark current commit as good during bisect</div>	git bisect good		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
Mark v2.2 as last known good commit during bisect (beginning of binary search)	git bisect good v2.2		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
How do you initiate bisect algorithm in git (several commands)	"<div><div>Suppose you are trying to find the commit that broke a feature that was known to work in version v2.6.13-rc2 of your project. You start a bisect session as follows:</div><div><br /></div><div>$ git bisect start</div><div>$ git bisect bad # Current version is bad</div><div>$ git bisect good v2.6.13-rc2 # v2.6.13-rc2 is known to be good</div></div><div><br /></div><a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"					command git shell
Reset to original&nbsp;HEAD when finished with bisect	git bisect reset		"<a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a>"	command git shell
"Run 'test.sh' on each commit during bisect (automates designation of commit as ""good"" or ""bad"")"	git bisect run test.sh	Note that the script should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.	"<div><a href=""https://git-scm.com/docs/git-bisect"">https://git-scm.com/docs/git-bisect</a></div>"	command git shell
"Search the working directory for ""foo()"""	"git grep ""foo()"""			command git shell
View all the merge conflicts (if your working tree is in corresponding state)	git diff			command git shell
"See differences between two commits (""commitid1"", ""commitid2"")"	git diff commitid1 commitid2			command git shell
"See the files (only filenames) changed between two commits (""commitid1"", ""commitid2"")"	git diff&nbsp;--name-only&nbsp;commitid1 commitid2&nbsp;			command git shell
Undo non-pushed commits (if you are tracking branch origin/master)	git reset origin/master			command git shell
"Apply a patch (""patchname.patch"")"	<div>git apply -v patchname.patch</div>			command git shell
"Re-checkout file (""filename"") or files specified by path to version specified by <i>rev</i> (which may be specified using a SHA1 commit ID, branch name, or tag), overwriting any local changes."	git checkout rev filename			command git shell
Check out the client branch, figure out the patches from the common ancestor of the client and server branches (the common ancestor branched from master in the past), and then replay the patches from client that are not into common ancestor onto master.	git rebase --onto master server client		"Here are some diargrams:&nbsp;<a href=""https://git-scm.com/book/ch3-6.html"">https://git-scm.com/book/ch3-6.html</a>"	command git shell
"Create alias ""co"" for git checkout"	git config --global alias.co checkout			command git shell
"Add ""unstage"" alias to git (for current user)"	git config --global alias.unstage 'reset HEAD --'			command git shell
Filter commit by author ('jdoe') in git log	git log --author jdoe			command git log shell
"Filter commit by presense of ""pattern"" in commit message in git log"	git log --grep pattern			command git log shell
What parameter of git log should you use to specify that you want to see only commits matching all given patterns (with --grep option)?	--all-match			command git log shell
Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.	git log -G&lt;regex&gt;		"<a href=""https://git-scm.com/docs/git-log"">https://git-scm.com/docs/git-log</a>"	command git log shell
Stash all changes (including untracked and ignored files)	git stash --all		"<a href=""https://git-scm.com/docs/git-stash"">https://git-scm.com/docs/git-stash</a>"	command git shell
Stash files in repo including untracked files (but not ignored ones)	git stash&nbsp;--include-untracked		"<a href=""https://git-scm.com/docs/git-stash"">https://git-scm.com/docs/git-stash</a>"	command git shell
Start git stash interactive mode (allows you to &nbsp;interactively select changes, that would be stashed)	git stash -p		"<a href=""https://git-scm.com/docs/git-stash"">https://git-scm.com/docs/git-stash</a>"	command git shell
Show status of the repository, ignoring untracked files	git status -uno	or&nbsp;--untracked-files=no. Other options - normal (Shows untracked files and directories),&nbsp;all (default, Also shows individual files in untracked directories).		command git shell
What is wrong with --option=~/file	~ only substituted by shell if leading filename, so needs = replaced by space					
Make the current commit the only (initial) commit in a Git repository?	<div>The only solution that works for me (and keeps submodules working) is</div><div><br /></div><div><b>git checkout --orphan newBranch</b></div><div><b>git add -A &nbsp;# Add all files and commit them</b></div><div><b>git commit</b></div><div><b>git branch -D master &nbsp;# Deletes the master branch</b></div><div><b>git branch -m master &nbsp;# Rename the current branch to master</b></div><div><b>git push -f origin master &nbsp;# Force push master branch to github</b></div><div><b>git gc --aggressive --prune=all &nbsp; &nbsp; # remove the old files</b></div>					
cron meaning	There is no definitive explanation but most accepted answers is reportdly from Ken Thompson (author of unix cron): cron comes from chron, the Greek prefix for ‘time’.					
crontab short for	cron table					
crontab restrictions	"<ul> <li style=""text-align: left; "">if <code>/usr/lib/cron/cron.allow</code> exists<ul> <li style=""text-align: left; ""><code>$USER</code> must appear in it</li> </ul> </li> <li style=""text-align: left; "">else if <code>/usr/lib/cron/cron.deny</code> exists<ul> <li style=""text-align: left; ""><code>$USER</code> must not appear in it</li> </ul> </li> <li style=""text-align: left; "">else<ul> <li style=""text-align: left; "">only <code>root</code> can use crontab</li> </ul> </li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM0MjYsICJpZCI6ICIxNDk0OTg3MDM2NzY2LTAwMSIsICJtZCI6ICIqIGlmIGAvdXNyL2xpYi9jcm9uL2Nyb24uYWxsb3dgIGV4aXN0c1xuICAgICogYCRVU0VSYCBtdXN0IGFwcGVhciBpbiBpdFxuKiBlbHNlIGlmIGAvdXNyL2xpYi9jcm9uL2Nyb24uZGVueWAgZXhpc3RzXG4gICAgKiBgJFVTRVJgIG11c3Qgbm90IGFwcGVhciBpbiBpdFxuKiBlbHNlXG4gICAgKiBvbmx5IGByb290YCBjYW4gdXNlIGNyb250YWJcbiJ9---->"					
bash&nbsp;special parameter&nbsp;$#	bash	special parameter			$#	Expands to the number of positional parameters in decimal.			
bash&nbsp;special parameter&nbsp;$*	bash	special parameter			$*	"<p>Expands to the positional parameters, starting from one. When the expansion is not within double quotes, each positional parameter expands to a separate word. In contexts where it is performed, those words are subject to further word splitting and pathname expansion. When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the IFS special variable. That is, this parameter is equivalent to <code>""$1c$2c…""</code>, where <code>c</code> is the first character of the value of the <code>IFS</code> variable. If <code>IFS</code> is unset, the parameters are separated by spaces. If <code>IFS</code> is null, the parameters are joined without intervening separators.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNDk1NjksICJpZCI6ICIxNDk1MjQ5MjE5NTU3LTAwNiIsICJtZCI6ICJFeHBhbmRzIHRvIHRoZSBwb3NpdGlvbmFsIHBhcmFtZXRlcnMsIHN0YXJ0aW5nIGZyb20gb25lLiBXaGVuIHRoZSBleHBhbnNpb24gaXMgbm90IHdpdGhpbiBkb3VibGUgcXVvdGVzLCBlYWNoIHBvc2l0aW9uYWwgcGFyYW1ldGVyIGV4cGFuZHMgdG8gYSBzZXBhcmF0ZSB3b3JkLiBJbiBjb250ZXh0cyB3aGVyZSBpdCBpcyBwZXJmb3JtZWQsIHRob3NlIHdvcmRzIGFyZSBzdWJqZWN0IHRvIGZ1cnRoZXIgd29yZCBzcGxpdHRpbmcgYW5kIHBhdGhuYW1lIGV4cGFuc2lvbi4gV2hlbiB0aGUgZXhwYW5zaW9uIG9jY3VycyB3aXRoaW4gZG91YmxlIHF1b3RlcywgaXQgZXhwYW5kcyB0byBhIHNpbmdsZSB3b3JkIHdpdGggdGhlIHZhbHVlIG9mIGVhY2ggcGFyYW1ldGVyIHNlcGFyYXRlZCBieSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBJRlMgc3BlY2lhbCB2YXJpYWJsZS4gVGhhdCBpcywgYCZxdW90OyQqJnF1b3Q7YCBpcyBlcXVpdmFsZW50IHRvIGAmcXVvdDskMWMkMmNcdTIwMjYmcXVvdDtgLCB3aGVyZSBgY2AgaXMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgdmFsdWUgb2YgdGhlIGBJRlNgIHZhcmlhYmxlLiBJZiBgSUZTYCBpcyB1bnNldCwgdGhlIHBhcmFtZXRlcnMgYXJlIHNlcGFyYXRlZCBieSBzcGFjZXMuIElmIGBJRlNgIGlzIG51bGwsIHRoZSBwYXJhbWV0ZXJzIGFyZSBqb2luZWQgd2l0aG91dCBpbnRlcnZlbmluZyBzZXBhcmF0b3JzLlxuIn0=---->"			
bash&nbsp;special parameter&nbsp;$@	bash	special parameter			$@	"<p>Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, each parameter expands to a separate word. That is, <code>""...""</code> is equivalent to <code>""$1"" ""$2"" …</code>. If the double-quoted expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined with the last part of the original word. When there are no positional parameters, <code>""...""</code> and <code>...</code> expand to nothing (i.e., they are removed). </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNDkzNjksICJpZCI6ICIxNDk1MjQ5MzI0MjE3LTAwNiIsICJtZCI6ICJFeHBhbmRzIHRvIHRoZSBwb3NpdGlvbmFsIHBhcmFtZXRlcnMsIHN0YXJ0aW5nIGZyb20gb25lLiBXaGVuIHRoZSBleHBhbnNpb24gb2NjdXJzIHdpdGhpbiBkb3VibGUgcXVvdGVzLCBlYWNoIHBhcmFtZXRlciBleHBhbmRzIHRvIGEgc2VwYXJhdGUgd29yZC4gVGhhdCBpcywgYCZxdW90OyRAJnF1b3Q7YCBpcyBlcXVpdmFsZW50IHRvIGAmcXVvdDskMSZxdW90OyAmcXVvdDskMiZxdW90OyBcdTIwMjZgLiBJZiB0aGUgZG91YmxlLXF1b3RlZCBleHBhbnNpb24gb2NjdXJzIHdpdGhpbiBhIHdvcmQsIHRoZSBleHBhbnNpb24gb2YgdGhlIGZpcnN0IHBhcmFtZXRlciBpcyBqb2luZWQgd2l0aCB0aGUgYmVnaW5uaW5nIHBhcnQgb2YgdGhlIG9yaWdpbmFsIHdvcmQsIGFuZCB0aGUgZXhwYW5zaW9uIG9mIHRoZSBsYXN0IHBhcmFtZXRlciBpcyBqb2luZWQgd2l0aCB0aGUgbGFzdCBwYXJ0IG9mIHRoZSBvcmlnaW5hbCB3b3JkLiBXaGVuIHRoZXJlIGFyZSBubyBwb3NpdGlvbmFsIHBhcmFtZXRlcnMsIGAmcXVvdDskQCZxdW90O2AgYW5kIGAkQGAgZXhwYW5kIHRvIG5vdGhpbmcgKGkuZS4sIHRoZXkgYXJlIHJlbW92ZWQpLiBcbiJ9---->"			
bash special parameter $-	bash	special parameter			$-	<p>Expands to the current option flags as specified upon invocation, by the <code>set</code> builtin command, or those set by the shell itself (such as the <code>-i</code> option). </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNDk3NjAsICJpZCI6ICIxNDk1MjQ5Mzg4NzA0LTAwNiIsICJtZCI6ICJFeHBhbmRzIHRvIHRoZSBjdXJyZW50IG9wdGlvbiBmbGFncyBhcyBzcGVjaWZpZWQgdXBvbiBpbnZvY2F0aW9uLCBieSB0aGUgYHNldGAgYnVpbHRpbiBjb21tYW5kLCBvciB0aG9zZSBzZXQgYnkgdGhlIHNoZWxsIGl0c2VsZiAoc3VjaCBhcyB0aGUgYC1pYCBvcHRpb24pLiBcbiJ9---->			
bash&nbsp;special parameter&nbsp;$$	bash	special parameter			$$	<p>Expands to the process ID of the shell. In a <code>()</code> subshell, it expands to the process ID of the invoking shell, not the subshell.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU4NzI5NzYsICJpZCI6ICIxNDk1MjQ5Nzg3NjYxLTAwNiIsICJtZCI6ICJFeHBhbmRzIHRvIHRoZSBwcm9jZXNzIElEIG9mIHRoZSBzaGVsbC4gSW4gYSBgKClgIHN1YnNoZWxsLCBpdCBleHBhbmRzIHRvIHRoZSBwcm9jZXNzIElEIG9mIHRoZSBpbnZva2luZyBzaGVsbCwgbm90IHRoZSBzdWJzaGVsbC5cbiJ9---->			
bash&nbsp;special parameter&nbsp;$!	bash	special parameter			$!	"<p>Expands to the process ID of the job most recently placed into the background, whether executed as an asynchronous command or using the <code>bg</code> builtin (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Job-Control-Builtins.html#Job-Control-Builtins"">Job Control Builtins</a>). </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUzNTU5NjQsICJpZCI6ICIxNDk1MjQ5ODE4NjcwLTAwNiIsICJtZCI6ICJFeHBhbmRzIHRvIHRoZSBwcm9jZXNzIElEIG9mIHRoZSBqb2IgbW9zdCByZWNlbnRseSBwbGFjZWQgaW50byB0aGUgYmFja2dyb3VuZCwgd2hldGhlciBleGVjdXRlZCBhcyBhbiBhc3luY2hyb25vdXMgY29tbWFuZCBvciB1c2luZyB0aGUgYGJnYCBidWlsdGluIChzZWUgW0pvYiBDb250cm9sIEJ1aWx0aW5zXShodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvbWFudWFsL2h0bWxfbm9kZS9Kb2ItQ29udHJvbC1CdWlsdGlucy5odG1sI0pvYi1Db250cm9sLUJ1aWx0aW5zKSkuIFxuIn0=---->"			
bash&nbsp;special parameter&nbsp;$0	bash	special parameter			$0	"<ul> <li style=""text-align: left; "">name of the <strong>shell or shell script</strong></li> <li style=""text-align: left; "">name of <strong>command file</strong> Bash invoked with</li> <li style=""text-align: left; ""><strong>first argument</strong> after the string to be executed if Bash started with <code>-c</code></li> <li style=""text-align: left; "">filename used to invoke Bash as given by argument zero</li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTc0NzExMzUsICJpZCI6ICIxNDk1MjQ5ODU4OTQxLTAwNiIsICJtZCI6ICIqIG5hbWUgb2YgdGhlICoqc2hlbGwgb3Igc2hlbGwgc2NyaXB0KipcbiogbmFtZSBvZiAqKmNvbW1hbmQgZmlsZSoqIEJhc2ggaW52b2tlZCB3aXRoXG4qICoqZmlyc3QgYXJndW1lbnQqKiBhZnRlciB0aGUgc3RyaW5nIHRvIGJlIGV4ZWN1dGVkIGlmIEJhc2ggc3RhcnRlZCB3aXRoIGAtY2BcbiogZmlsZW5hbWUgdXNlZCB0byBpbnZva2UgQmFzaCBhcyBnaXZlbiBieSBhcmd1bWVudCB6ZXJvXG4ifQ==---->"			
bash&nbsp;special parameter&nbsp;$_	bash	special parameter			$_	"<ul> <li style=""text-align: left; ""><strong>shell invocation absolute pathname</strong></li> <li style=""text-align: left; ""><strong>executing script name</strong> as passed in the environment or argument list</li> <li style=""text-align: left; "">last argument to the previous command, after expansion</li> <li style=""text-align: left; "">full pathname used to invoke each command executed and placed in the environment exported to that command</li> <li style=""text-align: left; ""><em>when checking mail:</em> the name of the mail file</li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTczOTU4ODQsICJpZCI6ICIxNDk1MjQ5OTMxNTk4LTAwNiIsICJtZCI6ICIqICoqc2hlbGwgaW52b2NhdGlvbiBhYnNvbHV0ZSBwYXRobmFtZSoqXG4qICoqZXhlY3V0aW5nIHNjcmlwdCBuYW1lKiogYXMgcGFzc2VkIGluIHRoZSBlbnZpcm9ubWVudCBvciBhcmd1bWVudCBsaXN0XG4qIGxhc3QgYXJndW1lbnQgdG8gdGhlIHByZXZpb3VzIGNvbW1hbmQsIGFmdGVyIGV4cGFuc2lvblxuKiBmdWxsIHBhdGhuYW1lIHVzZWQgdG8gaW52b2tlIGVhY2ggY29tbWFuZCBleGVjdXRlZCBhbmQgcGxhY2VkIGluIHRoZSBlbnZpcm9ubWVudCBleHBvcnRlZCB0byB0aGF0IGNvbW1hbmRcbiogX3doZW4gY2hlY2tpbmcgbWFpbDpfIHRoZSBuYW1lIG9mIHRoZSBtYWlsIGZpbGVcbiJ9---->"			bash
bash positional parameter ${<i>N</i>}	bash	positional parameter			${N}	<p>A <em>positional parameter</em> is a parameter denoted by one or more digits, other than the single digit <code>0</code>. Positional parameters are assigned from the shell’s arguments when it is invoked, and may be reassigned using the <code>set</code> builtin command. Positional parameter <code><i>N</i></code> may be referenced as <code>${<i>N</i>}</code>, or as <code>$<i>N</i></code> when <code><i>N</i></code> consists of a single digit. Positional parameters may not be assigned to with assignment statements. The <code>set</code> and <code>shift</code> builtins are used to set and unset them. The positional parameters are temporarily replaced when a shell function is executed. <br /> When a positional parameter consisting of more than a single digit is expanded, it must be enclosed in braces. </p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNTAxODgsICJpZCI6ICIxNDk1MjUwMDUxNTAxLTAwNiIsICJtZCI6ICJBIF9wb3NpdGlvbmFsIHBhcmFtZXRlcl8gaXMgYSBwYXJhbWV0ZXIgZGVub3RlZCBieSBvbmUgb3IgbW9yZSBkaWdpdHMsIG90aGVyIHRoYW4gdGhlIHNpbmdsZSBkaWdpdCBgMGAuIFBvc2l0aW9uYWwgcGFyYW1ldGVycyBhcmUgYXNzaWduZWQgZnJvbSB0aGUgc2hlbGxcdTIwMTlzIGFyZ3VtZW50cyB3aGVuIGl0IGlzIGludm9rZWQsIGFuZCBtYXkgYmUgcmVhc3NpZ25lZCB1c2luZyB0aGUgYHNldGAgYnVpbHRpbiBjb21tYW5kLiBQb3NpdGlvbmFsIHBhcmFtZXRlciBgTmAgbWF5IGJlIHJlZmVyZW5jZWQgYXMgYCR7Tn1gLCBvciBhcyBgJE5gIHdoZW4gYE5gIGNvbnNpc3RzIG9mIGEgc2luZ2xlIGRpZ2l0LiBQb3NpdGlvbmFsIHBhcmFtZXRlcnMgbWF5IG5vdCBiZSBhc3NpZ25lZCB0byB3aXRoIGFzc2lnbm1lbnQgc3RhdGVtZW50cy4gVGhlIGBzZXRgIGFuZCBgc2hpZnRgIGJ1aWx0aW5zIGFyZSB1c2VkIHRvIHNldCBhbmQgdW5zZXQgdGhlbSAoc2VlIFtTaGVsbCBCdWlsdGluIENvbW1hbmRzXShTaGVsbC1CdWlsdGluLUNvbW1hbmRzLmh0bWwjU2hlbGwtQnVpbHRpbi1Db21tYW5kcykpLiBUaGUgcG9zaXRpb25hbCBwYXJhbWV0ZXJzIGFyZSB0ZW1wb3JhcmlseSByZXBsYWNlZCB3aGVuIGEgc2hlbGwgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgKHNlZSBbU2hlbGwgRnVuY3Rpb25zXShTaGVsbC1GdW5jdGlvbnMuaHRtbCNTaGVsbC1GdW5jdGlvbnMpKS4gXG5XaGVuIGEgcG9zaXRpb25hbCBwYXJhbWV0ZXIgY29uc2lzdGluZyBvZiBtb3JlIHRoYW4gYSBzaW5nbGUgZGlnaXQgaXMgZXhwYW5kZWQsIGl0IG11c3QgYmUgZW5jbG9zZWQgaW4gYnJhY2VzLiBcbiJ9---->			
bash builtin declare -n	declare		-n			<p>Give each <var>name</var> the <var>nameref</var> attribute, making it a name reference to another variable. That other variable is defined by the value of <var>name</var>. All references, assignments, and attribute modifications to <var>name</var>, except for those using or changing the <samp>-n</samp> attribute itself, are performed on the variable referenced by <var>name</var>’s value. The nameref attribute cannot be applied to array variables. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin alias	bash	builtin			alias	"<p>Without arguments or with the <code>-p</code> option, <code>alias</code> prints the list of aliases on the standard output in a form that allows them to be reused as input. If arguments are supplied, an alias is defined for each <code>name</code> whose <code>value</code> is given.  If no <code>value</code> is given, the name and value of the alias is printed.</p> <p>Aliases are described in <a href=""Aliases.html#Aliases"">Aliases</a>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNTA2NDUsICJpZCI6ICIxNDk1MjUwNDIyNDY5LTAwNiIsICJtZCI6ICJXaXRob3V0IGFyZ3VtZW50cyBvciB3aXRoIHRoZSBgLXBgIG9wdGlvbiwgYGFsaWFzYCBwcmludHMgdGhlIGxpc3Qgb2YgYWxpYXNlcyBvbiB0aGUgc3RhbmRhcmQgb3V0cHV0IGluIGEgZm9ybSB0aGF0IGFsbG93cyB0aGVtIHRvIGJlIHJldXNlZCBhcyBpbnB1dC4gSWYgYXJndW1lbnRzIGFyZSBzdXBwbGllZCwgYW4gYWxpYXMgaXMgZGVmaW5lZCBmb3IgZWFjaCBgbmFtZWAgd2hvc2UgYHZhbHVlYCBpcyBnaXZlbi4gIElmIG5vIGB2YWx1ZWAgaXMgZ2l2ZW4sIHRoZSBuYW1lIGFuZCB2YWx1ZSBvZiB0aGUgYWxpYXMgaXMgcHJpbnRlZC5cbiAgXG5BbGlhc2VzIGFyZSBkZXNjcmliZWQgaW4gJmx0O2EgaHJlZj0mcXVvdDtBbGlhc2VzLmh0bWwjQWxpYXNlcyZxdW90OyZndDtBbGlhc2VzJmx0Oy9hJmd0Oy5cbiJ9---->"	alias [-p] [&lt;var&gt;name&lt;/var&gt;[=&lt;var&gt;value&lt;/var&gt;] &amp;hellip;]		bash
bash builtin bind	bash	builtin			bind	"<p>Display current Readline (see <a href=""Command-Line-Editing.html#Command-Line-Editing"">Command Line Editing</a>) key and function bindings, bind a key sequence to a Readline function or macro, or set a Readline variable. Each non-option argument is a command as it would appear in a Readline initialization file (see <a href=""Readline-Init-File.html#Readline-Init-File"">Readline Init File</a>), but each binding or command must be passed as a separate argument;  e.g., ‘<samp>""\C-x\C-r"":re-read-init-file</samp>’. </p> <p>The return status is zero unless an invalid option is supplied or an error occurs. </p>"	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin&nbsp;builtin	bash	builtin			builtin	<p>Run a shell builtin, passing it <var>args</var>, and return its exit status. This is useful when defining a shell function with the same name as a shell builtin, retaining the functionality of the builtin within the function. The return status is non-zero if <var>shell-builtin</var> is not a shell builtin command. </p>	builtin [<var>shell-builtin</var> [<var>args</var>]]		bash
bash builtin&nbsp;caller	bash	builtin			caller	<p>Returns the context of any active subroutine call (a shell function or a script executed with the <code>.</code> or <code>source</code> builtins). </p> <p>Without <var>expr</var>, <code>caller</code> displays the line number and source filename of the current subroutine call. If a non-negative integer is supplied as <var>expr</var>, <code>caller</code> displays the line number, subroutine name, and source file corresponding to that position in the current execution call stack.  This extra information may be used, for example, to print a stack trace.  The current frame is frame 0. </p> <p>The return value is 0 unless the shell is not executing a subroutine call or <var>expr</var> does not correspond to a valid position in the call stack. </p>	caller [<var>expr</var>]		bash
bash builtin&nbsp;command	bash	builtin			caller	<p>Runs <var>command</var> with <var>arguments</var> ignoring any shell function named <var>command</var>. Only shell builtin commands or commands found by searching the <code>PATH</code> are executed. If there is a shell function named <code>ls</code>, running ‘<samp>command ls</samp>’ within the function will execute the external command <code>ls</code> instead of calling the function recursively. The <samp>-p</samp> option means to use a default value for <code>PATH</code> that is guaranteed to find all of the standard utilities. The return status in this case is 127 if <var>command</var> cannot be found or an error occurred, and the exit status of <var>command</var> otherwise. </p> <p>If either the <samp>-V</samp> or <samp>-v</samp> option is supplied, a description of <var>command</var> is printed.  The <samp>-v</samp> option causes a single word indicating the command or file name used to invoke <var>command</var> to be displayed; the <samp>-V</samp> option produces a more verbose description.  In this case, the return status is zero if <var>command</var> is found, and non-zero if not. </p>	command [-pVv] <var>command</var> [<var>arguments</var> …]		bash
bash builtin&nbsp;declare	bash	builtin			declare	"<p>Declare variables and give them attributes.  If no <var>name</var>s are given, then display the values of variables instead.  </p> <p>The <samp>-p</samp> option will display the attributes and values of each <var>name</var>. When <samp>-p</samp> is used with <var>name</var> arguments, additional options, other than <samp>-f</samp> and <samp>-F</samp>, are ignored. </p> <p>When <samp>-p</samp> is supplied without <var>name</var> arguments, <code>declare</code> will display the attributes and values of all variables having the attributes specified by the additional options. If no other options are supplied with <samp>-p</samp>, <code>declare</code> will display the attributes and values of all shell variables.  The <samp>-f</samp> option will restrict the display to shell functions. </p> <p>The <samp>-F</samp> option inhibits the display of function definitions; only the function name and attributes are printed. If the <code>extdebug</code> shell option is enabled using <code>shopt</code> (see <a href=""https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin"">The Shopt Builtin</a>), the source file name and line number where each <var>name</var> is defined are displayed as well. <samp>-F</samp> implies <samp>-f</samp>. </p> <p>The <samp>-g</samp> option forces variables to be created or modified at the global scope, even when <code>declare</code> is executed in a shell function. It is ignored in all other cases. </p> <p>The following options can be used to restrict output to variables with the specified attributes or to give variables attributes: </p> <dl compact=""compact""> <dt><code>-a</code></dt> <dd><p>Each <var>name</var> is an indexed array variable (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Arrays.html#Arrays"">Arrays</a>). </p> </dd> <dt><code>-A</code></dt> <dd><p>Each <var>name</var> is an associative array variable (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Arrays.html#Arrays"">Arrays</a>). </p> </dd> <dt><code>-f</code></dt> <dd><p>Use function names only. </p> </dd> <dt><code>-i</code></dt> <dd><p>The variable is to be treated as an integer; arithmetic evaluation (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html#Shell-Arithmetic"">Shell Arithmetic</a>) is performed when the variable is assigned a value. </p> </dd> <dt><code>-l</code></dt> <dd><p>When the variable is assigned a value, all upper-case characters are converted to lower-case. The upper-case attribute is disabled. </p> </dd> <dt><code>-n</code></dt> <dd><p>Give each <var>name</var> the <var>nameref</var> attribute, making it a name reference to another variable. That other variable is defined by the value of <var>name</var>. All references, assignments, and attribute modifications to <var>name</var>, except for those using or changing the <samp>-n</samp> attribute itself, are performed on the variable referenced by <var>name</var>’s value. The nameref attribute cannot be applied to array variables. </p> </dd> <dt><code>-r</code></dt> <dd><p>Make <var>name</var>s readonly.  These names cannot then be assigned values by subsequent assignment statements or unset. </p> </dd> <dt><code>-t</code></dt> <dd><p>Give each <var>name</var> the <code>trace</code> attribute. Traced functions inherit the <code>DEBUG</code> and <code>RETURN</code> traps from the calling shell. The trace attribute has no special meaning for variables. </p> </dd> <dt><code>-u</code></dt> <dd><p>When the variable is assigned a value, all lower-case characters are converted to upper-case. The lower-case attribute is disabled. </p> </dd> <dt><code>-x</code></dt> <dd><p>Mark each <var>name</var> for export to subsequent commands via the environment. </p></dd> </dl> <p>Using ‘<samp>+</samp>’ instead of ‘<samp>-</samp>’ turns off the attribute instead, with the exceptions that ‘<samp>+a</samp>’ may not be used to destroy an array variable and ‘<samp>+r</samp>’ will not remove the readonly attribute. When used in a function, <code>declare</code> makes each <var>name</var> local, as with the <code>local</code> command, unless the <samp>-g</samp> option is used. If a variable name is followed by =<var>value</var>, the value of the variable is set to <var>value</var>. </p> <p>When using <samp>-a</samp> or <samp>-A</samp> and the compound assignment syntax to  create array variables, additional attributes do not take effect until subsequent assignments. </p> <p>The return status is zero unless an invalid option is encountered, an attempt is made to define a function using ‘<samp>-f foo=bar</samp>’, an attempt is made to assign a value to a readonly variable, an attempt is made to assign a value to an array variable without using the compound assignment syntax (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Arrays.html#Arrays"">Arrays</a>), one of the <var>names</var> is not a valid shell variable name, an attempt is made to turn off readonly status for a readonly variable, an attempt is made to turn off array status for an array variable, or an attempt is made to display a non-existent function with <samp>-f</samp>. </p>"	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin&nbsp;echo	bash	builtin			echo	"<p>Output the <var>arg</var>s, separated by spaces, terminated with a newline. The return status is 0 unless a write error occurs. If <samp>-n</samp> is specified, the trailing newline is suppressed. If the <samp>-e</samp> option is given, interpretation of the following backslash-escaped characters is enabled. The <samp>-E</samp> option disables the interpretation of these escape characters, even on systems where they are interpreted by default. The <code>xpg_<strike>echo</strike></code> shell option may be used to dynamically determine whether or not <code><strike>echo</strike></code> expands these escape characters by default. <code><strike>echo</strike></code> does not interpret <samp>--</samp> to mean the end of options.</p><dl compact=""compact""> </dl>"	"echo [-neE] [<var>arg</var> …]<div><br /></div><div><code>echo</code>&nbsp;interprets the following escape sequences:</div><div><dl compact=""compact""><dt><code>\a&nbsp;</code>alert (bell)</dt><dt><code>\b&nbsp;</code>backspace</dt><dt><code>\c&nbsp;</code>suppress further output</dt><dt><code>\e</code></dt><dt><code>\E&nbsp;</code>escape</dt><dt><code>\f&nbsp;</code>form feed</dt><dt><code>\n&nbsp;</code>new line</dt><dt><code>\r&nbsp;</code>carriage return</dt><dt><code>\t&nbsp;</code>horizontal tab</dt><dt><code>\v&nbsp;</code>vertical tab</dt><dt><code>\\&nbsp;</code>backslash</dt><dt><code>\0<var>nnn&nbsp;</var></code>the eight-bit character whose value is the octal value&nbsp;<var>nnn</var>&nbsp;(zero to three octal digits)</dt><dt><code>\x<var>HH&nbsp;</var></code>the eight-bit character whose value is the hexadecimal value&nbsp;<var>HH</var>&nbsp;(one or two hex digits)</dt><dt><code>\u<var>HHHH&nbsp;</var></code>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value&nbsp;<var>HHHH</var>&nbsp;(one to four hex digits)</dt><dt><code>\U<var>HHHHHHHH&nbsp;</var></code>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value&nbsp;<var>HHHHHHHH</var>&nbsp;(one to eight hex digits)</dt></dl></div>"		bash
bash builtin&nbsp;enable	bash	builtin			enable	"<p>Enable and disable builtin shell commands. Disabling a builtin allows a disk command which has the same name as a shell builtin to be executed without specifying a full pathname, even though the shell normally searches for builtins before disk commands. If <samp>-n</samp> is used, the <var>name</var>s become disabled.  Otherwise <var>name</var>s are enabled.  For example, to use the <code>test</code> binary found via <code>$PATH</code> instead of the shell builtin version, type ‘<samp>enable -n test</samp>’. </p> <p>If the <samp>-p</samp> option is supplied, or no <var>name</var> arguments appear, a list of shell builtins is printed.  With no other arguments, the list consists of all enabled shell builtins. The <samp>-a</samp> option means to list each builtin with an indication of whether or not it is enabled.  </p> <p>The <samp>-f</samp> option means to load the new builtin command <var>name</var> from shared object <var>filename</var>, on systems that support dynamic loading. The <samp>-d</samp> option will delete a builtin loaded with <samp>-f</samp>. </p> <p>If there are no options, a list of the shell builtins is displayed. The <samp>-s</samp> option restricts <code>enable</code> to the <small>POSIX</small> special builtins.  If <samp>-s</samp> is used with <samp>-f</samp>, the new builtin becomes a special builtin (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Special-Builtins.html#Special-Builtins"">Special Builtins</a>). </p> <p>The return status is zero unless a <var>name</var> is not a shell builtin or there is an error loading a new builtin from a shared object. </p>"	enable [-a] [-dnps] [-f <var>filename</var>] [<var>name</var> …]		bash
bash builtin&nbsp;help	bash	builtin			help	"<p>Display helpful information about builtin commands. If <var>pattern</var> is specified, <code>help</code> gives detailed help on all commands matching <var>pattern</var>, otherwise a list of the builtins is printed. </p> <p>Options, if supplied, have the following meanings: </p> <dl compact=""compact""> <dt><code>-d</code></dt> <dd><p>Display a short description of each <var>pattern</var> </p></dd> <dt><code>-m</code></dt> <dd><p>Display the description of each <var>pattern</var> in a manpage-like format </p></dd> <dt><code>-s</code></dt> <dd><p>Display only a short usage synopsis for each <var>pattern</var> </p></dd> </dl> <p>The return status is zero unless no command matches <var>pattern</var>. </p>"	help [-dms] [<var>pattern</var>]		bash marked
bash builtin&nbsp;let	bash	builtin			let	"<p>The <code>let</code> builtin allows arithmetic to be performed on shell variables.  Each <var>expression</var> is evaluated according to the rules given below in <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html#Shell-Arithmetic"">Shell Arithmetic</a>.  If the last <var>expression</var> evaluates to 0, <code>let</code> returns 1; otherwise 0 is returned. </p>"	let <var>expression</var> [<var>expression</var> …]		bash
bash builtin&nbsp;local	bash	builtin			local	<p>For each argument, a local variable named <var>name</var> is created, and assigned <var>value</var>. The <var>option</var> can be any of the options accepted by <code>declare</code>. <code>local</code> can only be used within a function; it makes the variable <var>name</var> have a visible scope restricted to that function and its children. If <var>name</var> is ‘<samp>-</samp>’, the set of shell options is made local to the function in which <code>local</code> is invoked: shell options changed using the <code>set</code> builtin inside the function are restored to their original values when the function returns. The return status is zero unless <code>local</code> is used outside a function, an invalid <var>name</var> is supplied, or <var>name</var> is a readonly variable. </p>	local [<var>option</var>] <var>name</var>[=<var>value</var>] …		bash
bash builtin&nbsp;mapfile	bash	builtin			mapfile	"<p>Read lines from the standard input into the indexed array variable <var>array</var>, or from file descriptor <var>fd</var> if the <samp>-u</samp> option is supplied. The variable <code>MAPFILE</code> is the default <var>array</var>. Options, if supplied, have the following meanings: </p> <dl compact=""compact""> <dt><code>-d</code></dt> <dd><p>The first character of <var>delim</var> is used to terminate each input line, rather than newline. </p></dd> <dt><code>-n</code></dt> <dd><p>Copy at most <var>count</var> lines.  If <var>count</var> is 0, all lines are copied. </p></dd> <dt><code>-O</code></dt> <dd><p>Begin assigning to <var>array</var> at index <var>origin</var>. The default index is 0. </p></dd> <dt><code>-s</code></dt> <dd><p>Discard the first <var>count</var> lines read. </p></dd> <dt><code>-t</code></dt> <dd><p>Remove a trailing <var>delim</var> (default newline) from each line read. </p></dd> <dt><code>-u</code></dt> <dd><p>Read lines from file descriptor <var>fd</var> instead of the standard input. </p></dd> <dt><code>-C</code></dt> <dd><p>Evaluate <var>callback</var> each time <var>quantum</var>P lines are read. The <samp>-c</samp> option specifies <var>quantum</var>. </p></dd> <dt><code>-c</code></dt> <dd><p>Specify the number of lines read between each call to <var>callback</var>. </p></dd> </dl> <p>If <samp>-C</samp> is specified without <samp>-c</samp>, the default quantum is 5000. When <var>callback</var>  is evaluated, it is supplied the index of the next array element to be assigned and the line to be assigned to that element as additional arguments. <var>callback</var> is evaluated after the line is read but before the array element is assigned. </p> <p>If not supplied with an explicit origin, <code>mapfile</code> will clear <var>array</var> before assigning to it. </p> <p><code>mapfile</code> returns successfully unless an invalid option or option argument is supplied, <var>array</var> is invalid or unassignable, or <var>array</var> is not an indexed array. </p>"	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin&nbsp;logout	bash	builtin			logout <i>[<b>n</b>]</i>	Exit a login shell, returning a status of <var>n</var> to the shell’s parent.			bash
bash builtin&nbsp;printf	bash	builtin			printf	"<p>Write the formatted <var>arguments</var> to the standard output under the control of the <var>format</var>. The <samp>-v</samp> option causes the output to be assigned to the variable <var>var</var> rather than being printed to the standard output. </p> <p>The <var>format</var> is a character string which contains three types of objects: plain characters, which are simply copied to standard output, character escape sequences, which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive <var>argument</var>. In addition to the standard <code>printf(1)</code> formats, <code>printf</code> interprets the following extensions: </p> <dl compact=""compact""> <dt><code>%b</code></dt> <dd><p>Causes <code>printf</code> to expand backslash escape sequences in the corresponding <var>argument</var> in the same way as <code>echo -e</code> (see <a href=""#Bash-Builtins"">Bash Builtins</a>). </p></dd> <dt><code>%q</code></dt> <dd><p>Causes <code>printf</code> to output the corresponding <var>argument</var> in a format that can be reused as shell input. </p></dd> <dt><code>%(<var>datefmt</var>)T</code></dt> <dd><p>Causes <code>printf</code> to output the date-time string resulting from using <var>datefmt</var> as a format string for <code>strftime</code>(3). The corresponding <var>argument</var> is an integer representing the number of seconds since the epoch. Two special argument values may be used: -1 represents the current time, and -2 represents the time the shell was invoked. If no argument is specified, conversion behaves as if -1 had been given. This is an exception to the usual <code>printf</code> behavior. </p></dd> </dl> <p>Arguments to non-string format specifiers are treated as C language constants, except that a leading plus or minus sign is allowed, and if the leading character is a single or double quote, the value is the ASCII value of the following character. </p> <p>The <var>format</var> is reused as necessary to consume all of the <var>arguments</var>. If the <var>format</var> requires more <var>arguments</var> than are supplied, the extra format specifications behave as if a zero value or null string, as appropriate, had been supplied.  The return value is zero on success, non-zero on failure. </p>"	printf [-v <var>var</var>] <var>format</var> [<var>arguments</var>]		bash
bash builtin&nbsp;read	bash	builtin			read	"<p>One line is read from the standard input, or from the file descriptor <var>fd</var> supplied as an argument to the <samp>-u</samp> option, split into words as described above in <a href=""https://www.gnu.org/software/bash/manual/html_node/Word-Splitting.html#Word-Splitting"">Word Splitting</a>, and the first word is assigned to the first <var>name</var>, the second word to the second <var>name</var>, and so on. If there are more words than names, the remaining words and their intervening delimiters are assigned to the last <var>name</var>. If there are fewer words read from the input stream than names, the remaining names are assigned empty values. The characters in the value of the <code>IFS</code> variable are used to split the line into words using the same rules the shell uses for expansion (described above in <a href=""https://www.gnu.org/software/bash/manual/html_node/Word-Splitting.html#Word-Splitting"">Word Splitting</a>). The backslash character ‘<samp>\</samp>’ may be used to remove any special meaning for the next character read and for line continuation. If no names are supplied, the line read is assigned to the variable <code>REPLY</code>. The exit status is zero, unless end-of-file is encountered, <code>read</code> times out (in which case the status is greater than 128), a variable assignment error (such as assigning to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument to <samp>-u</samp>. </p> <p>Options, if supplied, have the following meanings: </p> <dl compact=""compact""> <dt><code>-a <var>aname</var></code></dt> <dd><p>The words are assigned to sequential indices of the array variable <var>aname</var>, starting at 0. All elements are removed from <var>aname</var> before the assignment. Other <var>name</var> arguments are ignored. </p> </dd> <dt><code>-d <var>delim</var></code></dt> <dd><p>The first character of <var>delim</var> is used to terminate the input line, rather than newline. </p> </dd> <dt><code>-e</code></dt> <dd><p>Readline (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Command-Line-Editing.html#Command-Line-Editing"">Command Line Editing</a>) is used to obtain the line. Readline uses the current (or default, if line editing was not previously active) editing settings. </p> </dd> <dt><code>-i <var>text</var></code></dt> <dd><p>If Readline is being used to read the line, <var>text</var> is placed into the editing buffer before editing begins. </p> </dd> <dt><code>-n <var>nchars</var></code></dt> <dd><p><code>read</code> returns after reading <var>nchars</var> characters rather than waiting for a complete line of input, but honors a delimiter if fewer than <var>nchars</var> characters are read before the delimiter. </p> </dd> <dt><code>-N <var>nchars</var></code></dt> <dd><p><code>read</code> returns after reading exactly <var>nchars</var> characters rather than waiting for a complete line of input, unless EOF is encountered or <code>read</code> times out. Delimiter characters encountered in the input are not treated specially and do not cause <code>read</code> to return until <var>nchars</var> characters are read. The result is not split on the characters in <code>IFS</code>; the intent is that the variable is assigned exactly the characters read (with the exception of backslash; see the <samp>-r</samp> option below). </p> </dd> <dt><code>-p <var>prompt</var></code></dt> <dd><p>Display <var>prompt</var>, without a trailing newline, before attempting to read any input. The prompt is displayed only if input is coming from a terminal. </p> </dd> <dt><code>-r</code></dt> <dd><p>If this option is given, backslash does not act as an escape character. The backslash is considered to be part of the line. In particular, a backslash-newline pair may not be used as a line continuation. </p> </dd> <dt><code>-s</code></dt> <dd><p>Silent mode.  If input is coming from a terminal, characters are not echoed. </p> </dd> <dt><code>-t <var>timeout</var></code></dt> <dd><p>Cause <code>read</code> to time out and return failure if a complete line of input (or a specified number of characters) is not read within <var>timeout</var> seconds. <var>timeout</var>  may be a decimal number with a fractional portion following the decimal point. This option is only effective if <code>read</code> is reading input from a terminal, pipe, or other special file; it has no effect when reading from regular files. If <code>read</code> times out, <code>read</code> saves any partial input read into the specified variable <var>name</var>. If <var>timeout</var> is 0, <code>read</code> returns immediately, without trying to read and data.  The exit status is 0 if input is available on the specified file descriptor, non-zero otherwise. The exit status is greater than 128 if the timeout is exceeded. </p> </dd> <dt><code>-u <var>fd</var></code></dt> <dd><p>Read input from file descriptor <var>fd</var>. </p></dd> </dl>"	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin&nbsp;readarray	bash	builtin			readarray	<p>Read lines from the standard input into the indexed array variable <var>array</var>, or from file descriptor <var>fd</var> if the <samp>-u</samp> option is supplied. </p> <p>A synonym for <code>mapfile</code>. </p>	readarray [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin&nbsp;source	bash	builtin			source	"<p>A synonym for <code>.</code> (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins"">Bourne Shell Builtins</a>). </p>"	source <var>filename</var>		bash
bash builtin&nbsp;type	bash	builtin			type	<p>For each <var>name</var>, indicate how it would be interpreted if used as a command name. </p> <p>If the <samp>-t</samp> option is used, <code>type</code> prints a single word which is one of ‘<samp>alias</samp>’, ‘<samp>function</samp>’, ‘<samp>builtin</samp>’, ‘<samp>file</samp>’ or ‘<samp>keyword</samp>’, if <var>name</var> is an alias, shell function, shell builtin, disk file, or shell reserved word, respectively. If the <var>name</var> is not found, then nothing is printed, and <code>type</code> returns a failure status. </p> <p>If the <samp>-p</samp> option is used, <code>type</code> either returns the name of the disk file that would be executed, or nothing if <samp>-t</samp> would not return ‘<samp>file</samp>’. </p> <p>The <samp>-P</samp> option forces a path search for each <var>name</var>, even if <samp>-t</samp> would not return ‘<samp>file</samp>’. </p> <p>If a command is hashed, <samp>-p</samp> and <samp>-P</samp> print the hashed value, which is not necessarily the file that appears first in <code>$PATH</code>. </p> <p>If the <samp>-a</samp> option is used, <code>type</code> returns all of the places that contain an executable named <var>file</var>. This includes aliases and functions, if and only if the <samp>-p</samp> option is not also used. </p> <p>If the <samp>-f</samp> option is used, <code>type</code> does not attempt to find shell functions, as with the <code>command</code> builtin. </p> <p>The return status is zero if all of the <var>names</var> are found, non-zero if any are not found. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin&nbsp;typeset	bash	builtin			typeset	<p>The <code>typeset</code> command is supplied for compatibility with the Korn shell. It is a synonym for the <code>declare</code> builtin command. </p>	typeset [-afFgrxilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin&nbsp;ulimit	bash	builtin			ulimit	"<p><code>ulimit</code> provides control over the resources available to processes started by the shell, on systems that allow such control.  If an option is given, it is interpreted as follows: </p> <dl compact=""compact""> <dt><code>-S</code></dt> <dd><p>Change and report the soft limit associated with a resource. </p> </dd> <dt><code>-H</code></dt> <dd><p>Change and report the hard limit associated with a resource. </p> </dd> <dt><code>-a</code></dt> <dd><p>All current limits are reported. </p> </dd> <dt><code>-b</code></dt> <dd><p>The maximum socket buffer size. </p> </dd> <dt><code>-c</code></dt> <dd><p>The maximum size of core files created. </p> </dd> <dt><code>-d</code></dt> <dd><p>The maximum size of a process’s data segment. </p> </dd> <dt><code>-e</code></dt> <dd><p>The maximum scheduling priority (""nice""). </p> </dd> <dt><code>-f</code></dt> <dd><p>The maximum size of files written by the shell and its children. </p> </dd> <dt><code>-i</code></dt> <dd><p>The maximum number of pending signals. </p> </dd> <dt><code>-k</code></dt> <dd><p>The maximum number of kqueues that may be allocated. </p> </dd> <dt><code>-l</code></dt> <dd><p>The maximum size that may be locked into memory. </p> </dd> <dt><code>-m</code></dt> <dd><p>The maximum resident set size (many systems do not honor this limit). </p> </dd> <dt><code>-n</code></dt> <dd><p>The maximum number of open file descriptors (most systems do not allow this value to be set). </p> </dd> <dt><code>-p</code></dt> <dd><p>The pipe buffer size. </p> </dd> <dt><code>-q</code></dt> <dd><p>The maximum number of bytes in POSIX message queues. </p> </dd> <dt><code>-r</code></dt> <dd><p>The maximum real-time scheduling priority. </p> </dd> <dt><code>-s</code></dt> <dd><p>The maximum stack size. </p> </dd> <dt><code>-t</code></dt> <dd><p>The maximum amount of cpu time in seconds. </p> </dd> <dt><code>-u</code></dt> <dd><p>The maximum number of processes available to a single user. </p> </dd> <dt><code>-v</code></dt> <dd><p>The maximum amount of virtual memory available to the shell, and, on some systems, to its children. </p> </dd> <dt><code>-x</code></dt> <dd><p>The maximum number of file locks. </p> </dd> <dt><code>-P</code></dt> <dd><p>The maximum number of pseudoterminals. </p> </dd> <dt><code>-T</code></dt> <dd><p>The maximum number of threads. </p></dd> </dl> <p>If <var>limit</var> is given, and the <samp>-a</samp> option is not used, <var>limit</var> is the new value of the specified resource. The special <var>limit</var> values <code>hard</code>, <code>soft</code>, and <code>unlimited</code> stand for the current hard limit, the current soft limit, and no limit, respectively. A hard limit cannot be increased by a non-root user once it is set; a soft limit may be increased up to the value of the hard limit. Otherwise, the current value of the soft limit for the specified resource is printed, unless the <samp>-H</samp> option is supplied. When setting new limits, if neither <samp>-H</samp> nor <samp>-S</samp> is supplied, both the hard and soft limits are set. If no option is given, then <samp>-f</samp> is assumed.  Values are in 1024-byte increments, except for <samp>-t</samp>, which is in seconds; <samp>-p</samp>, which is in units of 512-byte blocks; <samp>-P</samp>, <samp>-T</samp>, <samp>-b</samp>, <samp>-k</samp>, <samp>-n</samp> and <samp>-u</samp>, which are unscaled values; and, when in <small>POSIX</small> Mode (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html#Bash-POSIX-Mode"">Bash POSIX Mode</a>), <samp>-c</samp> and <samp>-f</samp>, which are in 512-byte increments. </p> <p>The return status is zero unless an invalid option or argument is supplied, or an error occurs while setting a new limit. </p>"	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin&nbsp;unalias	bash	builtin			unalias	"<p>Remove each <var>name</var> from the list of aliases.  If <samp>-a</samp> is supplied, all aliases are removed. Aliases are described in <a href=""https://www.gnu.org/software/bash/manual/html_node/Aliases.html#Aliases"">Aliases</a>. </p>"	unalias [-a] [<var>name</var> … ]		bash
basic lockfile implementation	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">if</span> <span style=""color: #d0d0d0"">[</span> ! -e <span style=""color: #40ffff"">$lockfile</span> <span style=""color: #d0d0d0"">];</span> <span style=""color: #6ab825; font-weight: bold"">then</span> <span style=""background-color: #404040"">   <span style=""color: #24909d"">trap</span> <span style=""color: #ed9d13"">""rm -f </span><span style=""color: #40ffff"">$lockfile</span><span style=""color: #ed9d13"">; exit""</span> INT TERM EXIT </span>   touch <span style=""color: #40ffff"">$lockfile</span>    critical-section    rm <span style=""color: #40ffff"">$lockfile</span> <span style=""background-color: #404040"">   <span style=""color: #24909d"">trap</span> - INT TERM EXIT </span><span style=""color: #6ab825; font-weight: bold"">else</span>    <span style=""color: #24909d"">echo</span> <span style=""color: #ed9d13"">""critical-section is already running""</span> <span style=""color: #6ab825; font-weight: bold"">fi</span> </pre></div> <p>It’s worth pointing out that there is a slight race condition in the above lock example between the time we test for the lockfile and the time we create it.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNTQ2MTYsICJpZCI6ICIxNDk1MjU0NDAzOTE3LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaCBobF9saW5lcz0mcXVvdDsyIDYmcXVvdDtcbiAgICBpZiBbICEgLWUgJGxvY2tmaWxlIF07IHRoZW5cbiAgICAgICB0cmFwICZxdW90O3JtIC1mICRsb2NrZmlsZTsgZXhpdCZxdW90OyBJTlQgVEVSTSBFWElUXG4gICAgICAgdG91Y2ggJGxvY2tmaWxlXG4gICAgICAgY3JpdGljYWwtc2VjdGlvblxuICAgICAgIHJtICRsb2NrZmlsZVxuICAgICAgIHRyYXAgLSBJTlQgVEVSTSBFWElUXG4gICAgZWxzZVxuICAgICAgIGVjaG8gJnF1b3Q7Y3JpdGljYWwtc2VjdGlvbiBpcyBhbHJlYWR5IHJ1bm5pbmcmcXVvdDtcbiAgICBmaVxuICBcbkl0XHUyMDE5cyB3b3J0aCBwb2ludGluZyBvdXQgdGhhdCB0aGVyZSBpcyBhIHNsaWdodCByYWNlIGNvbmRpdGlvbiBpbiB0aGUgYWJvdmUgbG9jayBleGFtcGxlIGJldHdlZW4gdGhlIHRpbWUgd2UgdGVzdCBmb3IgdGhlIGxvY2tmaWxlIGFuZCB0aGUgdGltZSB3ZSBjcmVhdGUgaXQuXG4ifQ==---->"					
bash builtin echo \uHHHH	echo	escape sequence			\u<var>HHHH</var>	the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value <var>HHHH</var> (one to four hex digits)			
bash builtin echo&nbsp;\U<var>HHHHHHHH</var>	echo	escape sequence			\U<var>HHHHHHHH</var>	the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value <var>HHHHHHHH</var> (one to eight hex digits)			
bash builtin bind -m	bind		-m <var>keymap</var>			<p>Use <var>keymap</var> as the keymap to be affected by the subsequent bindings.  Acceptable <var>keymap</var> names are <code>emacs</code>, <code>emacs-standard</code>, <code>emacs-meta</code>, <code>emacs-ctlx</code>, <code>vi</code>, <code>vi-move</code>, <code>vi-command</code>, and <code>vi-insert</code>. <code>vi</code> is equivalent to <code>vi-command</code> (<code>vi-move</code> is also a synonym); <code>emacs</code> is equivalent to <code>emacs-standard</code>. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -l	bind		-l			<p>List the names of all Readline functions. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -p	bind		-p			<p>List current Readline function names and bindings. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -P	bind		-P			<p>List current Readline function names and bindings. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -v	bind		-v			<p>List current Readline variable names and values. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -V	bind		-V			<p>List current Readline variable names and values. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -s	bind		-s			<p>Display Readline key sequences bound to macros and the strings they output. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -S	bind		-S			<p>Display Readline key sequences bound to macros and the strings they output. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -f	bind		-f <var>filename</var>			<p>Read key bindings from <var>filename</var>. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -q	bind		-q <var>function</var>			<p>Query about which keys invoke the named <var>function</var>. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -u	bind		-u <var>function</var>			<p>Unbind all keys bound to the named <var>function</var>. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -r	bind		-r <var>keyseq</var>			<p>Remove any current binding for <var>keyseq</var>. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -x	bind		-x <var>keyseq:shell-command</var>			<p>List all key sequences bound to shell commands and the associated commands in a format that can be reused as input. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin bind -X	bind		-X			<p>List all key sequences bound to shell commands and the associated commands in a format that can be reused as input. </p>	bind [-m <var>keymap</var>] [-lpsvPSVX] bind [-m <var>keymap</var>] [-q <var>function</var>] [-u <var>function</var>] [-r <var>keyseq</var>] bind [-m <var>keymap</var>] -f <var>filename</var> bind [-m <var>keymap</var>] -x <var>keyseq:shell-command</var> bind [-m <var>keymap</var>] <var>keyseq:function-name</var> bind [-m <var>keymap</var>] <var>keyseq:readline-command</var>		bash
bash builtin declare -p	declare		-p			<p>The <samp>-p</samp> option will display the attributes and values of each <var>name</var>. When <samp>-p</samp> is used with <var>name</var> arguments, additional options, other than <samp>-f</samp> and <samp>-F</samp>, are ignored. </p> <p>When <samp>-p</samp> is supplied without <var>name</var> arguments, <code>declare</code> will display the attributes and values of all variables having the attributes specified by the additional options. If no other options are supplied with <samp>-p</samp>, <code>declare</code> will display the attributes and values of all shell variables.  The <samp>-f</samp> option will restrict the display to shell functions. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -F	declare		-F			"<p>The <samp>-F</samp> option inhibits the display of function definitions; only the function name and attributes are printed. If the <code>extdebug</code> shell option is enabled using <code>shopt</code> (see <a href=""https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin"">The Shopt Builtin</a>), the source file name and line number where each <var>name</var> is defined are displayed as well. <samp>-F</samp> implies <samp>-f</samp>. </p>"	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -g	declare		-g			<p>The <samp>-g</samp> option forces variables to be created or modified at the global scope, even when <code>declare</code> is executed in a shell function. It is ignored in all other cases. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -a	declare		-a			"<p>Each <var>name</var> is an indexed array variable (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Arrays.html#Arrays"">Arrays</a>). </p>"	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -A	declare		-A			"<p>Each <var>name</var> is an associative array variable (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Arrays.html#Arrays"">Arrays</a>). </p>"	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -f	declare		-f			<p>Use function names only. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -i	declare		-i			"<p>The variable is to be treated as an integer; arithmetic evaluation (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html#Shell-Arithmetic"">Shell Arithmetic</a>) is performed when the variable is assigned a value. </p>"	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -l	declare		-l			<p>When the variable is assigned a value, all upper-case characters are converted to lower-case. The upper-case attribute is disabled. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -r	declare		-r			<p>Make <var>name</var>s readonly.  These names cannot then be assigned values by subsequent assignment statements or unset. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -t	declare		-t			<p>Give each <var>name</var> the <code>trace</code> attribute. Traced functions inherit the <code>DEBUG</code> and <code>RETURN</code> traps from the calling shell. The trace attribute has no special meaning for variables. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -u	declare		-u			<p>When the variable is assigned a value, all lower-case characters are converted to upper-case. The lower-case attribute is disabled. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin declare -x	declare		-x			<p>Mark each <var>name</var> for export to subsequent commands via the environment. </p>	declare [-aAfFgilnrtux] [-p] [<var>name</var>[=<var>value</var>] …]		bash
bash builtin help	bash	builtin			help	<p>Display helpful information about builtin commands. If <var>pattern</var> is specified, <code>help</code> gives detailed help on all commands matching <var>pattern</var>, otherwise a list of the builtins is printed. </p> <p>The return status is zero unless no command matches <var>pattern</var>. </p>	help [-dms] [<var>pattern</var>]		bash
bash builtin help -d	help		-d			<p>Display a short description of each <var>pattern</var> </p>	help [-dms] [<var>pattern</var>]		bash
bash builtin help -m	help		-m			<p>Display the description of each <var>pattern</var> in a manpage-like format </p>	help [-dms] [<var>pattern</var>]		bash
bash builtin help -s	help		-s			<p>Display only a short usage synopsis for each <var>pattern</var> </p>	help [-dms] [<var>pattern</var>]		bash
bash builtin mapfile -d	mapfile		-d			<p>The first character of <var>delim</var> is used to terminate each input line, rather than newline. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -n	mapfile		-n			<p>Copy at most <var>count</var> lines.  If <var>count</var> is 0, all lines are copied. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -O	mapfile		-O			<p>Begin assigning to <var>array</var> at index <var>origin</var>. The default index is 0. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -s	mapfile		-s			<p>Discard the first <var>count</var> lines read. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -t	mapfile		-t			<p>Remove a trailing <var>delim</var> (default newline) from each line read. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -u	mapfile		-u			<p>Read lines from file descriptor <var>fd</var> instead of the standard input. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -C	mapfile		-C			<p>Evaluate <var>callback</var> each time <var>quantum</var>P lines are read. The <samp>-c</samp> option specifies <var>quantum</var>. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin mapfile -c	mapfile		-c			<p>Specify the number of lines read between each call to <var>callback</var>. </p>	mapfile [-d <var>delim</var>] [-n <var>count</var>] [-O <var>origin</var>] [-s <var>count</var>] [-t] [-u <var>fd</var>]     [-C <var>callback</var>] [-c <var>quantum</var>] [<var>array</var>]		bash
bash builtin printf %b	printf		%q			<p>Causes <code>printf</code> to output the corresponding <var>argument</var> in a format that can be reused as shell input. </p>	printf [-v <var>var</var>] <var>format</var> [<var>arguments</var>]		bash
bash builtin printf %(datefmt)T	printf		%(<var>datefmt</var>)T			<p>Causes <code>printf</code> to output the date-time string resulting from using <var>datefmt</var> as a format string for <code>strftime</code>. The corresponding <var>argument</var> is an integer representing the number of seconds since the epoch. Two special argument values may be used: <code>-1</code> represents the current time, and <code>-2</code> represents the time the shell was invoked. If no argument is specified, conversion behaves as if <code>-1</code> had been given. This is an exception to the usual <code>printf</code> behavior. </p>	printf [-v <var>var</var>] <var>format</var> [<var>arguments</var>]		bash
bash builtin read	bash	builtin			read	"<p>One line is read from the standard input, or from the file descriptor <var>fd</var> supplied as an argument to the <samp>-u</samp> option, split into words as described above in <a href=""https://www.gnu.org/software/bash/manual/html_node/Word-Splitting.html#Word-Splitting"">Word Splitting</a>, and the first word is assigned to the first <var>name</var>, the second word to the second <var>name</var>, and so on. If there are more words than names, the remaining words and their intervening delimiters are assigned to the last <var>name</var>. If there are fewer words read from the input stream than names, the remaining names are assigned empty values. The characters in the value of the <code>IFS</code> variable are used to split the line into words using the same rules the shell uses for expansion (described above in <a href=""https://www.gnu.org/software/bash/manual/html_node/Word-Splitting.html#Word-Splitting"">Word Splitting</a>). The backslash character ‘<samp>\</samp>’ may be used to remove any special meaning for the next character read and for line continuation. If no names are supplied, the line read is assigned to the variable <code>REPLY</code>. The exit status is zero, unless end-of-file is encountered, <code>read</code> times out (in which case the status is greater than 128), a variable assignment error (such as assigning to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument to <samp>-u</samp>. </p>"	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -a	read		-a <var>aname</var>			<p>The words are assigned to sequential indices of the array variable <var>aname</var>, starting at 0. All elements are removed from <var>aname</var> before the assignment. Other <var>name</var> arguments are ignored. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -d	read		-d <var>delim</var>			<p>The first character of <var>delim</var> is used to terminate the input line, rather than newline. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -e	read		-e			"<p>Readline (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Command-Line-Editing.html#Command-Line-Editing"">Command Line Editing</a>) is used to obtain the line. Readline uses the current (or default, if line editing was not previously active) editing settings. </p>"	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -i	read		-i <var>text</var>			<p>If Readline is being used to read the line, <var>text</var> is placed into the editing buffer before editing begins. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -n	read		-n <var>nchars</var>			<p><code>read</code> returns after reading <var>nchars</var> characters rather than waiting for a complete line of input, but honors a delimiter if fewer than <var>nchars</var> characters are read before the delimiter. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -N	read		-N <var>nchars</var>			<p><code>read</code> returns after reading exactly <var>nchars</var> characters rather than waiting for a complete line of input, unless EOF is encountered or <code>read</code> times out. Delimiter characters encountered in the input are not treated specially and do not cause <code>read</code> to return until <var>nchars</var> characters are read. The result is not split on the characters in <code>IFS</code>; the intent is that the variable is assigned exactly the characters read (with the exception of backslash; see the <samp>-r</samp> option below). </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -p	read		-p <var>prompt</var>			<p>Display <var>prompt</var>, without a trailing newline, before attempting to read any input. The prompt is displayed only if input is coming from a terminal. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -r	read		-r			<p>If this option is given, backslash does not act as an escape character. The backslash is considered to be part of the line. In particular, a backslash-newline pair may not be used as a line continuation. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -s	read		-s			<p>Silent mode.  If input is coming from a terminal, characters are not echoed. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -t	read		-t <var>timeout</var>			<p>Cause <code>read</code> to time out and return failure if a complete line of input (or a specified number of characters) is not read within <var>timeout</var> seconds. <var>timeout</var>  may be a decimal number with a fractional portion following the decimal point. This option is only effective if <code>read</code> is reading input from a terminal, pipe, or other special file; it has no effect when reading from regular files. If <code>read</code> times out, <code>read</code> saves any partial input read into the specified variable <var>name</var>. If <var>timeout</var> is 0, <code>read</code> returns immediately, without trying to read and data.  The exit status is 0 if input is available on the specified file descriptor, non-zero otherwise. The exit status is greater than 128 if the timeout is exceeded. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin read -u	read		-u <var>fd</var>			<p>Read input from file descriptor <var>fd</var>. </p>	read [-ers] [-a <var>aname</var>] [-d <var>delim</var>] [-i <var>text</var>] [-n <var>nchars</var>]     [-N <var>nchars</var>] [-p <var>prompt</var>] [-t <var>timeout</var>] [-u <var>fd</var>] [<var>name</var> …]		bash
bash builtin type	bash	builtin			type	<p>For each <var>name</var>, indicate how it would be interpreted if used as a command name. </p><p>The return status is zero if all of the <var>names</var> are found, non-zero if any are not found. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin type -t	type		-t			<p>If the <samp>-t</samp> option is used, <code>type</code> prints a single word which is one of ‘<samp>alias</samp>’, ‘<samp>function</samp>’, ‘<samp>builtin</samp>’, ‘<samp>file</samp>’ or ‘<samp>keyword</samp>’, if <var>name</var> is an alias, shell function, shell builtin, disk file, or shell reserved word, respectively. If the <var>name</var> is not found, then nothing is printed, and <code>type</code> returns a failure status. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin type -p	type		-p			<p>If the <samp>-p</samp> option is used, <code>type</code> either returns the name of the disk file that would be executed, or nothing if <samp>-t</samp> would not return ‘<samp>file</samp>’.</p> <p>If a command is hashed, <samp>-p</samp> and <samp>-P</samp> print the hashed value, which is not necessarily the file that appears first in <code>$PATH</code>. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin type -P	type		-P			<p>The <samp>-P</samp> option forces a path search for each <var>name</var>, even if <samp>-t</samp> would not return ‘<samp>file</samp>’. </p> <p>If a command is hashed, <samp>-p</samp> and <samp>-P</samp> print the hashed value, which is not necessarily the file that appears first in <code>$PATH</code>. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin type -a	type		-a			<p>If the <samp>-a</samp> option is used, <code>type</code> returns all of the places that contain an executable named <var>file</var>. This includes aliases and functions, if and only if the <samp>-p</samp> option is not also used. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin type -f	type		-f			<p>If the <samp>-f</samp> option is used, <code>type</code> does not attempt to find shell functions, as with the <code>command</code> builtin. </p> <p>The return status is zero if all of the <var>names</var> are found, non-zero if any are not found. </p>	type [-afptP] [<var>name</var> …]		bash
bash builtin ulimit -S	ulimit		-S			<p>Change and report the soft limit associated with a resource. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -H	ulimit		-H			<p>Change and report the hard limit associated with a resource. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -a	ulimit		-a			<p>All current limits are reported. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -b	ulimit		-b			<p>The maximum socket buffer size. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -c	ulimit		-c			<p>The maximum size of core files created. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -d	ulimit		-d			<p>The maximum size of a process’s data segment. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -e	ulimit		-e			"<p>The maximum scheduling priority (""nice""). </p>"	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -f	ulimit		-f			<p>The maximum size of files written by the shell and its children. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -i	ulimit		-i			<p>The maximum number of pending signals. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -k	ulimit		-k			<p>The maximum number of kqueues that may be allocated. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -l	ulimit		-l			<p>The maximum size that may be locked into memory. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -m	ulimit		-m			<p>The maximum resident set size (many systems do not honor this limit). </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -n	ulimit		-n			<p>The maximum number of open file descriptors (most systems do not allow this value to be set). </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -p	ulimit		-p			<p>The pipe buffer size. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -q	ulimit		-q			<p>The maximum number of bytes in POSIX message queues. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -r	ulimit		-r			<p>The maximum real-time scheduling priority. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -s	ulimit		-s			<p>The maximum stack size. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -t	ulimit		-t			<p>The maximum amount of cpu time in seconds. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -u	ulimit		-u			<p>The maximum number of processes available to a single user. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -v	ulimit		-v			<p>The maximum amount of virtual memory available to the shell, and, on some systems, to its children. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -x	ulimit		-x			<p>The maximum number of file locks. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -P	ulimit		-P			<p>The maximum number of pseudoterminals. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
bash builtin ulimit -T	ulimit		-T			<p>The maximum number of threads. </p>	ulimit [-HSabcdefiklmnpqrstuvxPT] [<var>limit</var>]		bash
Bourne Shell builtin&nbsp;test	test	variant			[	<p>Evaluate a conditional expression <var>expr</var> and return a status of 0 (true) or 1 (false). Each operator and operand must be a separate argument. Expressions are composed of primaries.&nbsp;This builtin does not accept any options, nor does it accept and ignore an argument of <samp><code>--</code></samp> as signifying the end of options.</p>	"<!--anki--><p>When the&nbsp;<code>[</code>&nbsp;form is used, the last argument to the command must be a&nbsp;<code>]</code>.</p><p>Expressions may be combined using the following operators, listed in decreasing order of precedence. The evaluation depends on the number of arguments; see below. Operator precedence is used when there are five or more arguments.</p><dl compact=""compact""><dt><code>!&nbsp;<var>expr</var></code></dt><dd><p>True if&nbsp;<var>expr</var>&nbsp;is false.</p></dd><dt><code>(&nbsp;<var>expr</var>&nbsp;)</code></dt><dd><p>Returns the value of&nbsp;<var>expr</var>. This may be used to override the normal precedence of operators.</p></dd><dt><code><var>expr1</var>&nbsp;-a&nbsp;<var>expr2</var></code></dt><dd><p>True if both&nbsp;<var><code>expr1</code></var>&nbsp;and&nbsp;<var><code>expr2</code></var>&nbsp;are true.</p></dd><dt><code><var>expr1</var>&nbsp;-o&nbsp;<var>expr2</var></code></dt><dd><p>True if either&nbsp;<var><code>expr1</code></var>&nbsp;or&nbsp;<var><code>expr2</code></var>&nbsp;is true.</p></dd></dl><p>The&nbsp;<code>test</code>&nbsp;and&nbsp;<code>[</code>&nbsp;builtins evaluate conditional expressions using a set of rules based on the number of arguments.</p><dl compact=""compact""><dt>0 arguments</dt><dd><p>The expression is false.</p></dd><dt>1 argument</dt><dd><p>The expression is true if and only if the argument is not null.</p></dd><dt>2 arguments</dt><dd><p>If the first argument is&nbsp;<samp><code>!</code></samp>, the expression is true if and only if the second argument is null. If the first argument is one of the unary conditional operators (see&nbsp;<a href=""file:///Users/cgorichanaz/Library/Application%20Support/Anki2/User%201/collection.media/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions"">Bash Conditional Expressions</a>), the expression is true if the unary test is true. If the first argument is not a valid unary operator, the expression is false.</p></dd><dt>3 arguments</dt><dd><p>The following conditions are applied in the order listed. If the second argument is one of the binary conditional operators (see&nbsp;<a href=""file:///Users/cgorichanaz/Library/Application%20Support/Anki2/User%201/collection.media/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions"">Bash Conditional Expressions</a>), the result of the expression is the result of the binary test using the first and third arguments as operands. The&nbsp;<samp><code>-a</code></samp>&nbsp;and&nbsp;<samp><code>-o</code></samp>&nbsp;operators are considered binary operators when there are three arguments. If the first argument is&nbsp;<samp><code>!</code></samp>, the value is the negation of the two-argument test using the second and third arguments. If the first argument is exactly&nbsp;<samp><code>(</code></samp>&nbsp;and the third argument is exactly&nbsp;<samp><code>)</code></samp>, the result is the one-argument test of the second argument. Otherwise, the expression is false.</p></dd><dt>4 arguments</dt><dd><p>If the first argument is&nbsp;<samp><code>!</code></samp>, the result is the negation of the three-argument expression composed of the remaining arguments. Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above.</p></dd><dt>5 or more arguments</dt><dd><p>The expression is parsed and evaluated according to precedence using the rules listed above.</p></dd></dl><p>When used with&nbsp;<code>test</code>&nbsp;or&nbsp;<samp><code>[</code></samp>, the&nbsp;<samp><code>&lt;</code></samp>&nbsp;and&nbsp;<samp><code>&gt;</code></samp>&nbsp;operators sort lexicographically using ASCII ordering.</p>"	y	
bash&nbsp;Bourne Shell builtin :	bash	Bourne Shell builtin			:	<p>Do nothing beyond expanding <var>arguments</var> and performing redirections. The return status is zero.</p>	: [<var>arguments</var>]		bash
bash&nbsp;Bourne Shell builtin .	bash	Bourne Shell builtin			.	<p>Read and execute commands from the <var>filename</var> argument in the current shell context.  If <var>filename</var> does not contain a slash, the <code>PATH</code> variable is used to find <var>filename</var>. When Bash is not in <small>POSIX</small> mode, the current directory is searched if <var>filename</var> is not found in <code>$PATH</code>. If any <var>arguments</var> are supplied, they become the positional parameters when <var>filename</var> is executed.  Otherwise the positional parameters are unchanged. If the <samp>-T</samp> option is enabled,&nbsp;<strike>source</strike>&nbsp;inherits any trap on <code>DEBUG</code>; if it is not, any <code>DEBUG</code> trap string is saved and restored around the call to&nbsp;<strike>source</strike>, and&nbsp;<strike>source</strike>&nbsp;unsets the <code>DEBUG</code> trap while it executes. If <samp>-T</samp> is not set, and the <strike>sourced</strike> file changes the <code>DEBUG</code> trap, the new value is retained when&nbsp;<strike>source</strike>&nbsp;completes. The return status is the exit status of the last command executed, or zero if no commands are executed.  If <var>filename</var> is not found, or cannot be read, the return status is non-zero. This builtin is equivalent to <code><strike>source</strike></code>.</p>	.<var>filename</var> [<var>arguments</var>]		bash
bash&nbsp;Bourne Shell builtin break	bash	Bourne Shell builtin			break <i>[<b>n</b>]</i>	<p>Exit from a <code>for</code>, <code>while</code>, <code>until</code>, or <code>select</code> loop. If <var>n</var> is supplied, the <var>n</var>th enclosing loop is exited.&nbsp;<var>n</var> must be greater than or equal to 1. The return status is zero unless <var>n</var> is not greater than or equal to 1.</p>	break [<var>n</var>]		bash
bash&nbsp;Bourne Shell builtin cd	bash	Bourne Shell builtin			cd <i>DIR</i>	<p>Change the current working directory to <var><code>DIR</code></var>. If&nbsp;<var><code>DIR</code></var>&nbsp;is not supplied, the value of the <code>HOME</code> shell variable is used. Any additional arguments following&nbsp;<var><code>DIR</code></var>&nbsp;are ignored. If the shell variable&nbsp;<code><strike>CDPATH</strike></code>&nbsp;exists, it is used as a search path: each directory name in <code><strike>CDPATH</strike></code> is searched for&nbsp;<var><code>DIR</code></var>, with alternative directory names in&nbsp;<code><strike>CDPATH</strike></code>&nbsp;separated by a colon (<samp>:</samp>). If&nbsp;<var><code>DIR</code></var>&nbsp;begins with a slash,&nbsp;<code><strike>CDPATH</strike></code>&nbsp;is not used.</p><p><code><strike>cd</strike> [-L|[-P [-e]] [-@] [<i>DIR</i>]</code></p>	<div>The&nbsp;<samp>-P</samp>&nbsp;option means to not follow symbolic links: symbolic links are resolved while traversing&nbsp;<var><code>DIR</code></var>&nbsp;and before processing an instance of&nbsp;<samp>..</samp>&nbsp;in&nbsp;<var><code>DIR</code></var>.</div><div><p>By default, or when the&nbsp;<samp>-L</samp>&nbsp;option is supplied, symbolic links in&nbsp;<var><code>DIR</code></var>&nbsp;are resolved after processing an instance of&nbsp;<samp>..</samp>&nbsp;in&nbsp;<var><code>DIR</code></var>.</p><p>If&nbsp;<samp>..</samp>&nbsp;appears in&nbsp;<var><code>DIR</code></var>, it is processed by removing the immediately preceding pathname component, back to a slash or the beginning of&nbsp;<var><code>DIR</code></var>.</p><p>If the&nbsp;<samp>-e</samp>&nbsp;option is supplied with&nbsp;<samp>-P</samp>&nbsp;and the current working directory cannot be successfully determined after a successful directory change, an unsuccessful status will be returned.</p><p>On systems that support it, the&nbsp;<samp>-@</samp>&nbsp;option presents the extended attributes associated with a file as a directory.&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;</p><p>If&nbsp;<var><code>DIR</code></var>&nbsp;is&nbsp;<samp><code>-</code></samp>, it is converted to&nbsp;<code>$OLDPWD</code>&nbsp;before the directory change is attempted.</p><p>If a non-empty directory name from&nbsp;<code>CDPATH</code>&nbsp;is used, or if&nbsp;<samp><code>-</code></samp>&nbsp;is the first argument, and the directory change is successful, the absolute pathname of the new working directory is written to the standard output.</p><p>The return status is zero if the directory is successfully changed, non-zero otherwise.</p></div>		bash
bash&nbsp;Bourne Shell builtin continue	bash	Bourne Shell builtin			continue&nbsp;[<var>n</var>]	<p>Resume the next iteration of an enclosing <code>for</code>, <code>while</code>, <code>until</code>, or <code>select</code> loop. If <var>n</var> is supplied, the execution of the <var>n</var>th enclosing loop is resumed.<var>n</var> must be greater than or equal to 1. The return status is zero unless <var>n</var> is not greater than or equal to 1.</p>			bash
bash&nbsp;Bourne Shell builtin eval	bash	Bourne Shell builtin			eval	<p>The arguments are concatenated together into a single command, which is then read and executed, and its exit status returned as the exit status of <code><strike>eval</strike></code>. If there are no arguments or only empty arguments, the return status is zero.</p>	eval [<var>arguments</var>]		bash
bash&nbsp;Bourne Shell builtin exec	bash	Bourne Shell builtin			exec	<p>If <var>command</var> is supplied, it replaces the shell without creating a new process. If the <samp>-l</samp> option is supplied, the shell places a dash at the beginning of the zeroth argument passed to <var>command</var>. This is what the <code>login</code> program does. The <samp>-c</samp> option causes <var>command</var> to be executed with an empty environment. If <samp>-a</samp> is supplied, the shell passes <var>name</var> as the zeroth argument to <var>command</var>. If <var>command</var> cannot be executed for some reason, a non-interactive shell exits, unless the <code>execfail</code> shell option is enabled.  In that case, it returns failure. An interactive shell returns failure if the file cannot be executed. If no <var>command</var> is specified, redirections may be used to affect the current shell environment.  If there are no redirection errors, the return status is zero; otherwise the return status is non-zero.</p>	exec [-cl] [-a <var>name</var>] [<var>command</var> [<var>arguments</var>]]		bash
bash&nbsp;Bourne Shell builtin exit	bash	Bourne Shell builtin			exit&nbsp;[n]	<p>Exit the shell, returning a status of <var>n</var> to the shell&rsquo;s parent. If <var>n</var> is omitted, the exit status is that of the last command executed. Any trap on <code>EXIT</code> is executed before the shell terminates.</p>	exit [<var>n</var>]		bash
bash&nbsp;Bourne Shell builtin export	bash	Bourne Shell builtin			export	<p>Mark each <var>name</var> to be passed to child processes in the environment.  If the <samp>-f</samp> option is supplied, the <var>name</var>s refer to shell functions; otherwise the names refer to shell variables. The <samp>-n</samp> option means to no longer mark each <var>name</var> for export. If no <var>names</var> are supplied, or if the <samp>-p</samp> option is given, a list of names of all exported variables is displayed. The <samp>-p</samp> option displays output in a form that may be reused as input. If a variable name is followed by =<var>value</var>, the value of the variable is set to <var>value</var>.</p><p>The return status is zero unless an invalid option is supplied, one of the names is not a valid shell variable name, or <samp>-f</samp> is supplied with a name that is not a shell function.</p>	export [-fn] [-p] [<var>name</var>[=<var>value</var>]]		bash
bash&nbsp;Bourne Shell builtin getopts	bash	Bourne Shell builtin			getopts	<p><code><strike>getopts</strike></code> is used by shell scripts to parse positional parameters.&nbsp;</p>	<code>getopts optstringname [args]</code><br /><div><br /></div><div><br /></div><div><p><var>optstring</var>&nbsp;contains the option characters to be recognized; if a character is followed by a colon, the option is expected to have an argument, which should be separated from it by whitespace. The colon (<samp>:</samp>) and question mark (<samp>?</samp>) may not be used as option characters. Each time it is invoked,&nbsp;<strike><code>getopts</code></strike>&nbsp;places the next option in the shell variable&nbsp;<var>name</var>, initializing&nbsp;<var>name</var>&nbsp;if it does not exist, and the index of the next argument to be processed into the variable&nbsp;<code>OPTIND</code>.&nbsp;<code>OPTIND</code>&nbsp;is initialized to 1 each time the shell or a shell script is invoked. When an option requires an argument,&nbsp;<strike><code>getopts</code></strike>&nbsp;places that argument into the variable&nbsp;<code>OPTARG</code>. The shell does not reset&nbsp;<code>OPTIND</code>&nbsp;automatically; it must be manually reset between multiple calls to&nbsp;<strike><code>getopts</code></strike>&nbsp;within the same shell invocation if a new set of parameters is to be used.</p><p>When the end of options is encountered,&nbsp;<strike><code>getopts</code></strike>&nbsp;exits with a return value greater than zero.&nbsp;<code>OPTIND</code>&nbsp;is set to the index of the first non-option argument, and&nbsp;<var>name</var>&nbsp;is set to&nbsp;<samp>?</samp>.</p><p><code>getopts</code>&nbsp;normally parses the positional parameters, but if more arguments are given in&nbsp;<var>args</var>,&nbsp;<strike><code>getopts</code></strike>&nbsp;parses those instead.</p><p><strike><code>getopts</code></strike>&nbsp;can report errors in two ways. If the first character of&nbsp;<var>optstring</var>&nbsp;is a colon,&nbsp;<var>silent</var>&nbsp;error reporting is used. In normal operation, diagnostic messages are printed when invalid options or missing option arguments are encountered. If the variable&nbsp;<code>OPTERR</code>&nbsp;is set to 0, no error messages will be displayed, even if the first character of&nbsp;<code>optstring</code>&nbsp;is not a colon.</p><p>If an invalid option is seen,&nbsp;<strike><code>getopts</code></strike>&nbsp;places&nbsp;<samp>?</samp>&nbsp;into&nbsp;<var>name</var>&nbsp;and, if not silent, prints an error message and unsets&nbsp;<code>OPTARG</code>. If&nbsp;<strike><code>getopts</code></strike>&nbsp;is silent, the option character found is placed in&nbsp;<code>OPTARG</code>&nbsp;and no diagnostic message is printed.</p><p>If a required argument is not found, and&nbsp;<strike><code>getopts</code></strike>&nbsp;is not silent, a question mark (<samp>?</samp>) is placed in&nbsp;<var>name</var>,&nbsp;<code>OPTARG</code>&nbsp;is unset, and a diagnostic message is printed. If&nbsp;<strike><code>getopts</code></strike>&nbsp;is silent, then a colon (<samp>:</samp>) is placed in&nbsp;<var>name</var>&nbsp;and&nbsp;<code>OPTARG</code>&nbsp;is set to the option character found.</p></div>		bash
bash&nbsp;Bourne Shell builtin hash	bash	Bourne Shell builtin			hash	<p>Each time this&nbsp;is invoked, it remembers the full pathnames of the commands specified as <var>name</var> arguments, so they need not be searched for on subsequent invocations. The commands are found by searching through the directories listed in <code>$PATH</code>. Any previously-remembered pathname is discarded. The <samp>-p</samp> option inhibits the path search, and <var>filename</var> is used as the location of <var>name</var>. The <samp>-r</samp> option causes the shell to forget all remembered locations. The <samp>-d</samp> option causes the shell to forget the remembered location of each <var>name</var>. If the <samp>-t</samp> option is supplied, the full pathname to which each <var>name</var> corresponds is printed.  If multiple <var>name</var> arguments are supplied with <samp>-t</samp> the <var>name</var> is printed before the hashed full pathname. The <samp>-l</samp> option causes output to be displayed in a format that may be reused as input. If no arguments are given, or if only <samp>-l</samp> is supplied, information about remembered commands is printed. The return status is zero unless a <var>name</var> is not found or an invalid option is supplied.</p>	hash [-r] [-p <var>filename</var>] [-dt] [<var>name</var>]		bash
bash&nbsp;Bourne Shell builtin pwd	bash	Bourne Shell builtin			pwd	<p>Print the absolute pathname of the current working directory. If the <samp>-P</samp> option is supplied, the pathname printed will not contain symbolic links. If the <samp>-L</samp> option is supplied, the pathname printed may contain symbolic links. The return status is zero unless an error is encountered while determining the name of the current directory or an invalid option is supplied.</p>	<code>pwd [-LP]</code>		bash
bash&nbsp;Bourne Shell builtin readonly	bash	Bourne Shell builtin			readonly	<p>Mark each <var>name</var> as <strike>readonly</strike>&nbsp;so the values of these names may not be changed by subsequent assignment. If the <samp>-f</samp> option is supplied, each <var>name</var> refers to a shell function. The <samp>-a</samp> option means each <var>name</var> refers to an indexed array variable; the <samp>-A</samp> option means each <var>name</var> refers to an associative array variable. If both options are supplied, <samp>-A</samp> takes precedence. If no <var>name</var> arguments are given, or if the <samp>-p</samp> option is supplied, a list of all <strike>readonly</strike> names is printed. The other options may be used to restrict the output to a subset of the set of <strike>readonly</strike> names. The <samp>-p</samp> option causes output to be displayed in a format that may be reused as input. If a variable name is followed by =<var>value</var>, the value of the variable is set to <var>value</var>. The return status is zero unless an invalid option is supplied, one of the <var>name</var> arguments is not a valid shell variable or function name, or the <samp>-f</samp> option is supplied with a name that is not a shell function.</p>	readonly [-aAf] [-p] [<var>name</var>[=<var>value</var>]] &hellip;		bash
bash&nbsp;Bourne Shell builtin return	bash	Bourne Shell builtin			return	<p>Cause a shell function to stop executing and return the value <var>n</var> to its caller. If <var>n</var> is not supplied, the return value is the exit status of the last command executed in the function. If <strike><code>return</code></strike> is executed by a trap handler, the last command used to determine the status is the last command executed before the trap handler. If&nbsp;<strike><code>return</code></strike>&nbsp;is executed during a <code>DEBUG</code> trap, the last command used to determine the status is the last command executed by the trap handler before&nbsp;<strike><code>return</code></strike>&nbsp;was invoked.&nbsp;<strike><code>return</code></strike>&nbsp;may also be used to terminate execution of a script being executed with the <code>.</code> (<code>source</code>) builtin, returning either <var>n</var> or the exit status of the last command executed within the script as the exit status of the script. If <var>n</var> is supplied, the return value is its least significant 8 bits. Any command associated with the&nbsp;<strike><code>RETURN</code></strike>&nbsp;trap is executed before execution resumes after the function or script. The return status is non-zero if&nbsp;<strike><code>return</code></strike>&nbsp;is supplied a non-numeric argument or is used outside a function and not during the execution of a script by <code>.</code> or <code>source</code>.</p>	return [<var>n</var>]		bash
bash&nbsp;Bourne Shell builtin shift	bash	Bourne Shell builtin			shift <i>n</i>	<p>Shift the positional parameters to the left by <var>n</var>. The positional parameters from <var>n</var>+1 &hellip; <code>$#</code> are renamed to <code>$1</code> &hellip; <code>$#</code>-<var>n</var>. Parameters represented by the numbers <code>$#</code> to <code>$#</code>-<var>n</var>+1 are unset.<var>n</var> must be a non-negative number less than or equal to <code>$#</code>. If <var>n</var> is zero or greater than <code>$#</code>, the positional parameters are not changed. If <var>n</var> is not supplied, it is assumed to be 1. The return status is zero unless <var>n</var> is greater than <code>$#</code> or less than zero, non-zero otherwise.</p>	shift [<var>n</var>]		bash
bash&nbsp;Bourne Shell builtin times	bash	Bourne Shell builtin			times	<p>Print out the user and system times used by the shell and its children. The return status is zero.</p>	times		bash
bash&nbsp;Bourne Shell builtin trap	bash	Bourne Shell builtin			trap	<p>The commands in <var>arg</var> are to be read and executed when the shell receives signal <var>sigspec</var>.  If <var>arg</var> is absent (and there is a single <var>sigspec</var>) or equal to ‘<samp>-</samp>’, each specified signal’s disposition is reset to the value it had when the shell was started. If <var>arg</var> is the null string, then the signal specified by each <var>sigspec</var> is ignored by the shell and commands it invokes. If <var>arg</var> is not present and <samp>-p</samp> has been supplied, the shell displays the trap commands associated with each <var>sigspec</var>. If no arguments are supplied, or only <samp>-p</samp> is given, <code>___</code> prints the list of commands associated with each signal number in a form that may be reused as shell input. The <samp>-l</samp> option causes the shell to print a list of signal names and their corresponding numbers. Each <var>sigspec</var> is either a signal name or a signal number. Signal names are case insensitive and the <code>SIG</code> prefix is optional.</p>	<code>trap [-lp] [arg] [sigspec …]</code><br /><div><br /></div><div><p>If a&nbsp;<var>sigspec</var>&nbsp;is&nbsp;<code>0</code>&nbsp;or&nbsp;<code>EXIT</code>,&nbsp;<var>arg</var>&nbsp;is executed when the shell exits. If a&nbsp;<var>sigspec</var>&nbsp;is&nbsp;<code>DEBUG</code>, the command&nbsp;<var>arg</var>&nbsp;is executed before every simple command,&nbsp;<code>for</code>&nbsp;command,&nbsp;<code>case</code>&nbsp;command,&nbsp;<code>select</code>&nbsp;command, every arithmetic&nbsp;<code>for</code>&nbsp;command, and before the first command executes in a shell function. Refer to the description of the&nbsp;<code>extdebug</code>&nbsp;option to the&nbsp;<code>shopt</code>&nbsp;builtin for details of its effect on the&nbsp;<code>DEBUG</code>&nbsp;trap. If a&nbsp;<var>sigspec</var>&nbsp;is&nbsp;<code>RETURN</code>, the command&nbsp;<var>arg</var>&nbsp;is executed each time a shell function or a script executed with the&nbsp;<code>.</code>&nbsp;or&nbsp;<code>source</code>&nbsp;builtins finishes executing.</p><p>If a&nbsp;<var>sigspec</var>&nbsp;is&nbsp;<code>ERR</code>, the command&nbsp;<var>arg</var>&nbsp;is executed whenever a pipeline (which may consist of a single simple command), a list, or a compound command returns a non-zero exit status, subject to the following conditions. The&nbsp;<code>ERR</code>&nbsp;trap is not executed if the failed command is part of the command list immediately following an&nbsp;<code>until</code>&nbsp;or&nbsp;<code>while</code>&nbsp;keyword, part of the test following the&nbsp;<code>if</code>&nbsp;or&nbsp;<code>elif</code>&nbsp;reserved words, part of a command executed in a&nbsp;<code>&amp;&amp;</code>&nbsp;or&nbsp;<code>||</code>&nbsp;list except the command following the final&nbsp;<code>&amp;&amp;</code>&nbsp;or&nbsp;<code>||</code>, any command in a pipeline but the last, or if the command’s return status is being inverted using&nbsp;<code>!</code>. These are the same conditions obeyed by the&nbsp;<code>errexit</code>&nbsp;(<samp>-e</samp>) option.</p><p>Signals ignored upon entry to the shell cannot be trapped or reset. Trapped signals that are not being ignored are reset to their original values in a subshell or subshell environment when one is created.</p><p>The return status is zero unless a&nbsp;<var>sigspec</var>&nbsp;does not specify a valid signal.</p></div>		bash
bash&nbsp;Bourne Shell builtin umask	bash	Bourne Shell builtin			umask	<p>Set the shell process&rsquo;s file creation mask to <var>mode</var>.  If <var>mode</var> begins with a digit, it is interpreted as an octal number; if not, it is interpreted as a symbolic mode mask similar to that accepted by the <code>chmod</code> command.  If <var>mode</var> is omitted, the current value of the mask is printed.  If the <samp>-S</samp> option is supplied without a <var>mode</var> argument, the mask is printed in a symbolic format. If the  <samp>-p</samp> option is supplied, and <var>mode</var> is omitted, the output is in a form that may be reused as input. The return status is zero if the mode is successfully changed or if no <var>mode</var> argument is supplied, and non-zero otherwise.</p><p>Note that when the mode is interpreted as an octal number, each number of the umask is subtracted from <code>7</code>.  Thus, a umask of <code>022</code> results in permissions of <code>755</code>.</p>	umask [-p] [-S] [<var>mode</var>]		bash
bash Bourne Shell builtin unset	bash	Bourne Shell builtin			unset	<p>Remove each variable or function <var>name</var>. If the <samp>-v</samp> option is given, each <var>name</var> refers to a shell variable and that variable is removed. If the <samp>-f</samp> option is given, the <var>name</var>s refer to shell functions, and the function definition is removed. If the <samp>-n</samp> option is supplied, and <var>name</var> is a variable with the <var>nameref</var> attribute, <var>name</var> will be unset rather than the variable it references.<samp>-n</samp> has no effect if the <samp>-f</samp> option is supplied. If no options are supplied, each <var>name</var> refers to a variable; if there is no variable by that name, any function with that name is unset. Readonly variables and functions may not be unset. The return status is zero unless a <var>name</var> is readonly.</p>	unset [-fnv] [<var>name</var>]		bash
bash builtin set	set					<p>If no options or arguments are supplied, <code>set</code> displays the names and values of all shell variables and functions, sorted according to the current locale, in a format that may be reused as input for setting or resetting the currently-set variables. Read-only variables cannot be reset. In <small>POSIX</small> mode, only shell variables are listed. </p> <p>When options are supplied, they set or unset shell attributes.</p> <p>Using <samp><code>+</code></samp>&nbsp;rather than <samp><code>-</code></samp>&nbsp;causes these options to be turned off.  The options can also be used upon invocation of the shell.  The current set of options may be found in <code>$-</code>. </p> <p>The remaining N <var>arguments</var> are positional parameters and are assigned, in order, to <code>$1</code>, <code>$2</code>, …  <code>$N</code>. The special parameter <code>#</code> is set to N. </p> <p>The return status is always zero unless an invalid option is supplied. </p>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">set</span> <span style=""color: #d0d0d0"">[</span>--abefhkmnptuvxBCEHPT<span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">[</span>-o option-name<span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">[</span>argument …<span style=""color: #d0d0d0"">]</span> <span style=""color: #24909d"">set</span> <span style=""color: #d0d0d0"">[</span>+abefhkmnptuvxBCEHPT<span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">[</span>+o option-name<span style=""color: #d0d0d0"">]</span> <span style=""color: #d0d0d0"">[</span>argument …<span style=""color: #d0d0d0"">]</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNjk3MDgsICJpZCI6ICIxNDk1MjY5NDEyMjc1LTAwNyIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIHNldCBbLS1hYmVmaGttbnB0dXZ4QkNFSFBUXSBbLW8gb3B0aW9uLW5hbWVdIFthcmd1bWVudCBcdTIwMjZdXG4gICAgc2V0IFsrYWJlZmhrbW5wdHV2eEJDRUhQVF0gWytvIG9wdGlvbi1uYW1lXSBbYXJndW1lbnQgXHUyMDI2XVxuIn0=---->"	y	bash
bash builtin set -b	set		-b	-o notify		<p>Cause the status of terminated background jobs to be reported immediately, rather than before printing the next primary prompt.</p>			bash
bash builtin set -e	set		-e	-o errexit		<p>Exit immediately if a pipeline, which may consist of a single simple command, a list, or a compound command&nbsp;returns a non-zero status. The shell does not exit if the command that fails is part of the command list immediately following a <code>while</code> or <code>until</code> keyword, part of the test in an <code>if</code> statement, part of any command executed in a <code>&amp;&amp;</code> or <code>||</code> list except the command following the final <code>&amp;&amp;</code> or <code>||</code>, any command in a pipeline but the last, or if the command’s return status is being inverted with <code>!</code>. If a compound command other than a subshell returns a non-zero status because a command failed while <samp>-e</samp> was being ignored, the shell does not exit. A trap on <code>ERR</code>, if set, is executed before the shell exits.</p><p>This option applies to the shell environment and each subshell environment separately, and may cause subshells to exit before executing all the commands in the subshell.</p><p>If a compound command or shell function executes in a context where <samp>-e</samp> is being ignored, none of the commands executed within the compound command or function body will be affected by the <samp>-e</samp> setting, even if <samp>-e</samp> is set and a command returns a failure status. If a compound command or shell function sets <samp>-e</samp> while executing in a context where <samp>-e</samp> is ignored, that setting will not have any effect until the compound command or the command containing the function call completes.</p>			bash
bash builtin set -f	set		-f	-o noglob		<p>Disable filename expansion (globbing).</p>			bash
bash builtin set -h	set		-h	-o hashall		<p>Locate and remember (hash) commands as they are looked up for execution. This option is enabled by default.</p>			bash
bash builtin set -k	set		-k	-o keyword		<p>All arguments in the form of assignment statements are placed in the environment for a command, not just those that precede the command name.</p>			bash
bash builtin set -m	set		-m	-o monitor		<p>Job control is enabled. All processes run in a separate process group. When a background job completes, the shell prints a line containing its exit status.</p>			bash
bash builtin set -n	set		-n	-o noexec		<p>Read commands but do not execute them. This may be used to check a script for syntax errors. This option is ignored by interactive shells.</p>			bash
bash builtin set -p	set		-p	-o privileged		<p>Turn on privileged mode. In this mode, the <code>$BASH_ENV</code> and <code>$ENV</code> files are not processed, shell functions are not inherited from the environment, and the <code>SHELLOPTS</code>, <code>BASHOPTS</code>, <code>CDPATH</code> and <code>GLOBIGNORE</code>variables, if they appear in the environment, are ignored. If the shell is started with the effective user (group) id not equal to the real user (group) id, and the <samp>-p</samp> option is not supplied, these actions are taken and the effective user id is set to the real user id. If the <samp>-p</samp> option is supplied at startup, the effective user id is not reset. Turning this option off causes the effective user and group ids to be set to the real user and group ids.</p>			bash
bash builtin set -t	set		-t	-o onecmd		<p>Exit after reading and executing one command.</p>			bash
bash builtin set -u	set		-u	-o nounset		<p>Treat unset variables and parameters other than the special parameters <samp><code>@</code></samp>&nbsp;or <samp><code>*</code></samp>&nbsp;as an error when performing parameter expansion. An error message will be written to the standard error, and a non-interactive shell will exit.</p>			bash
bash builtin set -v	set		-v	-o verbose		<p>Print shell input lines as they are read.</p>			bash
bash builtin set -x	set		-x	-o xtrace		<p>Print a trace of simple commands, <code>for</code> commands, <code>case&nbsp;</code>commands, <code>select</code> commands, and arithmetic <code>for</code> commands and their arguments or associated word lists after they are expanded and before they are executed.  The value of the <code>PS4&nbsp;</code>variable is expanded and the resultant value is printed before the command and its expanded arguments.</p>			bash
bash builtin set -B	set		-B	-o braceexpand		<p>The shell will perform brace expansion. This option is on by default.</p>			bash
bash builtin set -C	set		-C	-o noclobber		<p>Prevent output redirection using &lsquo;<samp>&gt;</samp>&rsquo;, &lsquo;<samp>&gt;&amp;</samp>&rsquo;, and &lsquo;<samp>&lt;&gt;</samp>&rsquo; from overwriting existing files.</p>			bash
bash builtin set -E	set		-E	-o errtrace		<p>If set, any trap on <code>ERR</code> is inherited by shell functions, command substitutions, and commands executed in a subshell environment. The <code>ERR</code> trap is normally not inherited in such cases.</p>			bash
bash builtin set -H	set		-H	-o histexpand		<p>Enable ‘<samp>!</samp>’ style history substitution (see History Interaction). This option is on by default for interactive shells.</p>			bash
bash builtin set -T	set		-T	-o functrace		<p>If set, any trap on <code>DEBUG</code> and <code>RETURN</code> are inherited by shell functions, command substitutions, and commands executed in a subshell environment. The <code>DEBUG</code> and <code>RETURN</code> traps are normally not inherited in such cases.</p>			bash
bash builtin set --	set		--			<p>If no arguments follow this option, then the positional parameters are unset.  Otherwise, the positional parameters are set to the <var>arguments</var>, even if some of them begin with a &lsquo;<samp>-</samp>&rsquo;.</p>			bash
bash builtin set -	set		-			<p>Signal the end of options, cause all remaining <var>arguments</var>to be assigned to the positional parameters.  The <samp>-x</samp>and <samp>-v</samp>  options are turned off. If there are no arguments, the positional parameters remain unchanged.</p>			bash
bash builtin shopt	shopt					<p>Toggle the values of settings controlling optional shell behavior.</p> <p><code><strike>shopt</strike> [-pqsu] [-o] [optname …]</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYxMDIyNzQsICJpZCI6ICIxNDk1MjcwOTIzOTEwLTAwNiIsICJtZCI6ICJUb2dnbGUgdGhlIHZhbHVlcyBvZiBzZXR0aW5ncyBjb250cm9sbGluZyBvcHRpb25hbCBzaGVsbCBiZWhhdmlvci5cbiAgXG5gc2hvcHQgWy1wcXN1XSBbLW9dIFtvcHRuYW1lIFx1MjAyNl1gXG4ifQ==---->	<p>The settings can be either those listed below, or, if the -o option is used, those available with the -o option to the <code>set</code> builtin command. With no options, or with the -p option, a list of all settable options is displayed, with an indication of whether or not each is set. The -p option causes output to be displayed in a form that may be reused as input.<br /> If either -s or -u is used with no optname arguments, <code>shopt</code> shows only those options which are set or unset, respectively.<br /> Unless otherwise noted, the <code>shopt</code> options are disabled (off) by default.<br /> The return status when listing options is zero if all optnames are enabled, non-zero otherwise. When setting or unsetting options, the return status is zero unless an optname is not a valid shell option.<br /> The return status when listing options is zero if all optnames are enabled, non-zero otherwise. When setting or unsetting options, the return status is zero unless an optname is not a valid shell option.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYxMDIyNDgsICJpZCI6ICIxNDk1MjcwOTIzOTEwLTAwNyIsICJtZCI6ICJUaGUgc2V0dGluZ3MgY2FuIGJlIGVpdGhlciB0aG9zZSBsaXN0ZWQgYmVsb3csIG9yLCBpZiB0aGUgLW8gb3B0aW9uIGlzIHVzZWQsIHRob3NlIGF2YWlsYWJsZSB3aXRoIHRoZSAtbyBvcHRpb24gdG8gdGhlIGBzZXRgIGJ1aWx0aW4gY29tbWFuZC4gV2l0aCBubyBvcHRpb25zLCBvciB3aXRoIHRoZSAtcCBvcHRpb24sIGEgbGlzdCBvZiBhbGwgc2V0dGFibGUgb3B0aW9ucyBpcyBkaXNwbGF5ZWQsIHdpdGggYW4gaW5kaWNhdGlvbiBvZiB3aGV0aGVyIG9yIG5vdCBlYWNoIGlzIHNldC4gVGhlIC1wIG9wdGlvbiBjYXVzZXMgb3V0cHV0IHRvIGJlIGRpc3BsYXllZCBpbiBhIGZvcm0gdGhhdCBtYXkgYmUgcmV1c2VkIGFzIGlucHV0LlxuSWYgZWl0aGVyIC1zIG9yIC11IGlzIHVzZWQgd2l0aCBubyBvcHRuYW1lIGFyZ3VtZW50cywgYHNob3B0YCBzaG93cyBvbmx5IHRob3NlIG9wdGlvbnMgd2hpY2ggYXJlIHNldCBvciB1bnNldCwgcmVzcGVjdGl2ZWx5LlxuVW5sZXNzIG90aGVyd2lzZSBub3RlZCwgdGhlIGBzaG9wdGAgb3B0aW9ucyBhcmUgZGlzYWJsZWQgKG9mZikgYnkgZGVmYXVsdC5cblRoZSByZXR1cm4gc3RhdHVzIHdoZW4gbGlzdGluZyBvcHRpb25zIGlzIHplcm8gaWYgYWxsIG9wdG5hbWVzIGFyZSBlbmFibGVkLCBub24temVybyBvdGhlcndpc2UuIFdoZW4gc2V0dGluZyBvciB1bnNldHRpbmcgb3B0aW9ucywgdGhlIHJldHVybiBzdGF0dXMgaXMgemVybyB1bmxlc3MgYW4gb3B0bmFtZSBpcyBub3QgYSB2YWxpZCBzaGVsbCBvcHRpb24uXG5UaGUgcmV0dXJuIHN0YXR1cyB3aGVuIGxpc3Rpbmcgb3B0aW9ucyBpcyB6ZXJvIGlmIGFsbCBvcHRuYW1lcyBhcmUgZW5hYmxlZCwgbm9uLXplcm8gb3RoZXJ3aXNlLiBXaGVuIHNldHRpbmcgb3IgdW5zZXR0aW5nIG9wdGlvbnMsIHRoZSByZXR1cm4gc3RhdHVzIGlzIHplcm8gdW5sZXNzIGFuIG9wdG5hbWUgaXMgbm90IGEgdmFsaWQgc2hlbGwgb3B0aW9uLlxuIn0=---->	y	bash
bash builtin shopt -p	shopt		-p			causes output to be displayed in a form that may be reused as input.	shopt [-pqsu] [-o] [<var>optname</var> …]		bash
bash builtin shopt -u	shopt		-u			Disable (unset) each <var>optname</var>.	shopt [-pqsu] [-o] [<var>optname</var> …]		bash
bash builtin shopt -q	shopt		-q			<p>Suppresses normal output; the return status indicates whether the <var>optname</var> is set or unset. If multiple <var>optname</var> arguments are given with <samp>-q</samp>, the return status is zero if all <var>optnames</var> are enabled; non-zero otherwise. </p>	shopt [-pqsu] [-o] [<var>optname</var> …]		bash
bash builtin shopt -o	shopt		-o			<p>Restricts the values of <var>optname</var> to be those defined for the <samp>-o</samp> option to the <code>set</code> builtin. </p>	shopt [-pqsu] [-o] [<var>optname</var> …]		bash
bash builtin shopt option autocd	shopt	option			autocd	<p>If set, a command name that is the name of a directory is executed as if it were the argument to the <code>cd</code> command. This option is only used by interactive shells.</p>			bash
bash builtin shopt option cdable_vars	shopt	option			cdable_vars	<p>If this is set, an argument to the <code>cd</code> builtin command that is not a directory is assumed to be the name of a variable whose value is the directory to change to.</p>			bash
bash builtin shopt option cdspell	shopt	option			cdspell	<p>If set, minor errors in the spelling of a directory component in a <code>cd</code> command will be corrected. The errors checked for are transposed characters, a missing character, and a character too many. If a correction is found, the corrected path is printed, and the command proceeds. This option is only used by interactive shells.</p>			bash
bash builtin shopt option checkhash	shopt	option			checkhash	<p>If this is set, Bash checks that a command found in the hash table exists before trying to execute it.  If a hashed command no longer exists, a normal path search is performed.</p>			bash
bash builtin shopt option checkjobs	shopt	option			checkjobs	"<p>If set, Bash lists the status of any stopped and running jobs before exiting an interactive shell.  If any jobs are running, this causes the exit to be deferred until a second exit is attempted without an intervening command (see <a href=Job-Control.html#Job-Control"">Job Control</a>). The shell always postpones exiting if any jobs are stopped.</p>"""			bash
bash builtin shopt option checkwinsize	shopt	option			checkwinsize	<p>If set, Bash checks the window size after each command  and, if necessary, updates the values of     <code>LINES</code> and <code>COLUMNS</code>.</p>			bash
bash builtin shopt option cmdhist	shopt	option			cmdhist	<p>If set, Bash attempts to save all lines of a multiple-line command in the same history entry.  This allows easy re-editing of multi-line commands.</p>			bash
bash builtin shopt option compat31	shopt	option			compat31	<p>If set, Bash changes its behavior to that of version 3.1 with respect to quoted arguments to the conditional command&rsquo;s &lsquo;<samp>=~</samp>&rsquo; operator and with respect to locale-specific string comparison when using the <code>[[</code> conditional command&rsquo;s &lsquo;<samp>&lt;</samp>&rsquo; and &lsquo;<samp>&gt;</samp>&rsquo; operators. Bash versions prior to bash-4.1 use ASCII collation and strcmp(3); bash-4.1 and later use the current locale&rsquo;s collation sequence and strcoll(3).</p>			bash
bash builtin shopt option compat32	shopt	option			compat32	<p>If set, Bash changes its behavior to that of version 3.2 with respect to locale-specific string comparison when using the <code>[[</code> conditional command&rsquo;s &lsquo;<samp>&lt;</samp>&rsquo; and &lsquo;<samp>&gt;</samp>&rsquo; operators (see previous item) and the effect of interrupting a command list. Bash versions 3.2 and earlier continue with the next command in the list after one terminates due to an interrupt.</p>			bash
bash builtin shopt option compat40	shopt	option			compat40	<p>If set, Bash changes its behavior to that of version 4.0 with respect to locale-specific string comparison when using the <code>[[</code> conditional command&rsquo;s &lsquo;<samp>&lt;</samp>&rsquo; and &lsquo;<samp>&gt;</samp>&rsquo; operators (see description of <code>compat31</code>) and the effect of interrupting a command list. Bash versions 4.0 and later interrupt the list as if the shell received the interrupt; previous versions continue with the next command in the list.</p>			bash
bash builtin shopt option compat41	shopt	option			compat41	<p>If set, Bash, when in <small>POSIX</small> mode, treats a single quote in a double-quoted parameter expansion as a special character.  The single quotes must match (an even number) and the characters between the single quotes are considered quoted.  This is the behavior of <small>POSIX</small> mode through version 4.1. The default Bash behavior remains as in previous versions.</p>			bash
bash builtin shopt option compat42	shopt	option			compat42	<p>If set, Bash does not process the replacement string in the pattern substitution word expansion using quote removal.</p>			bash
bash builtin shopt option compat43	shopt	option			compat43	<p>If set, Bash does not print a warning message if an attempt is made to use a quoted compound array assignment as an argument to <code>declare</code>, makes word expansion errors non-fatal errors that cause the current command to fail (the default behavior is to make them fatal errors that cause the shell to exit), and does not reset the loop state when a shell function is executed (this allows <code>break</code> or <code>continue</code> in a shell function to affect loops in the caller&rsquo;s context).</p>			bash
bash builtin shopt option complete_fullquote	shopt	option			complete_fullquote	<p>If set, Bash quotes all shell metacharacters in filenames and directory names when performing completion. If not set, Bash removes metacharacters such as the dollar sign from the set of characters that will be quoted in completed filenames when these metacharacters appear in shell variable references in words to be completed. This means that dollar signs in variable names that expand to directories will not be quoted; however, any dollar signs appearing in filenames will not be quoted, either. This is active only when bash is using backslashes to quote completed filenames. This variable is set by default, which is the default Bash behavior in versions through 4.2.</p>			bash
bash builtin shopt option direxpand	shopt	option			direxpand	<p>If set, Bash replaces directory names with the results of word expansion when performing filename completion.  This changes the contents of the readline editing buffer. If not set, Bash attempts to preserve what the user typed.</p>			bash
bash builtin shopt option dirspell	shopt	option			dirspell	<p>If set, Bash attempts spelling correction on directory names during word completion  if the directory name initially supplied does not exist.</p>			bash
bash builtin shopt option dotglob	shopt	option			dotglob	<p>If set, Bash includes filenames beginning with&nbsp;<code>.</code> in the results of filename expansion.</p>			bash
bash builtin shopt option execfail	shopt	option			execfail	<p>If this is set, a non-interactive shell will not exit if it cannot execute the file specified as an argument to the <code>exec</code> builtin command.  An interactive shell does not exit if <code>exec</code> fails.</p>			bash
bash builtin shopt option expand_aliases	shopt	option			expand_aliases	"<p>If set, aliases are expanded as described below under Aliases, <a href=Aliases.html#Aliases"">Aliases</a>. This option is enabled by default for interactive shells.</p>"""			bash
bash builtin shopt option extdebug	shopt	option			extdebug	"<p>If set at shell invocation, arrange to execute the debugger profile before the shell starts, identical to the <samp>--debugger</samp> option. If set after invocation, behavior intended for use by debuggers is enabled: </p><ol><li> The <samp>-F</samp> option to the <code>declare</code> builtin (see <a href=Bash-Builtins.html#Bash-Builtins"">Bash Builtins</a>) displays the source file name and line number corresponding to each function name supplied as an argument.  </li><li> If the command run by the <code>DEBUG</code> trap returns a non-zero value, the next command is skipped and not executed.  </li><li> If the command run by the <code>DEBUG</code> trap returns a value of 2, and the shell is executing in a subroutine (a shell function or a shell script executed by the <code>.</code> or <code>source</code> builtins), the shell simulates a call to <code>return</code>.  </li><li><code>BASH_ARGC</code> and <code>BASH_ARGV</code> are updated as described in their descriptions (see <a href=""Bash-Variables.html#Bash-Variables"">Bash Variables</a>).  </li><li> Function tracing is enabled: command substitution, shell functions, and subshells invoked with <code>( <var>command</var> )</code> inherit the <code>DEBUG</code> and <code>RETURN</code> traps.  </li><li> Error tracing is enabled: command substitution, shell functions, and subshells invoked with <code>( <var>command</var> )</code> inherit the <code>ERR</code> trap.</li></ol>  """			bash
bash builtin shopt option extglob	shopt	option			extglob	<div>enables extended pattern matching features</div>			bash
bash builtin shopt option extquote	shopt	option			extquote	<p>If set, <code>$'<var>string</var>'</code> and <code>$&quot;<var>string</var>&quot;</code> quoting is   performed within <code>${<var>parameter</var>}</code> expansions                      enclosed in double quotes.  This option is enabled by default.  </p>			bash
bash builtin shopt option failglob	shopt	option			failglob	<p>If set, patterns which fail to match filenames during filename expansion result in an expansion error.</p>			bash
bash builtin shopt option force_fignore	shopt	option			force_fignore	"<p>If set, the suffixes specified by the <code>FIGNORE</code> shell variable cause words to be ignored when performing word completion even if the ignored words are the only possible completions. See <a href='Bash-Variables.html#Bash-Variables""'>Bash Variables</a>, for a description of <code>FIGNORE</code>. This option is enabled by default.</p>"			bash
bash builtin shopt option globasciiranges	shopt	option			globasciiranges	"<p>If set, range expressions used in pattern matching bracket expressions (see <a href=Pattern-Matching.html#Pattern-Matching"">Pattern Matching</a>) behave as if in the traditional C locale when performing comparisons.  That is, the current locale&rsquo;s collating sequence is not taken into account, so &lsquo;<samp>b</samp>&rsquo; will not collate between &lsquo;<samp>A</samp>&rsquo; and &lsquo;<samp>B</samp>&rsquo;, and upper-case and lower-case ASCII characters will collate together.    </p>"""			bash
bash builtin shopt option globstar	shopt	option			globstar	<p>If set, the pattern <samp><code>**</code></samp>&nbsp;used in a filename expansion context will match all files and zero or more directories and subdirectories. If the pattern is followed by a <samp><code>/</code></samp>, only directories and subdirectories match.</p>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">shopt</span> -s globstar <span style=""color: #6ab825; font-weight: bold"">for</span> i in **<span style=""color: #d0d0d0"">;</span> <span style=""color: #6ab825; font-weight: bold"">do</span> <span style=""color: #24909d"">echo</span> <span style=""color: #40ffff"">$i</span><span style=""color: #d0d0d0"">;</span> <span style=""color: #6ab825; font-weight: bold"">done</span>  a b b/e d d/f </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYxMDExOTEsICJpZCI6ICIxNDk1MjcxNzc1MjkxLTAwNyIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIHNob3B0IC1zIGdsb2JzdGFyXG4gICAgZm9yIGkgaW4gKio7IGRvIGVjaG8gJGk7IGRvbmVcbiAgXG4gICAgYVxuICAgIGJcbiAgICBiL2VcbiAgICBkXG4gICAgZC9mXG4ifQ==---->"		bash
bash builtin shopt option gnu_errfmt	shopt	option			gnu_errfmt	<p>If set, shell error messages are written in the standard <small>GNU</small> error message format.</p>			bash
bash builtin shopt option histappend	shopt	option			histappend	<p>If set, the history list is appended to the file named by the value of the <code>HISTFILE</code> variable when the shell exits, rather than overwriting the file.</p>			bash
bash builtin shopt option histreedit	shopt	option			histreedit	<p>If set, and Readline is being used, a user is given the opportunity to re-edit a failed history substitution.</p>			bash
bash builtin shopt option histverify	shopt	option			histverify	<p>If set, and Readline is being used, the results of history substitution are not immediately passed to the shell parser.  Instead, the resulting line is loaded into the Readline editing buffer, allowing further modification.</p>			bash
bash builtin shopt option hostcomplete	shopt	option			hostcomplete	"<p>If set, and Readline is being used, Bash will attempt to perform hostname completion when a word containing a &lsquo;<samp>@</samp>&rsquo; is being completed (see <a href=Commands-For-Completion.html#Commands-For-Completion"">Commands For Completion</a>).  This option is enabled by default.</p>"""			bash
bash builtin shopt option huponexit	shopt	option			huponexit	"<p>If set, Bash will send <code>SIGHUP</code> to all jobs when an interactive login shell exits (see <a href='Signals.html#Signals""'>Signals</a>).</p>"			bash
bash builtin shopt option inherit_errexit	shopt	option			inherit_errexit	<p>If set, command substitution inherits the value of the <code>errexit</code> option, instead of unsetting it in the subshell environment. This option is enabled when <small>POSIX</small> mode is enabled.</p>			bash
bash builtin shopt option interactive_comments	shopt	option			interactive_comments	<p>Allow a word beginning with <samp><code>#</code></samp>&nbsp;to cause that word and all remaining characters on that line to be ignored in an interactive shell. This option is enabled by default.</p>			bash
bash builtin shopt option lastpipe	shopt	option			lastpipe	<p>If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background in the current shell environment.</p>			bash
bash builtin shopt option lithist	shopt	option			lithist	<p>If enabled, and the <code>cmdhist</code> option is enabled, multi-line commands are saved to the history with embedded newlines rather than using semicolon separators where possible.</p>			bash
bash builtin shopt option login_shell	shopt	option			login_shell	"<p>The shell sets this option if it is started as a login shell (see <a href=Invoking-Bash.html#Invoking-Bash"">Invoking Bash</a>). The value may not be changed.</p>"""			bash
bash builtin shopt option mailwarn	shopt	option			mailwarn	<p>If set, and a file that Bash is checking for mail has been accessed since the last time it was checked, the message <code>&quot;The mail in <var>mailfile</var> has been read&quot;</code> is displayed.</p>			bash
bash builtin shopt option no_empty_cmd_completion	shopt	option			no_empty_cmd_completion	<p>If set, and Readline is being used, Bash will not attempt to search the <code>PATH</code> for possible completions when completion is attempted on an empty line.</p>			bash
bash builtin shopt option nocaseglob	shopt	option			nocaseglob	<p>If set, Bash matches filenames in a case-insensitive fashion when performing filename expansion.</p>			bash
bash builtin shopt option nocasematch	shopt	option			nocasematch	<p>If set, Bash matches patterns in a case-insensitive fashion when performing matching while executing <code>case</code> or <code>[[</code> conditional commands, when performing pattern substitution word expansions, or when filtering possible completions as part of programmable completion.</p>			bash
bash builtin shopt option nullglob	shopt	option			nullglob	<p>If set, Bash allows filename patterns which match no files to expand to a null string, rather than themselves.</p>			bash
bash builtin shopt option progcomp	shopt	option			progcomp	"<p>If set, the programmable completion facilities (see <a href=Programmable-Completion.html#Programmable-Completion"">Programmable Completion</a>) are enabled. This option is enabled by default.</p>"""			bash
bash builtin shopt option promptvars	shopt	option			promptvars	"<p>If set, prompt strings undergo parameter expansion, command substitution, arithmetic expansion, and quote removal after being expanded as described below (see <a href=Controlling-the-Prompt.html#Controlling-the-Prompt"">Controlling the Prompt</a>). This option is enabled by default.</p>"""			bash
bash builtin shopt option restricted_shell	shopt	option			restricted_shell	"<p>The shell sets this option if it is started in restricted mode (see <a href=The-Restricted-Shell.html#The-Restricted-Shell"">The Restricted Shell</a>). The value may not be changed. This is not reset when the startup files are executed, allowing the startup files to discover whether or not a shell is restricted.</p>"""			bash
bash builtin shopt option shift_verbose	shopt	option			shift_verbose	<p>If this is set, the <code>shift</code> builtin prints an error message when the shift count exceeds the number of positional parameters.</p>			bash
bash builtin shopt option sourcepath	shopt	option			sourcepath	<p>If set, the <code>source</code> builtin uses the value of <code>PATH</code> to find the directory containing the file supplied as an argument. This option is enabled by default.</p>			bash
bash builtin shopt option xpg_echo	shopt	option			xpg_echo	<p>If set, the <code>echo</code> builtin expands backslash-escape sequences by default.</p>			bash
bash builtin dirs	dirs					<p>Display the list of currently remembered directories.  Directories are added to the list with the <code>pushd</code> command; the <code>popd</code> command removes directories from the list. The current directory is always the first directory in the stack. </p>	dirs [-clpv] [+<var>N</var> | -<var>N</var>]	y	bash
bash builtin popd	popd					<p>When no arguments are given, <code><strike>popd</strike></code> removes the top directory from the stack and performs a <code>cd</code> to the new top directory. The elements are numbered from 0 starting at the first directory listed with <code>dirs</code>; that is, <code><strike>popd</strike></code> is equivalent to <code><strike>popd</strike> +0</code>. </p>	popd [-n] [+<var>N</var> | -<var>N</var>]	y	bash
bash builtin pushd	pushd					<p>Save the current directory on the top of the directory stack and then <code>cd</code> to <var>dir</var>. With no arguments, <code>pushd</code> exchanges the top two directories and makes the new top the current directory. </p>	pushd [-n] [<var>+N</var> | <var>-N</var> | <var>dir</var>]	y	bash
bash builtin pushd&nbsp;-n	pushd		-n			Suppresses the normal change of directory when rotating or adding directories to the stack, so that only the stack is manipulated.	pushd [-n] [<var>+N</var> | <var>-N</var> | <var>dir</var>]		bash
bash builtin pushd&nbsp;+N	pushd		+<var>N</var>			Brings the <var>N</var>th directory (counting from the left of the list printed by <code>dirs</code>, starting with zero) to the top of the list by rotating the stack.	pushd [-n] [<var>+N</var> | <var>-N</var> | <var>dir</var>]		bash
bash builtin pushd&nbsp;-N	pushd		-<var>N</var>			Brings the <var>N</var>th directory (counting from the right of the list printed by <code>dirs</code>, starting with zero) to the top of the list by rotating the stack.	pushd [-n] [<var>+N</var> | <var>-N</var> | <var>dir</var>]		bash
bash builtin pushd&nbsp;dir	pushd		<var>dir</var>			Makes <var>dir</var> be the top of the stack, making it the new current directory as if it had been supplied as an argument to the <code>cd</code> builtin.	pushd [-n] [<var>+N</var> | <var>-N</var> | <var>dir</var>]		bash
bash builtin popd -n	popd		-n			Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.	popd [-n] [+<var>N</var> | -<var>N</var>]		bash
bash builtin popd +N	popd		+<var>N</var>			Removes the <var>N</var>th directory (counting from the left of the list printed by <code>dirs</code>), starting with zero.	popd [-n] [+<var>N</var> | -<var>N</var>]		bash
bash builtin popd -N	popd		-<var>N</var>			Removes the <var>N</var>th directory (counting from the right of the list printed by <code>dirs</code>), starting with zero.	popd [-n] [+<var>N</var> | -<var>N</var>]		bash
bash builtin dirs -N	dirs		-<var>N</var>			Displays the <var>N</var>th directory (counting from the right of the list printed by <code>dirs</code> when invoked without options), starting with zero.	dirs [-clpv] [+<var>N</var> | -<var>N</var>]		bash
bash builtin dirs +N	dirs		+<var>N</var>			Displays the <var>N</var>th directory (counting from the left of the list printed by <code>dirs</code> when invoked without options), starting with zero.	dirs [-clpv] [+<var>N</var> | -<var>N</var>]		bash
bash builtin dirs -v	dirs		-v			Causes <code>dirs</code> to print the directory stack with one entry per line, prefixing each entry with its index in the stack.	dirs [-clpv] [+<var>N</var> | -<var>N</var>]		bash
bash builtin dirs -p	dirs		-p			Causes <code>dirs</code> to print the directory stack with one entry per line.	dirs [-clpv] [+<var>N</var> | -<var>N</var>]		bash
bash builtin dirs -l	dirs		-l			Produces a listing using full pathnames; the default listing format uses a tilde to denote the home directory.	dirs [-clpv] [+<var>N</var> | -<var>N</var>]		bash
bash builtin dirs -c	dirs		-c			Clears the directory stack by deleting all of the elements.	dirs [-clpv] [+<var>N</var> | -<var>N</var>]		bash
bash&nbsp;jobs&nbsp;builtin jobs -l	jobs		-l			List process IDs in addition to the normal information.	jobs [-lnprs] [<var>jobspec</var>] jobs -x <var>command</var> [<var>arguments</var>]		bash
bash&nbsp;jobs&nbsp;builtin jobs -n	jobs		-n			Display information only about jobs that have changed status since the user was last notified of their status.&nbsp;	jobs [-lnprs] [<var>jobspec</var>] jobs -x <var>command</var> [<var>arguments</var>]		bash
bash&nbsp;jobs&nbsp;builtin jobs -p	jobs		-p			List only the process ID of the job’s process group leader.	jobs [-lnprs] [<var>jobspec</var>] jobs -x <var>command</var> [<var>arguments</var>]		bash
bash&nbsp;jobs&nbsp;builtin jobs -r	jobs		-r			Display only running jobs.&nbsp;	jobs [-lnprs] [<var>jobspec</var>] jobs -x <var>command</var> [<var>arguments</var>]		bash
bash&nbsp;jobs&nbsp;builtin jobs -s	jobs		-s			Display only stopped jobs.&nbsp;	jobs [-lnprs] [<var>jobspec</var>] jobs -x <var>command</var> [<var>arguments</var>]		bash
bash jobs&nbsp;builtin jobs	jobs					The first form lists the active jobs.<div><br /></div><div>If <var>jobspec</var> is given, output is restricted to information about that job.  If <var>jobspec</var> is not supplied, the status of all jobs is listed.</div> <p>If the <samp>-x</samp> option is supplied, <code>jobs</code> replaces any <var>jobspec</var> found in <var>command</var> or <var>arguments</var> with the corresponding process group <small>ID</small>, and executes <var>command</var>, passing it <var>argument</var>s, returning its exit status.  </p>	jobs [-lnprs] [<var>jobspec</var>] jobs -x <var>command</var> [<var>arguments</var>]	y	bash
bash&nbsp;jobs&nbsp;builtin bg	bg					<p>Resume each suspended job <var>jobspec</var> in the background, as if it had been started with <samp><code>&amp;</code></samp>. If <var>jobspec</var> is not supplied, the current job is used. The return status is zero unless it is run when job control is not enabled, or, when run with job control enabled, any <var>jobspec</var> was not found or specifies a job that was started without job control. </p>	bg [<var>jobspec</var>&nbsp;…]	y	bash
bash&nbsp;jobs&nbsp;builtin fg	fg					<p>Resume the job <var>jobspec</var> in the foreground and make it the current job. If <var>jobspec</var> is not supplied, the current job is used. The return status is that of the command placed into the foreground, or non-zero if run when job control is disabled or, when run with job control enabled, <var>jobspec</var> does not specify a valid job or <var>jobspec</var> specifies a job that was started without job control. </p>	bg [<var>jobspec</var>&nbsp;…]	y	bash
bash&nbsp;jobs&nbsp;builtin kill	kill					<p>Send a signal specified by <var>sigspec</var> or <var>signum</var> to the process named by job specification <var>jobspec</var> or process <small>ID</small> <var>pid</var>. <var>sigspec</var> is either a case-insensitive signal name such as <code>SIGINT</code> (with or without the <code>SIG</code> prefix) or a signal number; <var>signum</var> is a signal number. If <var>sigspec</var> and <var>signum</var> are not present, <code>SIGTERM</code> is used. The <samp>-l</samp> option lists the signal names. If any arguments are supplied when <samp>-l</samp> is given, the names of the signals corresponding to the arguments are listed, and the return status is zero. <var>exit_status</var> is a number specifying a signal number or the exit status of a process terminated by a signal. The <samp>-L</samp> option is equivalent to <samp>-l</samp>. The return status is zero if at least one signal was successfully sent, or non-zero if an error occurs or an invalid option is encountered. </p><p>When job control is not active, the <code>kill</code> and <code>wait</code> builtins do not accept <var>jobspec</var> arguments.  They must be supplied process <var>ID</var>s.</p>	kill [-s <var>sigspec</var>] [-n <var>signum</var>] [-<var>sigspec</var>] <var>jobspec</var> or <var>pid</var> kill -l|-L [<var>exit_status</var>]	y	bash
bash jobs builtin wait	wait					<p>Wait until the child process specified by each process <small>ID</small> <var>pid</var> or job specification <var>jobspec</var> exits and return the exit status of the last command waited for. If a job spec is given, all processes in the job are waited for. If no arguments are given, all currently active child processes are waited for, and the return status is zero. If the <samp>-n</samp> option is supplied, <code>wait</code> waits for any job to terminate and returns its exit status. If neither <var>jobspec</var> nor <var>pid</var> specifies an active child process of the shell, the return status is 127. </p><p>When job control is not active, the <code>kill</code> and <code>wait</code> builtins do not accept <var>jobspec</var> arguments.  They must be supplied process <var>ID</var>s.</p>	wait [-n] [<var>jobspec</var> or <var>pid</var> …]	y	bash
bash&nbsp;jobs&nbsp;builtin disown	disown					<p>Without options, remove each <var>jobspec</var> from the table of active jobs. If the <samp>-h</samp> option is given, the job is not removed from the table, but is marked so that <code>SIGHUP</code> is not sent to the job if the shell receives a <code>SIGHUP</code>. If <var>jobspec</var> is not present, and neither the <samp>-a</samp> nor the <samp>-r</samp> option is supplied, the current job is used. If no <var>jobspec</var> is supplied, the <samp>-a</samp> option means to remove or mark all jobs; the <samp>-r</samp> option without a <var>jobspec</var> argument restricts operation to running jobs. </p>	disown [-ar] [-h] [<var>jobspec</var> … | <var>pid</var> … ]	y	bash
bash pipeline	"<p>The output of each command in the pipeline is connected via a pipe to the input of the next command. That is, each command reads the previous command’s output.  This connection is performed before any redirections specified by the command. </p> <p>If <samp><code>|&amp;</code></samp>&nbsp;is used, <var>command1</var>’s standard error, in addition to its standard output, is connected to <var>command2</var>’s standard input through the pipe; it is shorthand for <code>2&gt;&amp;1 |</code>. This implicit redirection of the standard error to the standard output is performed after any redirections specified by the command. </p> <p>The reserved word <code>time</code> causes timing statistics to be printed for the pipeline once it finishes. The statistics currently consist of elapsed (wall-clock) time and user and system time consumed by the command’s execution. The <samp>-p</samp> option changes the output format to that specified by <small>POSIX</small>. When the shell is in <small>POSIX</small> mode (see <a href=""Bash-POSIX-Mode.html#Bash-POSIX-Mode"">Bash POSIX Mode</a>), it does not recognize <code>time</code> as a reserved word if the next token begins with a <samp><code>-</code></samp>. The <code>TIMEFORMAT</code> variable may be set to a format string that specifies how the timing information should be displayed. See <a href=""Bash-Variables.html#Bash-Variables"">Bash Variables</a>, for a description of the available formats. The use of <code>time</code> as a reserved word permits the timing of shell builtins, shell functions, and pipelines.  An external <code>time</code> command cannot time these easily. </p> <p>When the shell is in <small>POSIX</small> mode (see <a href=""Bash-POSIX-Mode.html#Bash-POSIX-Mode"">Bash POSIX Mode</a>), <code>time</code> may be followed by a newline.  In this case, the shell displays the total user and system time consumed by the shell and its children. The <code>TIMEFORMAT</code> variable may be used to specify the format of the time information. </p> <p>If the pipeline is not executed asynchronously (see <a href=""Lists.html#Lists"">Lists</a>), the shell waits for all commands in the pipeline to complete. </p> <p>Each command in a pipeline is executed in its own subshell (see <a href=""Command-Execution-Environment.html#Command-Execution-Environment"">Command Execution Environment</a>).  The exit status of a pipeline is the exit status of the last command in the pipeline, unless the <code>pipefail</code> option is enabled (see <a href=""The-Set-Builtin.html#The-Set-Builtin"">The Set Builtin</a>). If <code>pipefail</code> is enabled, the pipeline’s return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit successfully. If the reserved word <samp><code>!</code></samp>&nbsp;precedes the pipeline, the exit status is the logical negation of the exit status as described above. The shell waits for all commands in the pipeline to terminate before returning a value. </p>"					bash marked
specify crontab editor	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">export </span><span style=""color: #40ffff"">EDITOR</span><span style=""color: #d0d0d0"">=</span>vi </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM0OTQsICJpZCI6ICIxNDk1MjczNDU2NTA0LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIGV4cG9ydCBFRElUT1I9dmlcbiJ9---->"		y			
crontab -e	crontab		-e			Edit crontab file, or create one if it doesn’t already exist.			
crontab -l	crontab		-l			crontab list of cronjobs , display crontab file contents.			
crontab -r	crontab		-r			Remove your crontab file.			
crontab -v	crontab		-v			Display the last time you edited your crontab file. (This option is only available on a few systems.)			
crontab syntax	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">*</span>     <span style=""color: #d0d0d0"">*</span>     <span style=""color: #d0d0d0"">*</span>   <span style=""color: #d0d0d0"">*</span>    <span style=""color: #d0d0d0"">*</span>        <span style=""color: #d0d0d0"">command</span> <span style=""color: #d0d0d0"">to</span> <span style=""color: #d0d0d0"">be</span> <span style=""color: #d0d0d0"">executed</span> <span style=""color: #d0d0d0"">-</span>     <span style=""color: #d0d0d0"">-</span>     <span style=""color: #d0d0d0"">-</span>   <span style=""color: #d0d0d0"">-</span>    <span style=""color: #d0d0d0"">-</span> <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>   <span style=""color: #d0d0d0"">|</span>    <span style=""color: #d0d0d0"">|</span> <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>   <span style=""color: #d0d0d0"">|</span>    <span style=""color: #d0d0d0"">+-----</span> <span style=""color: #d0d0d0"">day</span> <span style=""color: #d0d0d0"">of</span> <span style=""color: #d0d0d0"">week</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">0</span> <span style=""color: #d0d0d0"">-</span> <span style=""color: #3677a9"">6</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">(Sunday=</span><span style=""color: #3677a9"">0</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>   <span style=""color: #d0d0d0"">+-------</span> <span style=""color: #d0d0d0"">month</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">1</span> <span style=""color: #d0d0d0"">-</span> <span style=""color: #3677a9"">12</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">+---------</span> <span style=""color: #d0d0d0"">day</span> <span style=""color: #d0d0d0"">of</span>        <span style=""color: #d0d0d0"">month</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">1</span> <span style=""color: #d0d0d0"">-</span> <span style=""color: #3677a9"">31</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">|</span>     <span style=""color: #d0d0d0"">+-----------</span> <span style=""color: #d0d0d0"">hour</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">0</span> <span style=""color: #d0d0d0"">-</span> <span style=""color: #3677a9"">23</span><span style=""color: #d0d0d0"">)</span> <span style=""color: #d0d0d0"">+-------------</span> <span style=""color: #d0d0d0"">min</span> <span style=""color: #d0d0d0"">(</span><span style=""color: #3677a9"">0</span> <span style=""color: #d0d0d0"">-</span> <span style=""color: #3677a9"">59</span><span style=""color: #d0d0d0"">)</span> </pre></div> <ul> <li style=""text-align: left; "">Repeat pattern like <code>/2</code> for every 2 minutes or <code>/10</code> for every 10 minutes is not supported by all operating systems. If you try to use it and crontab complains it is probably not supported.</li> <li style=""text-align: left; "">The specification of days can be made in two fields: month day and weekday. If both are specified in an entry, they are cumulative meaning both of the entries will get executed .</li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM3MDQsICJpZCI6ICIxNDk1MjczNTcwODkwLTAwMSIsICJtZCI6ICIgICAgKiAgICAgKiAgICAgKiAgICogICAgKiAgICAgICAgY29tbWFuZCB0byBiZSBleGVjdXRlZFxuICAgIC0gICAgIC0gICAgIC0gICAtICAgIC1cbiAgICB8ICAgICB8ICAgICB8ICAgfCAgICB8XG4gICAgfCAgICAgfCAgICAgfCAgIHwgICAgKy0tLS0tIGRheSBvZiB3ZWVrICgwIC0gNikgKFN1bmRheT0wKVxuICAgIHwgICAgIHwgICAgIHwgICArLS0tLS0tLSBtb250aCAoMSAtIDEyKVxuICAgIHwgICAgIHwgICAgICstLS0tLS0tLS0gZGF5IG9mICAgICAgICBtb250aCAoMSAtIDMxKVxuICAgIHwgICAgICstLS0tLS0tLS0tLSBob3VyICgwIC0gMjMpXG4gICAgKy0tLS0tLS0tLS0tLS0gbWluICgwIC0gNTkpXG4gIFxuKiBSZXBlYXQgcGF0dGVybiBsaWtlIGAvMmAgZm9yIGV2ZXJ5IDIgbWludXRlcyBvciBgLzEwYCBmb3IgZXZlcnkgMTAgbWludXRlcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGFsbCBvcGVyYXRpbmcgc3lzdGVtcy4gSWYgeW91IHRyeSB0byB1c2UgaXQgYW5kIGNyb250YWIgY29tcGxhaW5zIGl0IGlzIHByb2JhYmx5IG5vdCBzdXBwb3J0ZWQuXG4qIFRoZSBzcGVjaWZpY2F0aW9uIG9mIGRheXMgY2FuIGJlIG1hZGUgaW4gdHdvIGZpZWxkczogbW9udGggZGF5IGFuZCB3ZWVrZGF5LiBJZiBib3RoIGFyZSBzcGVjaWZpZWQgaW4gYW4gZW50cnksIHRoZXkgYXJlIGN1bXVsYXRpdmUgbWVhbmluZyBib3RoIG9mIHRoZSBlbnRyaWVzIHdpbGwgZ2V0IGV4ZWN1dGVkIC5cbiJ9---->"		y			
disable crontab email	"<p>By default cron jobs sends a email to the user account executing the cronjob. If this is not needed put the following command At the end of the cron job line .</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">&gt;/dev/null 2&gt;<span style=""color: #d0d0d0"">&amp;</span>1 </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM3NjgsICJpZCI6ICIxNDk1MjczNjI4NTg2LTAwMSIsICJtZCI6ICJCeSBkZWZhdWx0IGNyb24gam9icyBzZW5kcyBhIGVtYWlsIHRvIHRoZSB1c2VyIGFjY291bnQgZXhlY3V0aW5nIHRoZSBjcm9uam9iLiBJZiB0aGlzIGlzIG5vdCBuZWVkZWQgcHV0IHRoZSBmb2xsb3dpbmcgY29tbWFuZCBBdCB0aGUgZW5kIG9mIHRoZSBjcm9uIGpvYiBsaW5lIC5cbiAgXG4gICAgOjo6YmFzaFxuICAgICZndDsvZGV2L251bGwgMiZndDsmYW1wOzFcbiJ9---->"					
crontab location on Mac OS X	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">/usr/lib/cron/tabs/ </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM4MjQsICJpZCI6ICIxNDk1MjczNzcxNjE5LTAwMSIsICJtZCI6ICIgICAgL3Vzci9saWIvY3Jvbi90YWJzL1xuIn0=---->"		y			
crontab location on&nbsp;Solaris, HP-UX, Debian, Ubuntu	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">/var/spool/cron/crontabs/ </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM4NDksICJpZCI6ICIxNDk1MjczODI4OTcyLTAwMSIsICJtZCI6ICIgICAgL3Zhci9zcG9vbC9jcm9uL2Nyb250YWJzLyBcbiJ9---->"		y			
crontab location on&nbsp;AIX, Red Hat Linux, CentOS, Ferdora	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">/var/spool/cron/ </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTUyNzM4NzYsICJpZCI6ICIxNDk1MjczODU2MjEwLTAwMSIsICJtZCI6ICIgICAgL3Zhci9zcG9vbC9jcm9uLyBcbiJ9---->"		y			
regex metacharacters	"<div> <tt class=""code""><span class=""regexerr"">\</span></tt> (backslash)<br /> <tt class=""code""><span class=""regexspecial"">^</span></tt> (caret)<br /> <tt class=""code""><span class=""regexspecial"">$</span></tt> (dollar sign)<br /> <tt class=""code""><span class=""regexspecial"">.</span></tt> (period or dot)<br /> <tt class=""code""><span class=""regexerr"">|</span></tt> (vertical bar or pipe symbol)<br /> <tt class=""code""><span class=""regexerr"">?</span></tt> (question mark)<br /> <tt class=""code""><span class=""regexerr"">*</span></tt> (asterisk or star)<br /> <tt class=""code""><span class=""regexerr"">+</span></tt> (plus sign)<br /> <tt class=""code""><span class=""regexerr"">()</span></tt> (parentheses)<br /> <tt class=""code""><span class=""regexerr"">[</span></tt> (opening square bracket)<br /> <tt class=""code""><span class=""regexplain"">{</span></tt> (opening curly brace)</div>"	"<p>Most metacharacters are errors when used alone. If you want to use any of these characters as a literal in a regex, you need to escape them with a backslash. If you forget to escape a special character where its use is not allowed, such as in&nbsp;<tt class=""code""><span class=""regexerr"">+</span><span class=""regexplain"">1</span></tt>, then you will get an error message.</p><p>Most regular expression flavors treat the brace&nbsp;<tt class=""code""><span class=""regexplain"">{</span></tt>&nbsp;as a literal character, unless it is part of a repetition operator like&nbsp;<tt class=""code""><span class=""regexplain"">a</span><span class=""regexspecial"">{1,3}</span></tt>. So you generally do not need to escape it with a backslash, though you can do so if you want. An exception to this rule is in Java, which requires all literal braces to be escaped.</p><p>All other characters should not be escaped with a backslash because the backslash is also a special character. The backslash in combination with a literal character can create a regex token with a special meaning.</p><p>Escaping a single metacharacter with a backslash works in all regular expression flavors.&nbsp;Some flavors also support the&nbsp;<tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">…</span><span class=""regexmeta"">\E</span></tt>&nbsp;escape sequence.</p>"	reverse	special characters		marked regex
regex metacharacters other than <code>\^$.|?*+()[</code>	"<tt class=""code""><span class=""regexplain"">{</span></tt> (opening curly brace) <br /><br /> Most regular expression flavors treat the brace <tt class=""code""><span class=""regexplain"">{</span></tt> as a literal character, unless it is part of a repetition operator like <tt class=""code""><span class=""regexplain"">a</span><span class=""regexspecial"">{1,3}</span></tt>. So you generally do not need to escape it with a backslash, though you can do so if you want. An exception to this rule is in&nbsp;Java, which requires all literal braces to be escaped."	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.|?*+(){</code>	"<tt class=""code""><span class=""regexerr"">[</span></tt>&nbsp;(opening square bracket)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.|?*+([{</code>	"<tt class=""code""><span class=""regexerr"">)</span></tt>&nbsp;(closing parenthesis)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.|?*+)[{</code>	"<tt class=""code""><span class=""regexerr"">(</span></tt>&nbsp;(opening parenthesis)"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.|?*()[{</code>	"<tt class=""code""><span class=""regexerr"">+</span></tt>&nbsp;(plus sign)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.|?+()[{</code>	"<tt class=""code""><span class=""regexerr"">*</span></tt>&nbsp;(asterisk or star)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.|*+()[{</code>	"<tt class=""code""><span class=""regexerr"">?</span></tt>&nbsp;(question mark)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$.?*+()[{</code>	"<tt class=""code""><span class=""regexerr"">|</span></tt>&nbsp;(vertical bar or pipe symbol)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^$|?*+()[{</code>	"<tt class=""code""><span class=""regexspecial"">.</span></tt>&nbsp;(period or dot)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\^.|?*+()[{</code>	"<tt class=""code""><span class=""regexspecial"">$</span></tt>&nbsp;(dollar sign)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\$.|?*+()[{</code>	"<tt class=""code""><span class=""regexspecial"">^</span></tt>&nbsp;(caret)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>^$.|?*+()[{</code>	"<tt class=""code""><span class=""regexerr"">\</span></tt>&nbsp;(backslash)<br />"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>\$|*([</code>	"<tt class=""code""><span class=""regexspecial"">^</span></tt>&nbsp;(caret)<br /> <tt class=""code""><span class=""regexspecial"">.</span></tt>&nbsp;(period or dot)<br /> <tt class=""code""><span class=""regexerr"">?</span></tt>&nbsp;(question mark)<br /> <tt class=""code""><span class=""regexerr"">+</span></tt>&nbsp;(plus sign)<br /> <tt class=""code""><span class=""regexerr"">)</span></tt>&nbsp;(closing parenthesis)<br /> <tt class=""code""><span class=""regexplain"">{</span></tt>&nbsp;(opening curly brace)<br /> "	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacters other than <code>^.?+){</code>	"<tt class=""code""><span class=""regexerr"">\</span></tt>&nbsp;(backslash)<br /><tt class=""code""><span class=""regexspecial"">$</span></tt>&nbsp;(dollar sign)<br /><tt class=""code""><span class=""regexerr"">|</span></tt>&nbsp;(vertical bar or pipe symbol)<br /><tt class=""code""><span class=""regexerr"">*</span></tt>&nbsp;(asterisk or star)<br /><tt class=""code""><span class=""regexerr"">(</span></tt>&nbsp;(opening parenthesis)<br /><tt class=""code""><span class=""regexerr"">[</span></tt>&nbsp;(opening square bracket)"	"<span class=""regexerr"">\</span><span class=""regexspecial"">^$.</span><span class=""regexerr"">|?*+()[</span><span class=""regexplain"">{</span>"				regex
regex metacharacter basic escape	"Escaping a single metacharacter with <tt class=""code""><span class=""regexerr"">\</span></tt> (a backslash) works in all regular expression flavors."					regex
regex metacharacter alternate escape sequence	"<p></p><p><tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">…</span><span class=""regexmeta"">\E</span></tt></p><p>Characters between&nbsp;<tt class=""code""><span class=""regexmeta"">\Q</span></tt>&nbsp;and&nbsp;<tt class=""code""><span class=""regexmeta"">\E</span></tt>&nbsp;are interpreted literally.&nbsp;<tt>\E</tt>&nbsp;may be omitted at the end of the regex.</p>"	"<p><tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">*\d+*</span><span class=""regexmeta"">\E</span></tt>&nbsp;matches the literal text&nbsp;<tt class=""match"">*\d+*</tt>.&nbsp;</p><p><tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">*\d+*</span></tt>&nbsp;is the same as&nbsp;<tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">*\d+*</span><span class=""regexmeta"">\E</span></tt>.</p><p>This syntax is supported by the JGsoft engine, Perl, PCRE, PHP, Delphi, Java, both inside and outside character classes. Java 4 and 5 have bugs that cause&nbsp;<tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">…</span><span class=""regexmeta"">\E</span></tt>&nbsp;to misbehave, however, so you shouldn’t use this syntax with Java. Boost supports it outside character classes, but not inside.</p>"				regex
regex tokens for ASCII control characters	"Many regex flavors also support the tokens <tt class=""code""><span class=""regexspecial"">\cA</span></tt> through <tt class=""code""><span class=""regexspecial"">\cZ</span></tt> to insert ASCII control characters. The letter after the backslash is always a lowercase c. The second letter is an uppercase letter A through Z, to indicate Control+A through Control+Z. These are equivalent to <tt class=""code""><span class=""regexspecial"">\x01</span></tt> through <tt class=""code""><span class=""regexspecial"">\x1A</span></tt> (26 decimal).  Most flavors allow the second letter to be lowercase, with no difference in meaning. Only Java requires the A to Z to be uppercase. <p>Using characters other than letters after<tt>\c</tt>is not recommended because the behavior is inconsistent between applications.</p>"	"<tt class=""code""><span class=""regexspecial"">\cM</span></tt> matches a carriage return, just like <tt class=""code""><span class=""regexspecial"">\r</span></tt>, <tt class=""code""><span class=""regexspecial"">\x0D</span></tt>, and <tt class=""code""><span class=""regexspecial"">\u000D</span></tt>."				regex
regex tokens for Unicode	"<tt class=""code""><span class=""regexspecial"">\u<i>FFFF</i></span></tt>&nbsp;or&nbsp;<tt class=""code""><span class=""regexspecial"">\x{<i>FFFF</i>}</span></tt>"	"If your regular expression engine supports Unicode, you can use&nbsp;<tt class=""code""><span class=""regexspecial"">\uFFFF</span></tt>&nbsp;or&nbsp;<tt class=""code""><span class=""regexspecial"">\x{FFFF}</span></tt>&nbsp;to insert a Unicode character. The euro currency sign occupies Unicode code point U+20AC. If you cannot type it on your keyboard, you can insert it into a regular expression with&nbsp;<tt class=""code""><span class=""regexspecial"">\u20AC</span></tt>&nbsp;or&nbsp;<tt class=""code""><span class=""regexspecial"">\x{20AC}</span></tt>. See the tutorial section on Unicode for more details on matching Unicode code points."				regex
regex tokens for characters if&nbsp;8-bit code pages	regex token <code>\x<i>NN</i></code>	"If your regex engine works with 8-bit code pages instead of Unicode, then you can include any character in your regular expression if you know its position in the character set that you are working with. In the Latin-1 character set, the copyright symbol is character&nbsp;<b>0xA9</b>. So to search for the copyright symbol, you can use&nbsp;<tt class=""code""><span class=""regexspecial"">\xA9</span></tt>. Another way to search for a tab is to use&nbsp;<tt class=""code""><span class=""regexspecial"">\x09</span></tt>. Note that the leading zero is required."				regex
regex octal basic escapes	"Many applications also support octal escapes in the form of <tt class=""code""><span class=""regexspecial"">\0377</span></tt> or <tt class=""code""><span class=""regexspecial"">\377</span></tt>, where 377 is the octal representation of the character's position in the character set (255 decimal in this case). There is a lot of variation between regex flavors as to the number of octal digits allowed or required after the backslash, whether the leading zero is required or not allowed, and whether <tt class=""code""><span class=""regexspecial"">\0</span></tt> without additional digits matches a NULL byte. In some flavors this causes complications as <tt class=""code""><span class=""regexspecial"">\1</span></tt> to <tt class=""code""><span class=""regexspecial"">\77</span></tt> can be octal escapes 1 to 63 (decimal) or backreferences 1 to 77 (decimal), depending on how many capturing groups there are in the regex. Therefore, using these octal escapes in regexes is strongly discouraged. Use hexadecimal escapes instead."					regex
regex octal new escapes	"Perl 5.14, PCRE 8.34, PHP 5.5.10, and R 3.0.3 support a new syntax <tt class=""code""><span class=""regexspecial"">\o{377}</span></tt> for octal escapes. You can have any number of octal digits between the curly braces, with or without leading zero. There is no confusion with backreferences and literal digits that follow are cleanly separated by the closing curly brace. Do be careful to only put octal digits between the curly braces. In Perl, <tt class=""code""><span class=""regexspecial"">\o{whatever}</span></tt> is not an error but matches a NULL byte.<div><br /></div><div>The JGsoft flavor originally supported octal escapes in the form of <tt class=""code""><span class=""regexspecial"">\0377</span></tt>. JGsoft V2 supports <tt class=""code""><span class=""regexspecial"">\o{377}</span></tt> and treats <tt class=""code""><span class=""regexerr"">\0377</span></tt> as an error.</div>"					regex
regex Unicode escapes in Python gotchas	"A similar issue exists in Python <b>3.2</b> and prior with the Unicode escape <tt class=""code""><span class=""regexspecial"">\uFFFF</span></tt>. Python has supported this syntax as part of (Unicode) string literals ever since Unicode support was added to Python. But Python’s <code>re</code> module only supports <tt class=""code""><span class=""regexspecial"">\uFFFF</span></tt> starting with Python <b>3.3</b>. In Python <b>3.2</b> and earlier, <tt class=""code""><span class=""regexspecial"">\uFFFF</span></tt> works when you add your regex as a literal (Unicode) string to your Python code. But when your Python <b>3.2</b> script reads the regex from a file or user input, <tt class=""code""><span class=""regexescaped"">\u</span><span class=""regexplain"">FFFF</span></tt> matches <tt class=""match"">uFFFF</tt> literally as the regex engine sees <tt class=""code""><span class=""regexescaped"">\u</span></tt> as an escaped literal <tt class=""code""><span class=""regexplain"">u</span></tt>."					regex
regex engine main types	text-directed and regex-directed					regex
How does a regex-directed regex engine work?	It walks through the regex, attempting to match the next token in the regex to the next character. If a match is found, the engine advances through the regex and the subject string. If a token fails to match, the engine backtracks to a previous position in the regex and the subject string where it can try a different path through the regex.	Modern regex flavors using regex-directed engines have lots of features such as atomic grouping and possessive quantifiers that allow you to control this backtracking.&nbsp;Nearly all modern regex flavors are based on regex-directed engines. This is because certain very useful features, such as lazy quantifiers and backreferences, can only be implemented in regex-directed engines.	reverse			regex
How a text-directed regex engine works	It walks through the subject string, attempting all permutations of the regex before advancing to the next character in the string.	It never backtracks.	reverse			regex
regex engines return rightmost or leftmost matches?	leftmost	"<div>This is a very important point to understand:&nbsp;a regex engine always returns the&nbsp;<i>leftmost</i>&nbsp;match, even if a ""better"" match could be found later. When applying a regex to a string, the engine starts at the first character of the string. It tries all possible permutations of the regular expression at the first character. Only if all possibilities have been tried and found to fail, does the engine continue with the second character in the text. Again, it tries all possible permutations of the regex, in exactly the same order. The result is that the regex engine returns the&nbsp;<i>leftmost</i>&nbsp;match.</div><div><br /></div><div>When applying&nbsp;<tt class=""code""><span class=""regexplain"">cat</span></tt>&nbsp;to&nbsp;<tt class=""string"">He captured a catfish for his cat.</tt>, the engine tries to match the first token in the regex&nbsp;<tt class=""code""><span class=""regexplain"">c</span></tt>&nbsp;to the first character in the match&nbsp;<tt class=""string"">H</tt>. This fails. There are no other possible permutations of this regex, because it merely consists of a sequence of literal characters. So the regex engine tries to match the&nbsp;<tt class=""code""><span class=""regexplain"">c</span></tt>&nbsp;with the&nbsp;<tt class=""string"">e</tt>. This fails too, as does matching the&nbsp;<tt class=""code""><span class=""regexplain"">c</span></tt>&nbsp;with the space. Arriving at the 4th character in the string,&nbsp;<tt class=""code""><span class=""regexplain"">c</span></tt>&nbsp;matches&nbsp;<tt class=""match"">c</tt>. The engine then tries to match the second token&nbsp;<tt class=""code""><span class=""regexplain"">a</span></tt>&nbsp;to the 5th character,&nbsp;<tt class=""match"">a</tt>. This succeeds too. But then,&nbsp;<tt class=""code""><span class=""regexplain"">t</span></tt>&nbsp;fails to match&nbsp;<tt class=""string"">p</tt>. At that point, the engine knows the regex cannot be matched starting at the 4th character in the string. So it continues with the 5th:&nbsp;<tt class=""string"">a</tt>. Again,&nbsp;<tt class=""code""><span class=""regexplain"">c</span></tt>&nbsp;fails to match here and the engine carries on. At the 15th character in the string,&nbsp;<tt class=""code""><span class=""regexplain"">c</span></tt>&nbsp;again matches&nbsp;<tt class=""match"">c</tt>. The engine then proceeds to attempt to match the remainder of the regex at character 15 and finds that&nbsp;<tt class=""code""><span class=""regexplain"">a</span></tt>&nbsp;matches&nbsp;<tt class=""match"">a</tt>&nbsp;and&nbsp;<tt class=""code""><span class=""regexplain"">t</span></tt>&nbsp;matches&nbsp;<tt class=""match"">t</tt>.<p>The entire regular expression could be matched starting at character 15. The engine is ""eager"" to report a match. It therefore reports the first three letters of catfish as a valid match. The engine never proceeds beyond this point to see if there are any ""better"" matches. The first match is considered good enough.</p></div>"				regex
regex character class basic syntax	"Simply place the characters you want to match between square brackets.&nbsp;A character class matches only a single character.&nbsp;The order of the characters inside a character class does not matter.<p>Use a hyphen inside a character class to specify a range of characters. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span></tt> matches a <i>single</i> digit between 0 and 9. You can use more than one range. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">f</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">F</span><span class=""regexccopen"">]</span></tt> matches a single hexadecimal digit, case insensitively. You can combine ranges and single characters. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">f</span><span class=""regexccliteral"">x</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">F</span><span class=""regexccliteral"">X</span><span class=""regexccopen"">]</span></tt> matches a hexadecimal digit or the letter X. Again, the order of the characters and the ranges does not matter.</p>"			character set		regex
regex negated character class syntax	"Typing a caret after the opening square bracket negates the character class. The result is that the character class matches any character that is <i>not</i> in the character class. Unlike the dot, negated character classes also match (invisible) line break characters. If you don't want a negated character class to match line breaks, you need to include the line break characters in the class. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">\r</span><span class=""regexccspecial"">\n</span><span class=""regexccopen"">]</span></tt> matches any character that is not a digit or a line break. <p>It is important to remember that a negated character class still must match a character. <tt class=""code""><span class=""regexplain"">q</span><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">u</span><span class=""regexccopen"">]</span></tt> does <em>not</em> mean: ""a q not followed by a u"". It means: ""a q followed by a character that is not a u"". It does not match the q in the string <tt class=""string"">Iraq</tt>. It does match the q and the space after the q in <tt class=""string"">Iraq is a country</tt>. Indeed: the space becomes part of the overall match, because it is the ""character that is not a u"" that is matched by the negated character class in the above regexp. If you want the regex to match the q, and only the q, in both strings, you need to use negative lookahead: <tt class=""code""><span class=""regexplain"">q</span><span class=""regexnest1"">(?!</span><span class=""regexplain"">u</span><span class=""regexnest1"">)</span></tt>.</p>"					regex
regex: Does <code>[^0-9]</code> match linebreaks?	Yes	"Negated character classes also match (invisible) line break characters. If you don’t want a negated character class to match line breaks, you need to include the line break characters in the class.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">\r</span><span class=""regexccspecial"">\n</span><span class=""regexccopen"">]</span></tt>&nbsp;matches any character that is not a digit or a line break."				marked regex
regex: Do metacharacters always need to be escaped?	<div>No, not usually in character classes.</div>	"In most regex flavors, the only special characters or metacharacters inside a character class are the closing bracket&nbsp;<tt>]</tt>, the backslash&nbsp;<tt>\</tt>, the caret&nbsp;<tt>^</tt>, and the hyphen&nbsp;<tt>-</tt>. The usual metacharacters are normal characters inside a character class, and do not need to be escaped by a backslash. To search for a star or plus, use&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">+*</span><span class=""regexccopen"">]</span></tt>. Your regex will work fine if you escape the regular metacharacters inside a character class, but doing so significantly reduces readability.<p>To include a backslash as a character without any special meaning inside a character class, you have to escape it with another backslash.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\\</span><span class=""regexccliteral"">x</span><span class=""regexccopen"">]</span></tt>&nbsp;matches a backslash or an x. The closing bracket&nbsp;<tt>]</tt>, the caret&nbsp;<tt>^</tt>&nbsp;and the hyphen&nbsp;<tt>-</tt>&nbsp;can be included by escaping them with a backslash, or by placing them in a position where they do not take on their special meaning. The POSIX and GNU flavors are an exception. They treat backslashes in character classes as literal characters. So with these flavors, you can't escape anything in character classes.</p>"				regex
regex: how to include <code>^</code> in a character class	"To include an unescaped caret as a literal, place it anywhere except right after the opening bracket. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">x^</span><span class=""regexccopen"">]</span></tt> matches an x or a caret. <div><br /></div><div>The caret&nbsp;<tt><code></code><code></code><code>^</code></tt>&nbsp;can also be included by escaping it with a backslash. The&nbsp;POSIX&nbsp;and&nbsp;GNU&nbsp;flavors are an exception. They treat backslashes in character classes as literal characters. So with these flavors, you can't escape anything in character classes.</div>"					regex
regex: how to include <code></code><code>\</code> in a character class	To include a backslash as a character without any special meaning inside a character class, you have to escape it with another backslash.<div><br /></div><div>The POSIX and GNU flavors are an exception. They treat backslashes in character classes as literal characters. So with these flavors, you can't escape anything in character classes.</div>	"<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\\</span><span class=""regexccliteral"">x</span><span class=""regexccopen"">]</span></tt>&nbsp;matches a backslash or an x."				regex
regex: how to include <code>]</code>&nbsp;in a character class	"The closing bracket <tt><code></code><code>]</code></tt>&nbsp;can be included by escaping it with a backslash.<div><br /></div><div>The POSIX and GNU flavors are an exception. They treat backslashes in character classes as literal characters. So with these flavors, you can't escape anything in character classes.<div><br /></div><div>You can include an unescaped closing bracket by placing it right after the opening bracket, or right after the negating caret. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">]x</span><span class=""regexccopen"">]</span></tt> matches a closing bracket or an x. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">]x</span><span class=""regexccopen"">]</span></tt> matches any character that is not a closing bracket or an x. This does not work in JavaScript, which treats <tt class=""code""><span class=""regexccopen"">[]</span></tt> as an empty character class that always fails to match, and <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccopen"">]</span></tt> as a negated empty character class that matches any single character. Ruby treats empty character classes as an error. So both JavaScript and Ruby require closing brackets to be escaped with a backslash to include them as literals in a character class.</div></div>"					regex
regex: how to include <code>-</code>&nbsp;in a character class	"The hyphen <code>-</code> can be included by escaping it with a backslash or by placing it in a position where it does not take on its special meaning.<div><br /></div><div>The POSIX and GNU flavors are an exception. They treat backslashes in character classes as literal characters. So with these flavors, you can't escape anything in character classes.</div><div><br /></div><div>The hyphen can be included right after the opening bracket, or right before the closing bracket, or right after the negating caret. Both <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">-x</span><span class=""regexccopen"">]</span></tt> and <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">x</span><span class=""regexccliteral"">-</span><span class=""regexccopen"">]</span></tt> match an x or a hyphen. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">-x</span><span class=""regexccopen"">]</span></tt> and <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">x</span><span class=""regexccliteral"">-</span><span class=""regexccopen"">]</span></tt> match any character thas is not an x or a hyphen. This works in all flavors discussed in this tutorial. Hyphens at other positions in character classes where they can't form a range may be interpreted as literals or as errors. Regex flavors are quite inconsistent about this.</div>"					regex
regex: Does repeating&nbsp;a character class only match repeated characters?	"If you repeat a character class by using the <tt class=""code""><span class=""regexspecial"">?</span></tt>, <tt class=""code""><span class=""regexspecial"">*</span></tt> or <tt class=""code""><span class=""regexspecial"">+</span></tt> operators, you're repeating the entire character class.&nbsp;If you want to repeat the matched character, use backreferences."	"The regex&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexspecial"">+</span></tt>&nbsp;can match&nbsp;<tt class=""match"">837</tt>&nbsp;as well as&nbsp;<tt class=""match"">222</tt>.<br /><div><tt class=""code""><span class=""regexnest1"">(</span><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexnest1"">)</span><span class=""regexspecial"">\1</span><span class=""regexspecial"">+</span></tt>&nbsp;matches&nbsp;<tt class=""match"">222</tt>&nbsp;but not&nbsp;<tt class=""string"">837</tt>. When applied to the string&nbsp;<tt class=""string"">833337</tt>, it matches&nbsp;<tt class=""match"">3333</tt>&nbsp;in the middle of this string. If you do not want that, you need to use&nbsp;lookaround.</div>"				regex
regex: exclude characters of&nbsp;one class from another class	"<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">class</span><span class=""regexccopen"">-[</span><span class=""regexccliteral"">subtract</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt><div><br /></div><div>Character class subtraction supported by XML Schema, XPath, .NET (version 2.0 and later), and JGsoft.</div>"	"<p>If the character after a hyphen is an opening bracket, these flavors interpret the hyphen as the subtraction operator rather than the range operator. You can use the full character class syntax within the subtracted character class.</p><p>The character class&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccopen"">-[</span><span class=""regexccliteral"">aeiuo</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;matches a single letter that is not a vowel. In other words: it matches a single consonant. Without character class subtraction or intersection, the only way to do this would be to list all consonants:&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">b</span><span class=""regexccrange"">-</span><span class=""regexccrange"">d</span><span class=""regexccrange"">f</span><span class=""regexccrange"">-</span><span class=""regexccrange"">h</span><span class=""regexccrange"">j</span><span class=""regexccrange"">-</span><span class=""regexccrange"">n</span><span class=""regexccrange"">p</span><span class=""regexccrange"">-</span><span class=""regexccrange"">t</span><span class=""regexccrange"">v</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccopen"">]</span></tt>.</p><p>The character class&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\p{Nd}</span><span class=""regexccopen"">-[</span><span class=""regexccspecial"">^</span><span class=""regexccspecial"">\p{IsThai}</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;matches any single Thai digit. The base class matches any Unicode digit. All non-Thai characters are subtracted from that class.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\p{Nd}</span><span class=""regexccopen"">-[</span><span class=""regexccspecial"">\P{IsThai}</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;does the same.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\p{IsThai}</span><span class=""regexccopen"">-[</span><span class=""regexccspecial"">^</span><span class=""regexccspecial"">\p{Nd}</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;and&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\p{IsThai}</span><span class=""regexccopen"">-[</span><span class=""regexccspecial"">\P{Nd}</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;also match a single Thai digit by subtracting all non-digits from the Thai characters.</p>"				regex
regex: exclude characters of&nbsp;two classes from another class	"While you can use nested character class subtraction, you cannot subtract two classes sequentially. To subtract ASCII characters and Greek characters from a class with all Unicode letters, combine the ASCII and Greek characters into one class, and subtract that, as in <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\p{L}</span><span class=""regexccopen"">-[</span><span class=""regexccspecial"">\p{IsBasicLatin}</span><span class=""regexccspecial"">\p{IsGreek}</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>.<div><br /></div><div>Character class subtraction supported by&nbsp;<b>XML Schema</b>,&nbsp;<b>XPath</b>,&nbsp;<b>.NET</b>&nbsp;(version 2.0 and later), and&nbsp;<b>JGsoft</b>.</div>"					regex
regex: Can character class subtractions be nested?	Yes, assuming character class subtractions are supported in the first place.	"Since you can use the full character class syntax within the subtracted character class, you can subtract a class from the class being subtracted.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">-[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">-[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">3</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;first subtracts&nbsp;<tt>0-3</tt>&nbsp;from&nbsp;<tt>0-6</tt>, yielding&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">-[</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>, or&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">3</span><span class=""regexccrange"">7</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span></tt>, which matches any character in the string&nbsp;<tt class=""string"">0123789</tt>.<p>The class subtraction must always be the last element in the character class.&nbsp;<tt>[0-9-[4-6]a-f]</tt>&nbsp;is not a valid regular expression. It should be rewritten as&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">f</span><span class=""regexccopen"">-[</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>. The subtraction works on the whole class. E.g.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\p{Ll}</span><span class=""regexccspecial"">\p{Lu}</span><span class=""regexccopen"">-[</span><span class=""regexccspecial"">\p{IsBasicLatin}</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;matches all uppercase and lowercase Unicode letters, except any ASCII letters. The&nbsp;<tt>\p{IsBasicLatin}</tt>&nbsp;is subtracted from the combination of&nbsp;<tt>\p{Ll}\p{Lu}</tt>&nbsp;rather than from&nbsp;<tt>\p{Lu}</tt>&nbsp;alone. This regex will not match&nbsp;<tt class=""string"">abc</tt>.</p><p>Character class subtraction supported by&nbsp;<b>XML Schema</b>,&nbsp;<b>XPath</b>,&nbsp;<b>.NET</b>&nbsp;(version 2.0 and later), and&nbsp;<b>JGsoft</b>.</p>"				regex
regex: character class negation or subtraction handled first?	<div>negation</div>	"The character class&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">1234</span><span class=""regexccopen"">-[</span><span class=""regexccliteral"">3456</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>&nbsp;is both negated and subtracted from. In all flavors that support character class subtraction, the base class is negated before it is subtracted from. This class should be read as ""(not 1234) minus 3456"". Thus this character class matches any character other than the digits 1, 2, 3, 4, 5, and 6."				regex
regex: character class subtraction in nonsupporting flavors	"<div>Usually not an error, but not as intended. For example,&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccliteral"">-[aeiuo</span><span class=""regexccopen"">]</span><span class=""regexplain"">]</span></tt>&nbsp;looks like a class containing some redundant characters followed by a literal closing bracket.</div><div><br /></div><div>Character class subtraction supported by <b>XML Schema</b>, <b>XPath</b>, <b>.NET</b> (version 2.0 and later), and <b>JGsoft</b>.</div>"	"Note that a regex like&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccliteral"">-[aeiuo</span><span class=""regexccopen"">]</span><span class=""regexplain"">]</span></tt>&nbsp;does not cause any errors in most regex flavors that do not support character class subtraction. But it won't match what you intended either. In most flavors, this regex consists of a character class followed by a literal&nbsp;<tt class=""code""><span class=""regexccopen"">]</span></tt>. The character class matches a character that is either in the range a-z, or a hyphen, or an opening bracket, or a vowel. Since the a-z range and the vowels are redundant, you could write this character class as&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccliteral"">-[</span><span class=""regexccopen"">]</span></tt>&nbsp;or&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">-[</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccopen"">]</span></tt>&nbsp;in Perl. A hyphen after a range is treated as a literal character, just like a hyphen immediately after the opening bracket. This is true in the XML, .NET and JGsoft flavors too.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccliteral"">-_</span><span class=""regexccopen"">]</span></tt>&nbsp;matches a lowercase letter, a hyphen or an underscore in these flavors.<p>Strictly speaking, this means that the character class subtraction syntax is incompatible with Perl and the majority of other regex flavors. But in practice there's no difference. Using non-alphanumeric characters in character class ranges is very bad practice because it relies on the order of characters in the ASCII character table. That makes the regular expression hard to understand for the programmer who inherits your work. While&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">[</span><span class=""regexccopen"">]</span></tt>&nbsp;would match any upper case letter or an opening square bracket in Perl, this regex is much clearer when written as&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccliteral"">[</span><span class=""regexccopen"">]</span></tt>. The former regex would cause an error with the XML, .NET and JGsoft flavors, because they interpret&nbsp;<tt>-[]</tt>&nbsp;as an empty subtracted class, leaving an unbalanced&nbsp;<tt>[</tt>.</p>"				regex
regex: character class multiple intersection	"You can intersect the same class more than once. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt> is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">]</span></tt> as those are the only digits present in all three parts of the intersection. In Java and Ruby you can write the same regex as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">]</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>, <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>, <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt>, or just <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">6</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccrange"">4</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span></tt>. The nested square brackets are only needed if one of the parts of the intersection is negated. <p>If you do not use square brackets around the right hand part of the intersection, then there is no confusion that the entire remainder of the character class is the right hand part of the intersection. If you do use the square brackets, you could write something like <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9&amp;&amp;[</span><span class=""regexccliteral"">12]</span><span class=""regexccliteral"">56</span><span class=""regexccopen"">]</span></tt>. In Ruby, this is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccliteral"">1256</span><span class=""regexccopen"">]</span></tt>. But Java has bugs that cause it to treat this as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccliteral"">56</span><span class=""regexccopen"">]</span></tt>, completely ignoring the nested brackets.</p> <p>PowerGREP does not allow anything after the nested <tt class=""code""><span class=""regexccopen"">]</span></tt>. The characters <tt class=""code""><span class=""regexerr"">56</span></tt> in <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccliteral"">12</span><span class=""regexccopen"">]</span><span class=""regexerr"">56</span><span class=""regexccopen"">]</span></tt> are an error. This way there is no ambiguity about their meaning.</p> <p>You also shouldn't put <tt class=""code""><span class=""regexccspecial"">&amp;&amp;</span></tt> at the very start or very end of the regex. Ruby treats <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccopen"">]</span></tt> and <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span></tt> as intersections with an empty class, which matches no characters at all. Java ignores leading and trailing <tt class=""code""><span class=""regexccspecial"">&amp;&amp;</span></tt> operators. PowerGREP treats them as literal ampersands.</p>"					regex
regex: character class intersection and negation	"The character class <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">1234</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccliteral"">3456</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt> is both negated and intersected. In Java and PowerGREP, negation takes precedence over intersection. Java and PowerGREP read this regex as ""(not 1234) and 3456"". Thus in Java and PowerGREP this class is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">56</span><span class=""regexccopen"">]</span></tt> and matches the digits 5 and 6. In Ruby, intersection takes precedence over negation. Ruby reads <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">1234</span><span class=""regexccspecial"">&amp;&amp;</span><span class=""regexccliteral"">3456</span><span class=""regexccopen"">]</span></tt> as ""not (1234 and 3456)"". Thus in Ruby this class is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">34</span><span class=""regexccopen"">]</span></tt> which matches anything except the digits 3 and 4. <p>If you want to negate the right hand side of the intersection, then you must use square brackets. Those automatically control precedence. So Java, PowerGREP, and Ruby all read <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">1234</span><span class=""regexccopen"">&amp;&amp;[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">3456</span><span class=""regexccopen"">]</span><span class=""regexccopen"">]</span></tt> as ""1234 and (not 3456)"". Thus this regex is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">12</span><span class=""regexccopen"">]</span></tt>.</p>"					regex
regex: character class shorthand <code>\d</code>	" <tt class=""code""><span class=""regexspecial"">\d</span></tt> is short for <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span></tt>. In most flavors that support Unicode, <tt class=""code""><span class=""regexspecial"">\d</span></tt> includes all digits from all scripts. Notable exceptions are Java, JavaScript, and PCRE. These Unicode flavors match only ASCII digits with <tt class=""code""><span class=""regexspecial"">\d</span></tt>."					regex
regex: character class shorthand <code>\w</code>	"<i>word characters</i>: always <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccliteral"">_</span><span class=""regexccopen"">]</span></tt> and sometimes Unicode"	"<span class=""regexspecial"">\w</span>&nbsp;stands for ""word character"". It always matches the ASCII characters&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccliteral"">_</span><span class=""regexccopen"">]</span></tt>. Notice the inclusion of the underscore and digits. In most flavors that support Unicode,&nbsp;<tt class=""code""><span class=""regexspecial"">\w</span></tt>&nbsp;includes many characters from other scripts. There is a lot of inconsistency about which characters are actually included. Letters and digits from alphabetic scripts and ideographs are generally included. Connector punctuation other than the underscore and numeric symbols that aren't digits may or may not be included. XML Schema and XPath even include all symbols in&nbsp;<tt class=""code""><span class=""regexspecial"">\w</span></tt>. Again, Java, JavaScript, and PCRE match only ASCII characters with&nbsp;<tt class=""code""><span class=""regexspecial"">\w</span></tt>."				regex
regex: character class shorthand <code>\s</code>	"<span class=""regexspecial"">\s</span> stands for ""whitespace character"". Again, which characters this actually includes, depends on the regex flavor. In all flavors discussed in this tutorial, it includes <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">&nbsp;</span><span class=""regexccspecial"">\t</span><span class=""regexccspecial"">\r</span><span class=""regexccspecial"">\n</span><span class=""regexccspecial"">\f</span><span class=""regexccopen"">]</span></tt>. That is: <tt class=""code""><span class=""regexspecial"">\s</span></tt> matches a space, a tab, a line break, or a form feed. Most flavors also include the vertical tab, with Perl (prior to version 5.18) and PCRE (prior to version 8.34) being notable exceptions. In flavors that support Unicode, <tt class=""code""><span class=""regexspecial"">\s</span></tt> normally includes all characters from the Unicode ""separator"" category. Java and PCRE are exceptions once again. But JavaScript does match all Unicode whitespace with <tt class=""code""><span class=""regexspecial"">\s</span></tt>."					regex
regex: Can shorthand character classes be used inside brackets?	Yes.	"Shorthand character classes can be used both inside and outside the square brackets.&nbsp;<tt class=""code""><span class=""regexspecial"">\s</span><span class=""regexspecial"">\d</span></tt>&nbsp;matches a whitespace character followed by a digit.&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\s</span><span class=""regexccspecial"">\d</span><span class=""regexccopen"">]</span></tt>&nbsp;matches a single character that is either whitespace or a digit. When applied to&nbsp;<tt class=""string"">1&nbsp;+&nbsp;2&nbsp;=&nbsp;3</tt>, the former regex matches&nbsp;<tt class=""match"">&nbsp;2</tt>&nbsp;(space two), while the latter matches&nbsp;<tt class=""match"">1</tt>&nbsp;(one).&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\d</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">f</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">F</span><span class=""regexccopen"">]</span></tt>&nbsp;matches a hexadecimal digit, and is equivalent to&nbsp;<tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">f</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">F</span><span class=""regexccopen"">]</span></tt>&nbsp;if your flavor only matches ASCII characters with&nbsp;<tt class=""code""><span class=""regexspecial"">\d</span></tt>."				regex
regex: Which shorthand character classes can be negated by capitalizing?	"<tt class=""code""><span class=""regexspecial"">\D</span></tt> is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccspecial"">\d</span><span class=""regexccopen"">]</span></tt>, <tt class=""code""><span class=""regexspecial"">\W</span></tt> is short for <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccspecial"">\w</span><span class=""regexccopen"">]</span></tt> and <tt class=""code""><span class=""regexspecial"">\S</span></tt> is the equivalent of <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccspecial"">\s</span><span class=""regexccopen"">]</span></tt>. <p>Be careful when using the negated shorthands inside square brackets. <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\D</span><span class=""regexccspecial"">\S</span><span class=""regexccopen"">]</span></tt> is <em>not</em> the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccspecial"">\d</span><span class=""regexccspecial"">\s</span><span class=""regexccopen"">]</span></tt>. The latter matches any character that is neither a digit nor whitespace. It matches <tt class=""match"">x</tt>, but not <tt class=""string"">8</tt>. The former, however, matches any character that is either not a digit, or is not whitespace. Because all digits are not whitespace, and all whitespace characters are not digits, <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\D</span><span class=""regexccspecial"">\S</span><span class=""regexccopen"">]</span></tt> matches any character; digit, whitespace, or otherwise.</p><p>See also: <code>\N</code></p>"					regex
regex: shorthand character classes for horizontal and vertical whitespace	"Perl 5.10 introduced <tt class=""code""><span class=""regexspecial"">\h</span></tt> and <tt class=""code""><span class=""regexspecial"">\v</span></tt>. <tt class=""code""><span class=""regexspecial"">\h</span></tt> matches horizontal whitespace, which includes the tab and all characters in the ""space separator"" Unicode category. It is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\t</span><span class=""regexccspecial"">\p{Zs}</span><span class=""regexccopen"">]</span></tt>. <tt class=""code""><span class=""regexspecial"">\v</span></tt> matches ""vertical whitespace"", which includes all characters treated as line breaks in the Unicode standard. It is the same as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\n</span><span class=""regexccspecial"">\cK</span><span class=""regexccspecial"">\f</span><span class=""regexccspecial"">\r</span><span class=""regexccspecial"">\x85</span><span class=""regexccspecial"">\x{2028}</span><span class=""regexccspecial"">\x{2029}</span><span class=""regexccopen"">]</span></tt>. <p>PCRE also supports <tt class=""code""><span class=""regexspecial"">\h</span></tt> and <tt class=""code""><span class=""regexspecial"">\v</span></tt> starting with version 7.2. PHP does as of version 5.2.2, Java as of version 8, and the JGsoft engine as of version 2. Boost supports <tt class=""code""><span class=""regexspecial"">\h</span></tt> starting with version 1.42. No version of Boost supports <tt class=""code""><span class=""regexspecial"">\v</span></tt> as a shorthand.</p> <p>In many other regex flavors, <tt class=""code""><span class=""regexspecial"">\v</span></tt> matches only the vertical tab character. Perl, PCRE, and PHP never supported this, so they were free to give <tt class=""code""><span class=""regexspecial"">\v</span></tt> a different meaning. Java 4 to 7 and JGsoft V1 did use <tt class=""code""><span class=""regexspecial"">\v</span></tt> to match only the vertical tab. Java 8 and JGsoft V2 changed the meaning of this token anyway. The vertical tab is also a vertical whitespace character. To avoid confusion, the above paragraph uses <tt class=""code""><span class=""regexspecial"">\cK</span></tt> to represent the vertical tab.</p> <p>Ruby 1.9 and later have their own version of <tt class=""code""><span class=""regexspecial"">\h</span></tt>. It matches a single hexadecimal digit just like <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">f</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">F</span><span class=""regexccopen"">]</span></tt>. <tt class=""code""><span class=""regexspecial"">\v</span></tt> is a vertical tab in Ruby.</p>"					marked regex
regex: XML character classes	"XML Schema, XPath, and JGsoft V2 regular expressions support four more shorthands that aren't supported by any other regular expression flavors. <tt class=""code""><span class=""regexspecial"">\i</span></tt> matches any character that may be the first character of an XML name. <tt class=""code""><span class=""regexspecial"">\c</span></tt> matches any character that may occur after the first character in an XML name. <tt class=""code""><span class=""regexspecial"">\I</span></tt> and <tt class=""code""><span class=""regexspecial"">\C</span></tt> are the respective negated shorthands. Note that the <tt class=""code""><span class=""regexspecial"">\c</span></tt> shorthand syntax conflicts with the control character syntax used in many other regex flavors. <p>You can use these four shorthands both inside and outside character classes using the bracket notation. They're very useful for validating XML references and values in your XML schemas. The regular expression <tt class=""code""><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span></tt> matches an XML name like <tt class=""match"">xml:schema</tt>.</p> <p>The regex <tt class=""code""><span class=""regexplain"">&lt;</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexplain"">&gt;</span></tt> matches an opening XML tag without any attributes. <tt class=""code""><span class=""regexplain"">&lt;/</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexplain"">&gt;</span></tt> matches any closing tag. <tt class=""code""><span class=""regexplain"">&lt;</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexnest1"">(</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexplain"">=</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexnest2"">(</span><span class=""regexplain"">""</span><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">""</span><span class=""regexccopen"">]</span><span class=""regexspecial"">*</span><span class=""regexplain"">""</span><span class=""regexnest2"">|</span><span class=""regexplain"">'</span><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">'</span><span class=""regexccopen"">]</span><span class=""regexspecial"">*</span><span class=""regexplain"">'</span><span class=""regexnest2"">)</span><span class=""regexnest1"">)</span><span class=""regexspecial"">*</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexplain"">&gt;</span></tt> matches an opening tag with any number of attributes. Putting it all together, <tt class=""code""><span class=""regexplain"">&lt;</span><span class=""regexnest1"">(</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexnest2"">(</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexplain"">=</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexnest3"">(</span><span class=""regexplain"">""</span><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">""</span><span class=""regexccopen"">]</span><span class=""regexspecial"">*</span><span class=""regexplain"">""</span><span class=""regexnest3"">|</span><span class=""regexplain"">'</span><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">'</span><span class=""regexccopen"">]</span><span class=""regexspecial"">*</span><span class=""regexplain"">'</span><span class=""regexnest3"">)</span><span class=""regexnest2"">)</span><span class=""regexspecial"">*</span><span class=""regexnest1"">|</span><span class=""regexplain"">/</span><span class=""regexspecial"">\i</span><span class=""regexspecial"">\c</span><span class=""regexspecial"">*</span><span class=""regexnest1"">)</span><span class=""regexspecial"">\s</span><span class=""regexspecial"">*</span><span class=""regexplain"">&gt;</span></tt> matches either an opening tag with attributes or a closing tag.</p> <p>No other regex flavors discussed in this tutorial support XML character classes. If your XML files are plain ASCII , you can use <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">_:</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccopen"">]</span></tt> for <tt class=""code""><span class=""regexspecial"">\i</span></tt> and <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">-._:</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span></tt> for <tt class=""code""><span class=""regexspecial"">\c</span></tt>. If you want to allow all Unicode characters that the XML standard allows, then you will end up with some pretty long regexes. You would have to use <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">:</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccliteral"">_</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccrange"">\u00C0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u00D6</span><span class=""regexccrange"">\u00D8</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u00F6</span><span class=""regexccrange"">\u00F8</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u02FF</span><span class=""regexccrange"">\u0370</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u037D</span><span class=""regexccrange"">\u037F</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u1FFF</span><span class=""regexccrange"">\u200C</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u200D</span><span class=""regexccliteral""><br /> </span><span class=""regexccrange"">\u2070</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u218F</span><span class=""regexccrange"">\u2C00</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u2FEF</span><span class=""regexccrange"">\u3001</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\uD7FF</span><span class=""regexccrange"">\uF900</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\uFDCF</span><span class=""regexccrange"">\uFDF0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\uFFFD</span><span class=""regexccopen"">]</span></tt> instead of <tt class=""code""><span class=""regexspecial"">\i</span></tt> and <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccliteral"">-.</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccliteral"">:</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccliteral"">_</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccspecial"">\u00B7</span><span class=""regexccrange"">\u00C0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u00D6</span><span class=""regexccrange"">\u00D8</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u00F6</span><span class=""regexccrange"">\u00F8</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u037D</span><span class=""regexccrange"">\u037F</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u1FFF</span><span class=""regexccrange"">\u200C</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u200D</span><span class=""regexccliteral""><br /> </span><span class=""regexccspecial"">\u203F</span><span class=""regexccspecial"">\u2040</span><span class=""regexccrange"">\u2070</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u218F</span><span class=""regexccrange"">\u2C00</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\u2FEF</span><span class=""regexccrange"">\u3001</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\uD7FF</span><span class=""regexccrange"">\uF900</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\uFDCF</span><span class=""regexccrange"">\uFDF0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">\uFFFD</span><span class=""regexccopen"">]</span></tt> instead of <tt class=""code""><span class=""regexspecial"">\c</span></tt>.</p>"					regex
regex: reason for the one exception to dot matching everything	The first tools that used regular expressions were line-based. They would read a file line by line, and apply the regular expression separately to each line. The effect is that with these tools, the string could never contain line breaks, so the dot could never match them.					regex
regex: dot matches linebreaks via option except in these flavors	"JavaScript and VBScript.<div><br /></div>JavaScript and VBScript do not have an option to make the dot match line break characters. In those languages, you can use a character class such as <tt class=""code""><span class=""regexccopen"">[</span><span class=""regexccspecial"">\s</span><span class=""regexccspecial"">\S</span><span class=""regexccopen"">]</span></tt> to match any character. This character matches a character that is either a whitespace character (including line break characters), or a character that is not a whitespace character. Since all characters are either whitespace or non-whitespace, this character class matches any character."					regex
regex: dot matches linebreaks in this Perl mode	single-line mode	"In Perl, the mode where the dot also matches line breaks is called ""single-line mode"". This is a bit unfortunate, because it is easy to mix up this term with ""multi-line mode"". Multi-line mode only affects anchors, and single-line mode only affects the dot. You can activate single-line mode by adding an s after the regex code, like this:&nbsp;<tt class=""code"">m/^regex$/s;</tt>.<div><br /></div><div><p>Other languages and regex libraries have adopted Perl's terminology. When using the regex classes of the .NET framework, you activate this mode by specifying&nbsp;<tt class=""code"">RegexOptions.Singleline</tt>, such as in&nbsp;<tt class=""code"">Regex.Match(""string"", ""regex"", RegexOptions.Singleline)</tt>.</p></div>"				regex
regex: dot matches linebreaks in Boost when?	In all of Boost's regex grammars the dot matches line breaks by default. Boost's ECMAScript grammar allows you to turn this off with <tt>regex_constants::no_mod_m</tt>.					regex
regex: linebreaks in&nbsp;std::regex, XML Schema and XPath	"<p>In these flavors, line breaks include:</p> <ul> <li style=""text-align: left; "">newline, <code>\n</code></li> <li style=""text-align: left; "">carriage return, <code>\r</code></li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTA5NzAsICJpZCI6ICIxNDk1NDA5OTEyMDM3LTAwMSIsICJtZCI6ICJJbiB0aGVzZSBmbGF2b3JzLCBsaW5lIGJyZWFrcyBpbmNsdWRlOlxuICBcbiogbmV3bGluZSwgYFxcbmBcbiogY2FycmlhZ2UgcmV0dXJuLCBgXFxyYFxuIn0=---->"		reverse			regex
regex: line breaks in&nbsp;JavaScript	"<p>In these flavors, line breaks include:</p> <ul> <li style=""text-align: left; "">newline, <code>\n</code></li> <li style=""text-align: left; "">carriage return, <code>\r</code></li> <li style=""text-align: left; "">Unicode line separator, <code>\u2028</code></li> <li style=""text-align: left; "">Unicode page separator, <code>\u2029</code></li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTA5ODgsICJpZCI6ICIxNDk1NDEwNTcyNzE2LTAwMSIsICJtZCI6ICJJbiB0aGVzZSBmbGF2b3JzLCBsaW5lIGJyZWFrcyBpbmNsdWRlOlxuICBcbiogbmV3bGluZSwgYFxcbmBcbiogY2FycmlhZ2UgcmV0dXJuLCBgXFxyYFxuKiBVbmljb2RlIGxpbmUgc2VwYXJhdG9yLCBgXFx1MjAyOGBcbiogVW5pY29kZSBwYWdlIHNlcGFyYXRvciwgYFxcdTIwMjlgXG4ifQ==---->"		reverse			regex
regex: line breaks in&nbsp;Java	"<p>In these flavors, line breaks include:</p> <ul> <li style=""text-align: left; "">newline, <code>\n</code></li> <li style=""text-align: left; "">carriage return, <code>\r</code></li> <li style=""text-align: left; "">Unicode line separator, <code>\u2028</code></li> <li style=""text-align: left; "">Unicode page separator, <code>\u2029</code></li> <li style=""text-align: left; "">Latin-1 next line control character, <code>\u0085</code> </li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTEwMDksICJpZCI6ICIxNDk1NDEwOTQ2NTMzLTAwMSIsICJtZCI6ICJJbiB0aGVzZSBmbGF2b3JzLCBsaW5lIGJyZWFrcyBpbmNsdWRlOlxuICBcbiogbmV3bGluZSwgYFxcbmBcbiogY2FycmlhZ2UgcmV0dXJuLCBgXFxyYFxuKiBVbmljb2RlIGxpbmUgc2VwYXJhdG9yLCBgXFx1MjAyOGBcbiogVW5pY29kZSBwYWdlIHNlcGFyYXRvciwgYFxcdTIwMjlgXG4qIExhdGluLTEgbmV4dCBsaW5lIGNvbnRyb2wgY2hhcmFjdGVyLCBgXFx1MDA4NWAgIFxuIn0=---->"		reverse			marked regex
regex: line breaks in&nbsp;Boost	"<p>In these flavors, line breaks include:</p> <ul> <li style=""text-align: left; "">newline, <code>\n</code></li> <li style=""text-align: left; "">carriage return, <code>\r</code></li> <li style=""text-align: left; "">Unicode line separator, <code>\u2028</code></li> <li style=""text-align: left; "">Unicode page separator, <code>\u2029</code></li> <li style=""text-align: left; "">Latin-1 next line control character, <code>\u0085</code> </li> <li style=""text-align: left; "">form feed, <code>\f</code></li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTEwNDUsICJpZCI6ICIxNDk1NDExMDExNzk3LTAwMSIsICJtZCI6ICJJbiB0aGVzZSBmbGF2b3JzLCBsaW5lIGJyZWFrcyBpbmNsdWRlOlxuICBcbiogbmV3bGluZSwgYFxcbmBcbiogY2FycmlhZ2UgcmV0dXJuLCBgXFxyYFxuKiBVbmljb2RlIGxpbmUgc2VwYXJhdG9yLCBgXFx1MjAyOGBcbiogVW5pY29kZSBwYWdlIHNlcGFyYXRvciwgYFxcdTIwMjlgXG4qIExhdGluLTEgbmV4dCBsaW5lIGNvbnRyb2wgY2hhcmFjdGVyLCBgXFx1MDA4NWAgIFxuKiBmb3JtIGZlZWQsIGBcXGZgXG4ifQ==---->"		reverse			regex
regex: line breaks in&nbsp;Delphi and JGsoft	"<p>In these flavors, line breaks include all Unicode line breaks:</p> <ul> <li style=""text-align: left; "">newline, <code>\n</code></li> <li style=""text-align: left; "">carriage return, <code>\r</code></li> <li style=""text-align: left; "">Unicode line separator, <code>\u2028</code></li> <li style=""text-align: left; "">Unicode page separator, <code>\u2029</code></li> <li style=""text-align: left; "">Latin-1 next line control character, <code>\u0085</code> </li> <li style=""text-align: left; "">form feed, <code>\f</code></li> <li style=""text-align: left; "">vertical tab, <code>\v</code></li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTEwOTEsICJpZCI6ICIxNDk1NDExMDUyNzQyLTAwMSIsICJtZCI6ICJJbiB0aGVzZSBmbGF2b3JzLCBsaW5lIGJyZWFrcyBpbmNsdWRlIGFsbCBVbmljb2RlIGxpbmUgYnJlYWtzOlxuICBcbiogbmV3bGluZSwgYFxcbmBcbiogY2FycmlhZ2UgcmV0dXJuLCBgXFxyYFxuKiBVbmljb2RlIGxpbmUgc2VwYXJhdG9yLCBgXFx1MjAyOGBcbiogVW5pY29kZSBwYWdlIHNlcGFyYXRvciwgYFxcdTIwMjlgXG4qIExhdGluLTEgbmV4dCBsaW5lIGNvbnRyb2wgY2hhcmFjdGVyLCBgXFx1MDA4NWAgIFxuKiBmb3JtIGZlZWQsIGBcXGZgXG4qIHZlcnRpY2FsIHRhYiwgYFxcdmBcbiJ9---->"		reverse			regex
regex: line breaks in&nbsp;.NET	<p>In these flavors, line breaks include only the newline, <code>\n</code>.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTExNTcsICJpZCI6ICIxNDk1NDExMDkzOTQ0LTAwMSIsICJtZCI6ICJJbiB0aGVzZSBmbGF2b3JzLCBsaW5lIGJyZWFrcyBpbmNsdWRlIG9ubHkgdGhlIG5ld2xpbmUsIGBcXG5gLlxuIn0=---->	".NET is notably absent from the list of flavors that treat characters other than <tt class=""code""><span class=""regexspecial"">\n</span></tt> as line breaks. Unlike scripting languages that have their roots in the UNIX world, .NET is a Windows development framework that does not automatically strip carriage return characters from text files that it reads. If you read a Windows text file as a whole into a string, it will contain carriage returns. If you use the regex <tt class=""code""><span class=""regexplain"">abc</span><span class=""regexspecial"">.</span><span class=""regexspecial"">*</span></tt> on that string, without setting RegexOptions.SingleLine, then it will match <tt class=""match"">abc</tt> plus all characters that follow on the same line, plus the carriage return at the end of the line, but without the newline after that."	reverse			regex
regex: line breaks options	"Some flavors allow you to control which characters should be treated as line breaks. Java has the UNIX_LINES option which makes it treat only <tt class=""code""><span class=""regexspecial"">\n</span></tt> as a line break. PCRE has options that allow you to choose between <tt class=""code""><span class=""regexspecial"">\n</span></tt> only, <tt class=""code""><span class=""regexspecial"">\r</span></tt> only, <tt class=""code""><span class=""regexspecial"">\r</span><span class=""regexspecial"">\n</span></tt>, or all Unicode line breaks. <p>On POSIX systems, the POSIX locale determines which characters are line breaks. The C locale treats only the newline <tt class=""code""><span class=""regexspecial"">\n</span></tt> as a line break. Unicode locales support all Unicode line breaks.</p>"					regex
regex: shorthand character class for anything not line break	"Perl 5.12 and PCRE 8.10 introduced <tt class=""code""><span class=""regexspecial"">\N</span></tt> which matches any single character that is not a line break, just like the dot does. Unlike the dot, <tt class=""code""><span class=""regexspecial"">\N</span></tt> is not affected by ""single-line mode"". <tt class=""code""><span class=""regexmeta"">(?</span><span class=""regexmeta"">s</span><span class=""regexmeta"">)</span><span class=""regexspecial"">\N</span><span class=""regexspecial"">.</span></tt> turns on single-line mode and then matches any character that is not a line break followed by any character regardless of whether it is a line break. <p>PCRE's options that control which characters are treated as line breaks affect <tt class=""code""><span class=""regexspecial"">\N</span></tt> in exactly the same way as they affect the dot.</p> <p>PHP 5.3.4 and R 2.14.0 also support <tt class=""code""><span class=""regexspecial"">\N</span></tt> as their regex support is based on PCRE 8.10 or later. JGsoft V2 also supports <tt class=""code""><span class=""regexspecial"">\N</span></tt>.</p>"					regex
what regex anchors match	positions before, after or between characters		reverse			regex
what regex anchor <code>^</code> matches	This anchor matches the position before the first character in the string.	"Applying&nbsp;<tt class=""code""><span class=""regexspecial"">^</span><span class=""regexplain"">a</span></tt>&nbsp;to&nbsp;<tt class=""string"">abc</tt>&nbsp;matches&nbsp;<tt class=""match"">a</tt>.&nbsp;<tt class=""code""><span class=""regexspecial"">^</span><span class=""regexplain"">b</span></tt>&nbsp;does not match&nbsp;<tt class=""string"">abc</tt>&nbsp;at all, because the&nbsp;<tt class=""code""><span class=""regexplain"">b</span></tt>&nbsp;cannot be matched right after the start of the string, matched by&nbsp;<tt class=""code""><span class=""regexspecial"">^</span></tt>."	reverse			regex
what regex anchor <code>$</code> matches	This anchor matches right after the last character in the string.	" <tt class=""code""><span class=""regexplain"">c</span><span class=""regexspecial"">$</span></tt> matches <tt class=""match"">c</tt> in <tt class=""string"">abc</tt>, while <tt class=""code""><span class=""regexplain"">a</span><span class=""regexspecial"">$</span></tt> does not match at all."	reverse			regex
what regex consisting solely of anchors can&nbsp;match	zero-length matches		reverse			regex
regex to trim trailing and leading whitespace&nbsp;in Perl	<p><code>s/^\s+|\s+$//g</code></p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTIwOTEsICJpZCI6ICIxNDk1NDExODk4MjA5LTAwMSIsICJtZCI6ICJgcy9eXFxzK3xcXHMrJC8vZ2BcbiJ9---->	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #40ffff"">$input</span> <span style=""color: #d0d0d0"">=~</span> <span style=""color: #ed9d13"">s/^\s+|\s+$//g</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTIwNDksICJpZCI6ICIxNDk1NDExODk4MjA5LTAwMiIsICJtZCI6ICIgICAgOjo6cGVybFxuICAgICRpbnB1dCA9fiBzL15cXHMrfFxccyskLy9nXG4ifQ==---->"	reverse			regex
regex anchors ^ and $ always match lines in which flavors?	In text editors like EditPad Pro or GNU Emacs, and regex tools like PowerGREP, the caret and dollar always match at the start and end of each line. This makes sense because those applications are designed to work with entire files, rather than short strings. In Ruby and std::regex the caret and dollar also always match at the start and end of each line.					regex
regex anchors ^ and $ default to matching lines in which flavors?	In&nbsp;Boost&nbsp;they match at the start and end of each line by default. Boost allows you to turn this off with&nbsp;<tt>regex_constants::no_mod_m</tt>&nbsp;when using the ECMAScript grammar.					regex
regex anchors ^ and $ default to not matching lines in which flavors?	"For all major flavors aside from text editors like EditPad Pro or GNU Emacs; regex tools like PowerGREP;&nbsp;Ruby,&nbsp;std::regex&nbsp;and&nbsp;Boost, you have to explicitly activate this extended functionality. It is traditionally called ""multi-line mode"". In Perl, you do this by adding an <code>m</code> after the regex code, like this: <tt class=""code"">m/^regex$/m;</tt>. In .NET, the anchors match before and after newlines when you specify <tt class=""code"">RegexOptions.Multiline</tt>, such as in <tt class=""code"">Regex.Match(""string"", ""regex"", RegexOptions.Multiline)</tt>."					regex
regex anchors ^ and $ when CRLF occur in pairs	"For anchors there's an additional consideration when CR and LF occur as a pair and the regex flavor treats both these characters as line breaks. <b>Delphi</b>, <b>Java</b>, and the <b>JGsoft</b> flavor treat CRLF as an indivisible pair. <tt class=""code""><span class=""regexspecial"">^</span></tt> matches after CRLF and <tt class=""code""><span class=""regexspecial"">$</span></tt> matches before CRLF, but neither match in the middle of a CRLF pair. <i><b>JavaScript</b> and <b>XPath</b> treat CRLF pairs as two line breaks.</i> <tt class=""code""><span class=""regexspecial"">^</span></tt> matches in the middle of and after CRLF, while <tt class=""code""><span class=""regexspecial"">$</span></tt> matches before and in the middle of CRLF."					regex
regex anchors for start and end of string	"<span class=""regexspecial"">\A</span> only ever matches at the start of the string. Likewise, <tt class=""code""><span class=""regexspecial"">\Z</span></tt> only ever matches at the end of the string. These two tokens never match at line breaks. This is true in all regex flavors discussed in this tutorial, even when you turn on ""multiline mode"". In EditPad Pro and PowerGREP, where the caret and dollar always match at the start and end of lines, <tt class=""code""><span class=""regexspecial"">\A</span></tt> and <tt class=""code""><span class=""regexspecial"">\Z</span></tt> only match at the start and the end of the entire file. <p>do not support <tt class=""code""><span class=""regexspecial"">\A</span></tt> and <tt class=""code""><span class=""regexspecial"">\Z</span></tt>. You're stuck with using the caret and dollar for this purpose.</p> <p>The GNU extensions to POSIX regular expressions use <tt class=""code""><span class=""regexspecial"">\`</span></tt> (backtick) to match the start of the string, and <tt class=""code""><span class=""regexspecial"">\'</span></tt> (single quote) to match the end of the string.</p>"					regex
regex anchors&nbsp;and single line break terminated strings	"<div>Because Perl returns a string with a newline at the end when reading a line from a file, Perl's regex engine matches <tt class=""code""><span class=""regexspecial"">$</span></tt> at the position before the line break at the end of the string even when multi-line mode is turned off. Perl also matches <tt class=""code""><span class=""regexspecial"">$</span></tt> at the very end of the string, regardless of whether that character is a line break. So <tt class=""code""><span class=""regexspecial"">^</span><span class=""regexspecial"">\d</span><span class=""regexspecial"">+</span><span class=""regexspecial"">$</span></tt> matches <tt class=""match"">123</tt> whether the subject string is <tt class=""string"">123</tt> or <tt class=""string"">123\n</tt>.</div><p>Most modern regex flavors have copied this behavior. That includes .NET, Java, PCRE, Delphi, PHP, and Python. This behavior is independent of any settings such as ""multi-line mode"".</p> <p>In all these flavors except Python, <tt class=""code""><span class=""regexspecial"">\Z</span></tt> also matches before the final line break. If you only want a match at the absolute very end of the string, use <tt class=""code""><span class=""regexspecial"">\z</span></tt> (lower case z instead of upper case Z). <tt class=""code""><span class=""regexspecial"">\A</span><span class=""regexspecial"">\d</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\z</span></tt> does not match <tt class=""string"">123\n</tt>. <tt class=""code""><span class=""regexspecial"">\z</span></tt> matches after the line break, which is not matched by the shorthand character class.</p> <p>In Python, <tt class=""code""><span class=""regexspecial"">\Z</span></tt> matches only at the very end of the string. Python does not support <tt class=""code""><span class=""regexspecial"">\z</span></tt>.</p>"					marked regex
regex anchors&nbsp;and multiple line break terminated strings	"<div><div>If a string ends with multiple line breaks and multi-line mode is off then&nbsp;<tt class=""code""><span class=""regexspecial"">$</span></tt>&nbsp;only matches before the last of those line breaks in all flavors where it can match before the final break. The same is true for&nbsp;<tt class=""code""><span class=""regexspecial"">\Z</span></tt>&nbsp;regardless of multi-line mode.</div><p>Boost is the only exception. In Boost,&nbsp;<tt class=""code""><span class=""regexspecial"">\Z</span></tt>&nbsp;can match before any number of trailing line breaks as well as at the very end of the string. So if the subject string ends with three line breaks, Boost's&nbsp;<tt class=""code""><span class=""regexspecial"">\Z</span></tt>&nbsp;has four positions that it can match at. Like in all other flavors, Boost's&nbsp;<tt class=""code""><span class=""regexspecial"">\Z</span></tt>&nbsp;is independent of multi-line mode. Boost's&nbsp;<tt class=""code""><span class=""regexspecial"">$</span></tt>&nbsp;only matches at the very end of the string when you turn off multi-line mode (which is on by default in Boost).</p></div>"					regex
regex: What positions are word boundaries?	"<ul> <li style=""text-align: left; "">Before the first character in the string, if the first character is a word character.</li> <li style=""text-align: left; "">After the last character in the string, if the last character is a word character.</li> <li style=""text-align: left; "">Between two characters in the string, where one is a word character and the other is not a word character.</li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU0MTM2NDUsICJpZCI6ICIxNDk1NDEzNjA2NDg1LTAwMSIsICJtZCI6ICIqIEJlZm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcsIGlmIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgYSB3b3JkIGNoYXJhY3Rlci5cbiogQWZ0ZXIgdGhlIGxhc3QgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcsIGlmIHRoZSBsYXN0IGNoYXJhY3RlciBpcyBhIHdvcmQgY2hhcmFjdGVyLlxuKiBCZXR3ZWVuIHR3byBjaGFyYWN0ZXJzIGluIHRoZSBzdHJpbmcsIHdoZXJlIG9uZSBpcyBhIHdvcmQgY2hhcmFjdGVyIGFuZCB0aGUgb3RoZXIgaXMgbm90IGEgd29yZCBjaGFyYWN0ZXIuXG4ifQ==---->"	"Simply put: <tt class=""code""><span class=""regexspecial"">\b</span></tt> allows you to perform a ""whole words only"" search using a regular expression in the form of <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexplain"">word</span><span class=""regexspecial"">\b</span></tt>. A ""word character"" is a character that can be used to form words. All characters that are not ""word characters"" are ""non-word characters""."				regex
regex: what anchor <code>\b</code> matches	"This metacharacter&nbsp;matches at a position that is called a ""word boundary"". This match is zero-length.<div><br /></div><div>Exactly which characters are word characters depends on the regex flavor you're working with. In most flavors, characters that are matched by the short-hand character class <tt class=""code""><span class=""regexspecial"">\w</span></tt> are the characters that are treated as word characters by word boundaries. Java is an exception. <b>Java</b> supports Unicode for this metacharacter&nbsp;but not for <tt class=""code""><span class=""regexspecial"">\w</span></tt>.</div>"	"Since digits are considered to be word characters,&nbsp;<tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexplain"">4</span><span class=""regexspecial"">\b</span></tt>&nbsp;can be used to match a 4 that is not part of a larger number. This regex does not match&nbsp;<tt class=""string"">44 sheets of a4</tt>. So saying ""<tt class=""code""><span class=""regexspecial"">\b</span></tt>&nbsp;matches before and after an alphanumeric sequence"" is more exact than saying ""before and after a word"".<div><p><b>Exception</b></p><p>In Tcl,&nbsp;<tt class=""code""><span class=""regexspecial"">\b</span></tt>&nbsp;matches a backspace character, just like&nbsp;<tt class=""code""><span class=""regexspecial"">\x08</span></tt>&nbsp;in most regex flavors (including Tcl's).&nbsp;<tt class=""code""><span class=""regexspecial"">\B</span></tt>&nbsp;matches a single backslash character in Tcl, just like&nbsp;<tt class=""code""><span class=""regexescaped"">\\</span></tt>&nbsp;in all other regex flavors (and Tcl too).</p></div>"	reverse			regex
regex: what anchor <code>\B</code> matches	This metacharacter matches at any position between two word characters as well as at any position between two non-word characters.	"<span class=""regexspecial"">\B</span> is the negated version of <tt class=""code""><span class=""regexspecial"">\b</span></tt>. <tt class=""code""><span class=""regexspecial"">\B</span></tt> matches at every position where <tt class=""code""><span class=""regexspecial"">\b</span></tt> does not.<div><p><b>Exception</b></p><p>In Tcl,&nbsp;<tt class=""code""><span class=""regexspecial"">\b</span></tt>&nbsp;matches a backspace character, just like&nbsp;<tt class=""code""><span class=""regexspecial"">\x08</span></tt>&nbsp;in most regex flavors (including Tcl's).&nbsp;<tt class=""code""><span class=""regexspecial"">\B</span></tt>&nbsp;matches a single backslash character in Tcl, just like&nbsp;<tt class=""code""><span class=""regexescaped"">\\</span></tt>&nbsp;in all other regex flavors (and Tcl too).</p></div>"	reverse			regex
regex: word boundaries in&nbsp;Tcl	"Word boundaries, as described above, are supported by most regular expression flavors. Notable exceptions are the POSIX and XML Schema flavors, which don't support word boundaries at all. Tcl uses a different syntax. <p>In Tcl, <tt class=""code""><span class=""regexspecial"">\b</span></tt> matches a backspace character, just like <tt class=""code""><span class=""regexspecial"">\x08</span></tt> in most regex flavors (including Tcl's). <tt class=""code""><span class=""regexspecial"">\B</span></tt> matches a single backslash character in Tcl, just like <tt class=""code""><span class=""regexescaped"">\\</span></tt> in all other regex flavors (and Tcl too).</p> <p>Tcl uses the letter ""y"" instead of the letter ""b"" to match word boundaries. <tt class=""code""><span class=""regexspecial"">\y</span></tt> matches at any word boundary position, while <tt class=""code""><span class=""regexspecial"">\Y</span></tt> matches at any position that is not a word boundary. These Tcl regex tokens match exactly the same as <tt class=""code""><span class=""regexspecial"">\b</span></tt> and <tt class=""code""><span class=""regexspecial"">\B</span></tt> in Perl-style regex flavors. They don't discriminate between the start and the end of a word.</p> <p>Tcl has two more word boundary tokens that do discriminate between the start and end of a word. <tt class=""code""><span class=""regexspecial"">\m</span></tt> matches only at the start of a word. That is, it matches at any position that has a non-word character to the left of it, and a word character to the right of it. It also matches at the start of the string if the first character in the string is a word character. <tt class=""code""><span class=""regexspecial"">\M</span></tt> matches only at the end of a word. It matches at any position that has a word character to the left of it, and a non-word character to the right of it. It also matches at the end of the string if the last character in the string is a word character.</p> <p>The only regex engine that supports Tcl-style word boundaries (besides Tcl itself) is the JGsoft engine. In PowerGREP and EditPad Pro, <tt class=""code""><span class=""regexspecial"">\b</span></tt> and <tt class=""code""><span class=""regexspecial"">\B</span></tt> are Perl-style word boundaries, while <tt class=""code""><span class=""regexspecial"">\y</span></tt>, <tt class=""code""><span class=""regexspecial"">\Y</span></tt>, <tt class=""code""><span class=""regexspecial"">\m</span></tt> and <tt class=""code""><span class=""regexspecial"">\M</span></tt> are Tcl-style word boundaries.</p> <p>In most situations, the lack of <tt class=""code""><span class=""regexspecial"">\m</span></tt> and <tt class=""code""><span class=""regexspecial"">\M</span></tt> tokens is not a problem. <tt class=""code""><span class=""regexspecial"">\y</span><span class=""regexplain"">word</span><span class=""regexspecial"">\y</span></tt> finds ""whole words only"" occurrences of ""word"" just like <tt class=""code""><span class=""regexspecial"">\m</span><span class=""regexplain"">word</span><span class=""regexspecial"">\M</span></tt> would. <tt class=""code""><span class=""regexspecial"">\M</span><span class=""regexplain"">word</span><span class=""regexspecial"">\m</span></tt> could never match anywhere, since <tt class=""code""><span class=""regexspecial"">\M</span></tt> never matches at a position followed by a word character, and <tt class=""code""><span class=""regexspecial"">\m</span></tt> never at a position preceded by one. If your regular expression needs to match characters before or after <tt class=""code""><span class=""regexspecial"">\y</span></tt>, you can easily specify in the regex whether these characters should be word characters or non-word characters. If you want to match any word, <tt class=""code""><span class=""regexspecial"">\y</span><span class=""regexspecial"">\w</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\y</span></tt> gives the same result as <tt class=""code""><span class=""regexspecial"">\m</span><span class=""regexspecial"">.</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\M</span></tt>. Using <tt class=""code""><span class=""regexspecial"">\w</span></tt> instead of the dot automatically restricts the first <tt class=""code""><span class=""regexspecial"">\y</span></tt> to the start of a word, and the second <tt class=""code""><span class=""regexspecial"">\y</span></tt> to the end of a word. Note that <tt class=""code""><span class=""regexspecial"">\y</span><span class=""regexspecial"">.</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\y</span></tt> would not work. This regex matches each word, and also each sequence of non-word characters between the words in your subject string. That said, if your flavor supports <tt class=""code""><span class=""regexspecial"">\m</span></tt> and <tt class=""code""><span class=""regexspecial"">\M</span></tt>, the regex engine could apply <tt class=""code""><span class=""regexspecial"">\m</span><span class=""regexspecial"">\w</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\M</span></tt> slightly faster than <tt class=""code""><span class=""regexspecial"">\y</span><span class=""regexspecial"">\w</span><span class=""regexspecial"">+</span><span class=""regexspecial"">\y</span></tt>, depending on its internal optimizations.</p> <p>If your regex flavor supports lookahead and lookbehind, you can use <tt class=""code""><span class=""regexnest1"">(?&lt;!</span><span class=""regexspecial"">\w</span><span class=""regexnest1"">)</span><span class=""regexnest1"">(?=</span><span class=""regexspecial"">\w</span><span class=""regexnest1"">)</span></tt> to emulate Tcl's <tt class=""code""><span class=""regexspecial"">\m</span></tt> and <tt class=""code""><span class=""regexnest1"">(?&lt;=</span><span class=""regexspecial"">\w</span><span class=""regexnest1"">)</span><span class=""regexnest1"">(?!</span><span class=""regexspecial"">\w</span><span class=""regexnest1"">)</span></tt> to emulate <tt class=""code""><span class=""regexspecial"">\M</span></tt>. Though quite a bit more verbose, these lookaround constructs match exactly the same as Tcl's word boundaries.</p> <p>If your flavor has lookahead but not lookbehind, and also has Perl-style word boundaries, you can use <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexnest1"">(?=</span><span class=""regexspecial"">\w</span><span class=""regexnest1"">)</span></tt> to emulate Tcl's <tt class=""code""><span class=""regexspecial"">\m</span></tt> and <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexnest1"">(?!</span><span class=""regexspecial"">\w</span><span class=""regexnest1"">)</span></tt> to emulate <tt class=""code""><span class=""regexspecial"">\M</span></tt>. <tt class=""code""><span class=""regexspecial"">\b</span></tt> matches at the start or end of a word, and the lookahead checks if the next character is part of a word or not. If it is we're at the start of a word. Otherwise, we're at the end of a word.</p>"					regex
regex: word boundaries in&nbsp;GNU	"<div>This flavor has extensions that&nbsp;support the&nbsp;<tt class=""code""><span class=""regexspecial"">\b</span></tt>&nbsp;and&nbsp;<tt class=""code""><span class=""regexspecial"">\B</span></tt>&nbsp;word boundaries, and it&nbsp;also uses its own syntax for start-of-word and end-of-word boundaries. <tt class=""code""><span class=""regexspecial"">\&lt;</span></tt> matches at the start of a word, like&nbsp;<b>Tcl</b>’s&nbsp;<tt class=""code""><span class=""regexspecial"">\m</span></tt>. <tt class=""code""><span class=""regexspecial"">\&gt;</span></tt> matches at the end of a word, like&nbsp;<b>Tcl</b>’s&nbsp;<tt class=""code""><span class=""regexspecial"">\M</span></tt>.</div><div><p><b>Boost</b> also treats <tt class=""code""><span class=""regexspecial"">\&lt;</span></tt> and <tt class=""code""><span class=""regexspecial"">\&gt;</span></tt> as word boundaries when using the <b>ECMAScript</b>, <b>extended</b>, <b><code>egrep</code></b>, or <b><code>awk</code></b> grammar.</p></div>"	"The <b>GNU</b> extensions to <b>POSIX</b> regular expressions add support for the&nbsp;<tt class=""code""><span class=""regexspecial"">\b</span></tt>&nbsp;and&nbsp;<tt class=""code""><span class=""regexspecial"">\B</span></tt>&nbsp;word boundaries."	reverse			regex
regex: word boundaries in&nbsp;POSIX	"<tt class=""code""><span class=""regexspecial"">[[:&lt;:]]</span></tt>&nbsp;and <tt class=""code""><span class=""regexspecial"">[[:&gt;:]]</span></tt>"	"This flavor defines&nbsp;<tt class=""code""><span class=""regexspecial"">[[:&lt;:]]</span></tt>&nbsp;as a start-of-word boundary and&nbsp;<tt class=""code""><span class=""regexspecial"">[[:&gt;:]]</span></tt>&nbsp;as an end-of-word boundary. Though the syntax is borrowed from the same standard’s&nbsp;bracket expressions, these tokens are word boundaries that have nothing to do with and cannot be used inside character classes."	reverse			regex
regex: metacharacter <code></code><code>|</code>	This operator indicates alternation, to match a single regular expression out of several possible regular expressions.&nbsp;The alternation operator has the lowest precedence of all regex operators. That is, it tells the regex engine to match either everything to the left of it, or everything to the right of it. If you want to limit the reach of the alternation, you need to use parentheses for grouping.	"If you want to search for the literal text&nbsp;<tt class=""code""><span class=""regexplain"">cat</span></tt>&nbsp;or&nbsp;<tt class=""code""><span class=""regexplain"">dog</span></tt>, separate both options with a vertical bar or pipe symbol:&nbsp;<tt class=""code""><span class=""regexplain"">cat</span><span class=""regexspecial"">|</span><span class=""regexplain"">dog</span></tt>. If you want more options, simply expand the list:&nbsp;<tt class=""code""><span class=""regexplain"">cat</span><span class=""regexspecial"">|</span><span class=""regexplain"">dog</span><span class=""regexspecial"">|</span><span class=""regexplain"">mouse</span><span class=""regexspecial"">|</span><span class=""regexplain"">fish</span></tt>.<p>If we want to improve the first example to match whole words only, we would need to use&nbsp;<tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexnest1"">(</span><span class=""regexplain"">cat</span><span class=""regexnest1"">|</span><span class=""regexplain"">dog</span><span class=""regexnest1"">)</span><span class=""regexspecial"">\b</span></tt>. This tells the regex engine to find a&nbsp;word boundary, then either&nbsp;<tt class=""code""><span class=""regexplain"">cat</span></tt>&nbsp;or&nbsp;<tt class=""code""><span class=""regexplain"">dog</span></tt>, and then another word boundary. If we had omitted the parentheses then the regex engine would have searched for a word boundary followed by&nbsp;<tt class=""code""><span class=""regexplain"">cat</span></tt>, or,&nbsp;<tt class=""code""><span class=""regexplain"">dog</span></tt>&nbsp;followed by a word boundary.</p>"	reverse			regex
regex: Does order of alternates matter?	"The regex engine is eager and&nbsp;stops searching as soon as it finds a valid match. The consequence is that in certain situations, the order of the alternatives matters. Suppose you want to use a regex to match a list of function names in a programming language: <code>Get</code>, <code>GetValue</code>, <code>Set</code> or <code>SetValue</code>. The obvious solution is <tt class=""code""><span class=""regexplain"">Get</span><span class=""regexspecial"">|</span><span class=""regexplain"">GetValue</span><span class=""regexspecial"">|</span><span class=""regexplain"">Set</span><span class=""regexspecial"">|</span><span class=""regexplain"">SetValue</span></tt>. Let's see how this works out when the string is <tt class=""string"">SetValue</tt>. <p>The regex engine starts at the first token in the regex, <tt class=""code""><span class=""regexplain"">G</span></tt>, and at the first character in the string, <tt class=""string"">S</tt>. The match fails. However, the regex engine studied the entire regular expression before starting. So it knows that this regular expression uses alternation, and that the entire regex has not failed yet. So it continues with the second option, being the second <tt class=""code""><span class=""regexplain"">G</span></tt> in the regex. The match fails again. The next token is the first <tt class=""code""><span class=""regexplain"">S</span></tt> in the regex. The match succeeds, and the engine continues with the next character in the string, as well as the next token in the regex. The next token in the regex is the <tt class=""code""><span class=""regexplain"">e</span></tt> after the <tt class=""code""><span class=""regexplain"">S</span></tt> that just successfully matched. <tt class=""code""><span class=""regexplain"">e</span></tt> matches <tt class=""match"">e</tt>. The next token, <tt class=""code""><span class=""regexplain"">t</span></tt> matches <tt class=""match"">t</tt>.</p> <p>At this point, the third option in the alternation has been successfully matched. Because the regex engine is eager, it considers the entire alternation to have been successfully matched as soon as one of the options has. In this example, there are no other tokens in the regex outside the alternation, so the entire regex has successfully matched <tt class=""match"">Set</tt> in <tt class=""string"">SetValue</tt>.</p> <p>Contrary to what we intended, the regex did not match the entire string. There are several solutions. One option is to take into account that the regex engine is eager, and change the order of the options. If we use <tt class=""code""><span class=""regexplain"">GetValue</span><span class=""regexspecial"">|</span><span class=""regexplain"">Get</span><span class=""regexspecial"">|</span><span class=""regexplain"">SetValue</span><span class=""regexspecial"">|</span><span class=""regexplain"">Set</span></tt>, <tt class=""code""><span class=""regexplain"">SetValue</span></tt> is attempted before <tt class=""code""><span class=""regexplain"">Set</span></tt>, and the engine matches the entire string. We could also combine the four options into two and use the question mark to make part of them optional: <tt class=""code""><span class=""regexplain"">Get</span><span class=""regexnest1"">(</span><span class=""regexplain"">Value</span><span class=""regexnest1"">)</span><span class=""regexspecial"">?</span><span class=""regexspecial"">|</span><span class=""regexplain"">Set</span><span class=""regexnest1"">(</span><span class=""regexplain"">Value</span><span class=""regexnest1"">)</span><span class=""regexspecial"">?</span></tt>. Because the question mark is greedy, <tt class=""code""><span class=""regexplain"">SetValue</span></tt> is be attempted before <tt class=""code""><span class=""regexplain"">Set</span></tt>.</p> <p>The best option is probably to express the fact that we only want to match complete words. We do not want to match Set or SetValue if the string is <tt class=""string"">SetValueFunction</tt>. So the solution is <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexnest1"">(</span><span class=""regexplain"">Get</span><span class=""regexnest1"">|</span><span class=""regexplain"">GetValue</span><span class=""regexnest1"">|</span><span class=""regexplain"">Set</span><span class=""regexnest1"">|</span><span class=""regexplain"">SetValue</span><span class=""regexnest1"">)</span><span class=""regexspecial"">\b</span></tt> or <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexnest1"">(</span><span class=""regexplain"">Get</span><span class=""regexnest2"">(</span><span class=""regexplain"">Value</span><span class=""regexnest2"">)</span><span class=""regexspecial"">?</span><span class=""regexnest1"">|</span><span class=""regexplain"">Set</span><span class=""regexnest2"">(</span><span class=""regexplain"">Value</span><span class=""regexnest2"">)</span><span class=""regexspecial"">?</span><span class=""regexnest1"">)</span><span class=""regexspecial"">\b</span></tt>. Since all options have the same end, we can optimize this further to <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexnest1"">(</span><span class=""regexplain"">Get</span><span class=""regexnest1"">|</span><span class=""regexplain"">Set</span><span class=""regexnest1"">)</span><span class=""regexnest1"">(</span><span class=""regexplain"">Value</span><span class=""regexnest1"">)</span><span class=""regexspecial"">?</span><span class=""regexspecial"">\b</span></tt>.</p>"					regex
regex: alternates in text-directed engines	"Alternation is where regex-directed and text-directed engines differ. When a text-directed engine attempts <tt class=""code""><span class=""regexplain"">Get</span><span class=""regexspecial"">|</span><span class=""regexplain"">GetValue</span><span class=""regexspecial"">|</span><span class=""regexplain"">Set</span><span class=""regexspecial"">|</span><span class=""regexplain"">SetValue</span></tt> on <tt class=""string"">SetValue</tt>, it tries all permutations of the regex at the start of the string. It does so efficiently, without any backtracking. It sees that the regex can find a match at the start of the string, and that the matched text can be either <tt class=""string"">Set</tt> or <tt class=""string"">SetValue</tt>. Because the text-directed engine evaluates the regex as a whole, it has no concept of one alternative being listed before another. But it has to make a choice as to which match to return. It always returns the longest match, in this case <tt class=""match"">SetValue</tt>."					regex
regex: When is longest alternate required?	The <b>POSIX</b> standard leaves it up to the implementation to choose a text-directed or regex-directed engine. A BRE that includes backreferences needs to be evaluated using a regex-directed engine. But a BRE without backreferences or an ERE can be evaluated using a text-directed engine. But the POSIX standard does mandate that the longest match be returned, even when a regex-directed engine is used. Such an engine cannot be eager. It has to continue trying all alternatives even after a match is found, in order to find the longest one. This can result in very poor performance when a regex contains multiple quantifiers or a combination of quantifiers and alternation, as all combinations have to be tried to find the longest match. <p>The <b>Tcl</b> and <b>GNU</b> flavors also work this way.</p>					regex
regex: metacharacter <code>?</code> (quantifier)	This metacharacter is a quantifier and makes the preceding token in the regular expression optional.&nbsp;You can make several tokens optional by grouping them together using parentheses, and placing this metacharacter&nbsp;after the closing parenthesis.&nbsp;You can write a regular expression that matches many alternatives by including more than one of this metacharacter.	"<tt class=""code""><span class=""regexplain"">colo</span><span class=""regexplain"">u</span><span class=""regexspecial"">?</span><span class=""regexplain"">r</span></tt>&nbsp;matches both&nbsp;<tt class=""match"">colour</tt>&nbsp;and&nbsp;<tt class=""match"">color</tt>.<div><tt class=""code""><span class=""regexplain"">Nov</span><span class=""regexnest1"">(</span><span class=""regexplain"">ember</span><span class=""regexnest1"">)</span><span class=""regexspecial"">?</span></tt>&nbsp;matches&nbsp;<tt class=""match"">Nov</tt>&nbsp;and&nbsp;<tt class=""match"">November</tt>.</div><div><tt class=""code""><span class=""regexplain"">Feb</span><span class=""regexnest1"">(</span><span class=""regexplain"">ruary</span><span class=""regexnest1"">)</span><span class=""regexspecial"">?</span><span class=""regexplain"">&nbsp;23</span><span class=""regexnest1"">(</span><span class=""regexplain"">rd</span><span class=""regexnest1"">)</span><span class=""regexspecial"">?</span></tt>&nbsp;matches&nbsp;<tt class=""match"">February 23rd</tt>,&nbsp;<tt class=""match"">February 23</tt>,&nbsp;<tt class=""match"">Feb 23rd</tt>&nbsp;and&nbsp;<tt class=""match"">Feb 23</tt>.</div>"	reverse			regex
regex: metacharacters&nbsp;<code>{}</code>	This pair of metacharacters can also make something optional.&nbsp;	"<tt class=""code""><span class=""regexplain"">colo</span><span class=""regexplain"">u</span><span class=""regexspecial"">{0,1}</span><span class=""regexplain"">r</span></tt>&nbsp;is the same as&nbsp;<tt class=""code""><span class=""regexplain"">colo</span><span class=""regexplain"">u</span><span class=""regexspecial"">?</span><span class=""regexplain"">r</span></tt><div><br /></div> The syntax is <tt>{<i>min</i>,<i>max</i>}</tt>, where <i>min</i> is zero or a positive integer number indicating the minimum number of matches, and <i>max</i> is an integer equal to or greater than <i>min</i> indicating the maximum number of matches. If the comma is present but <i>max</i> is omitted, the maximum number of matches is infinite. So <tt class=""code""><span class=""regexspecial"">{0,1}</span></tt> is the same as <tt class=""code""><span class=""regexspecial"">?</span></tt>, <tt class=""code""><span class=""regexspecial"">{0,}</span></tt> is the same as <tt class=""code""><span class=""regexspecial"">*</span></tt>, and <tt class=""code""><span class=""regexspecial"">{1,}</span></tt> is the same as <tt class=""code""><span class=""regexspecial"">+</span></tt>. Omitting both the comma and <i>max</i> tells the engine to repeat the token exactly <i>min</i> times. <p>You could use <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexccopen"">[</span><span class=""regexccrange"">1</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexspecial"">{3}</span><span class=""regexspecial"">\b</span></tt> to match a number between 1000 and 9999. <tt class=""code""><span class=""regexspecial"">\b</span><span class=""regexccopen"">[</span><span class=""regexccrange"">1</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexccopen"">[</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexspecial"">{2,4}</span><span class=""regexspecial"">\b</span></tt> matches a number between 100 and 99999. Notice the use of the word boundaries.</p>"	reverse			regex
regex: metacharacters&nbsp;<code>{}</code> in&nbsp;POSIX BRE&nbsp;and&nbsp;GNU BRE	"These flavors require backslashes to&nbsp;<em>give</em>&nbsp;curly braces their special meaning:&nbsp;<tt class=""code""><span class=""regexplain"">colo</span><span class=""regexplain"">u</span><span class=""regexspecial"">\{0,1\}</span><span class=""regexplain"">r</span></tt>."					regex
regex: metacharacter&nbsp;<code>*</code>	This repetition operator or quantifier&nbsp;tells the engine to attempt to match the preceding token zero or more times.	"<tt class=""code""><span class=""regexplain"">&lt;</span><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccopen"">]</span><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexspecial"">*</span><span class=""regexplain"">&gt;</span></tt> matches an HTML tag without any attributes. The angle brackets are literals. The first character class matches a letter. The second character class matches a letter or digit. The star repeats the second character class. Because we used the star, it's OK if the second character class matches nothing. So our regex will match a tag like <tt class=""match"">&lt;B&gt;</tt>. When matching <tt class=""match"">&lt;HTML&gt;</tt>, the first character class will match <tt class=""match"">H</tt>. The star will cause the second character class to be repeated three times, matching <tt class=""match"">T</tt>, <tt class=""match"">M</tt> and <tt class=""match"">L</tt> with each step. <p>I could also have used <tt class=""code""><span class=""regexplain"">&lt;</span><span class=""regexccopen"">[</span><span class=""regexccrange"">A</span><span class=""regexccrange"">-</span><span class=""regexccrange"">Z</span><span class=""regexccrange"">a</span><span class=""regexccrange"">-</span><span class=""regexccrange"">z</span><span class=""regexccrange"">0</span><span class=""regexccrange"">-</span><span class=""regexccrange"">9</span><span class=""regexccopen"">]</span><span class=""regexspecial"">+</span><span class=""regexplain"">&gt;</span></tt>. I did not, because this regex would match <tt class=""match"">&lt;1&gt;</tt>, which is not a valid HTML tag. But this regex may be sufficient if you know the string you are searching through does not contain any such invalid tags.</p>"	reverse			regex
regex: metacharacter <code>+</code>	This repetition operator or quantifier&nbsp;tells the engine to attempt to match the preceding token once or more.		reverse			regex
regex: metacharacter&nbsp;<code>?</code>&nbsp;(laziness)	This operator makes the preceding operator lazy instead of greedy.		reverse			regex
regex: metacharacter&nbsp;<code>?</code>&nbsp;can make these&nbsp;quantifiers lazy	<code>+</code>, <code>*</code>, <code>{min,max}</code>, <code>?</code>					regex
regex: laziness alternative that avoids backtracking	greedy <code>+</code> and a negated character class	"<tt class=""code""><span class=""regexplain"">&lt;</span><span class=""regexccopen"">[</span><span class=""regexccspecial"">^</span><span class=""regexccliteral"">&gt;</span><span class=""regexccopen"">]</span><span class=""regexspecial"">+</span><span class=""regexplain"">&gt;</span></tt>"	reverse			regex
regex: repeating&nbsp;<code>\Q…\E</code>&nbsp;escape sequences	"The <code>\Q…\E</code> sequence escapes a string of characters, matching them as literal characters. The escaped characters are treated as individual characters. If you place a quantifier after the <tt>\E</tt>, it will only be applied to the last character. E.g. if you apply <tt class=""code""><span class=""regexmeta"">\Q</span><span class=""regexplain"">*\d+*</span><span class=""regexmeta"">\E</span><span class=""regexspecial"">+</span></tt> to <tt class=""string"">*\d+**\d+*</tt>, the match will be <tt class=""match"">*\d+**</tt>. Only the asterisk is repeated. Java 4 and 5 have a bug that causes the whole <code>\Q…E</code> sequence to be repeated, yielding the whole subject string as the match. This was fixed in Java 6."					regex
regex: anchors <code>\`</code> and <code>\'</code>	The GNU extensions to POSIX regular expressions use these&nbsp;to match the start and&nbsp;end of the string.		reverse			regex
crontab does what if month day and week day both specified?	Both get executed since&nbsp;they are cumulative.					
vi cursor h	vi	command			h	move cursor left			vi
vi cursor j	vi	command			j	move cursor down			vi
vi cursor k	vi	command			k	move cursor up			vi
vi cursor l	vi	command			l	move cursor right			vi
vi cursor 4h	vi	command			4h	move cursor 4 (or any number) left			vi
vi cursor 4j	vi	command			4j	move cursor 4 (or any number) down			vi
vi cursor 4k	vi	command			4k	move cursor 4 (or any number) up			vi
vi cursor 4l	vi	command			4l	move cursor 4 (or any number) right			vi
vi cursor w	vi	command			w	jump cursor by start of words (punctuation considered words)			vi
vi cursor W	vi	command			W	jump cursor by words (spaces separate words)			vi
vi cursor e	vi	command			e	move cursor to end of words (punctuation considered words)			vi
vi cursor E	vi	command			E	move cursor to end of words (spaces separate words)			vi
vi cursor b	vi	command			b	jump cursor backward by words (punctuation considered words)			vi
vi cursor B	vi	command			B	jump cursor backward by words (spaces separate words)			vi
vi cursor 0	vi	command			0	move cursor to start of line			vi
vi cursor ^	vi	command			^	move cursor to first non-blank character of line			vi
vi cursor $	vi	command			$	move cursor to end of line			vi
vi cursor G	vi	command			G	Go To command (prefix with number - 5G goes to line 5)			vi
vi insert i	vi	command			i	<em>insert mode:</em><br>Insert text before the cursor [count] times.<br>start insert mode at cursor			vi
vi insert I	vi	command			I	<em>insert mode:</em><br>Insert text before the first non-blank in the line [count] times.<br>insert at the beginning of the line			vi
vi insert a	vi	command			a	<em>insert mode:</em><br>Append text after the cursor [count] times.<br>append after the cursor			vi
vi insert A	vi	command			A	<em>insert mode:</em><br>Append text at the end of the line [count] times.<br>append at the end of the line			vi
vi insert o	vi	command			o	<em>insert mode:</em><br>Begin a new line below the cursor and insert text, repeat [count] times.<br>open (append) blank line below current line (no need to press return)			vi
vi insert O	vi	command			O	<em>insert mode:</em><br>Begin a new line above the cursor and insert text, repeat [count] times.<br>open blank line above current line			vi
vi editing	vi	command			r	replace a single character (does not use insert mode)			vi
vi visual	vi	command			v	<em>visual mode:</em><br>start visual mode, mark lines, then do command (such as y-yank)			vi
vi copy-paste	vi	command			yy	yank (copy) a line			vi
vi search	vi	command			/<i>pattern</i>	search for pattern			vi
vi multifile	vi	command			:e <i>filename</i>	<em>multiple files:</em><br>Edit a file in a new buffer			vi
vi editing r	vi	command			r	replace a single character (does not use insert mode)			vi
vi editing J	vi	command			J	join line below to the current one			vi
vi editing cc	vi	command			cc	change (replace) an entire line (same as <code>S</code>)			vi
vi editing cw	vi	command			cw	change (replace) to the end of word			vi
vi editing c$	vi	command			c$	change (replace) to the end of line			vi
vi editing s	vi	command			s	delete character at cursor and subsitute text			vi
vi editing S	vi	command			S	delete line at cursor and substitute text (same as <code>cc</code>)			vi
vi editing xp	vi	command			xp	transpose two letters (delete and paste, technically)			vi
vi editing u	vi	command			u	undo			vi
vi editing .	vi	command			.	repeat last command			vi
vi visual v	vi	command			v	<em>visual mode:</em><br>start visual mode, mark lines, then do command (such as y-yank)			vi
vi visual V	vi	command			V	<em>visual mode:</em><br>start Linewise visual mode			vi
vi visual o	vi	command			o	<em>visual mode:</em><br>move to other end of marked area			vi
vi visual Ctrl+v	vi	command			Ctrl+v	<em>visual mode:</em><br>start visual block mode			vi
vi visual O	vi	command			O	<em>visual mode:</em><br>move to Other corner of block			vi
vi visual aw	vi	command			aw	<em>visual mode:</em><br>mark a word			vi
vi visual ab	vi	command			ab	<em>visual mode:</em><br>a <code>()</code> block (with braces)			vi
vi visual aB	vi	command			aB	<em>visual mode:</em><br>a <code>{}</code> block (with brackets)			vi
vi visual ib	vi	command			ib	<em>visual mode:</em><br>inner <code>()</code> block			vi
vi visual iB	vi	command			iB	<em>visual mode:</em><br>inner <code>{}</code> block			vi
vi visual Esc	vi	command			Esc	<em>visual mode:</em><br>exit visual mode			vi
vi visual &gt;	vi	command			&gt;	<em>visual mode:</em><br>shift right			vi
vi visual &lt;	vi	command			&lt;	<em>visual mode:</em><br>shift left			vi
vi visual y	vi	command			y	<em>visual mode:</em><br />copy marked text			vi
vi visual d	vi	command			d	<em>visual mode:</em><br>delete marked text			vi
vi visual ~	vi	command			~	Switch case of the character under the cursor and move the cursor to the right. If a [count] is given, do that many characters.			vi
vi copy-paste yy	vi	command			yy	copy a line			vi
vi copy-paste 2yy	vi	command			2yy	copy 2 lines			vi
vi copy-paste yw	vi	command			yw	copy word			vi
vi copy-paste y$	vi	command			y$	copy to end of line			vi
vi copy-paste p	vi	command			p	paste the clipboard after cursor			vi
vi copy-paste P	vi	command			P	paste before cursor			vi
vi copy-paste dd	vi	command			dd	cut a line			vi
vi copy-paste dw	vi	command			dw	cut the current word			vi
vi copy-paste x	vi	command			x	Delete [count] characters under and after the cursor<br>cut current character (same as <kbd>Del</kbd>)			vi
vi exiting :w	vi	command			:w	save the file (but don't exit)			vi
vi exiting :wq	vi	command			:wq	save current file and quit (same as <code>:wq</code>?)			vi
vi exiting :q[uit]	vi	command			:q[uit]	quit (fails if anything has changed)			vi
vi exiting :q[uit]!	vi	command			:q[uit]!	throw away changes and quit (same as <code>ZQ</code>)			vi
vi search /<i>pattern</i>	vi	command			/<i>pattern</i>	search for pattern			vi
vi search ?<i>pattern</i>	vi	command			?<i>pattern</i>	search backward for <code>pattern</code>			vi
vi search n	vi	command			n	repeat search in same direction			vi
vi search N	vi	command			N	repeat search in opposite direction			vi
vi search :%s/<i>old</i>/<i>new</i>/g	vi	command			:%s/<i>old</i>/<i>new</i>/g	replace all <code>old</code> with <code>new</code> throughout file			vi
vi search :%s/<i>old</i>/<i>new</i>/gc	vi	command			:%s/<i>old</i>/<i>new</i>/gc	replace all <code>old</code> with <code>new</code> throughout file with confirmations			vi
vi multifile :e <i>filename</i>	vi	command			:e <i>filename</i>	<em>multiple files:</em><br>Edit<i>filename</i> in a new buffer			vi
vi multifile :bn[ext]	vi	command			:bn[ext]	<em>multiple files:</em><br>go to next buffer			vi
vi multifile :bprev (of :bp)	vi	command			:bprev (of :bp)	<em>multiple files:</em><br>go to previous buffer			vi
vi multifile :bd	vi	command			:bd	<em>multiple files:</em><br>delete a buffer (close a file)			vi
vi multifile :sp <i>filename</i>	vi	command			:sp <i>filename</i>	<em>multiple files:</em><br>Open a file in a new buffer and split window			vi
vi multifile ctrl+ws	vi	command			ctrl+ws	<em>multiple files:</em><br>Split windows			vi
vi multifile ctrl+ww	vi	command			ctrl+ww	<em>multiple files:</em><br>switch between windows			vi
vi multifile ctrl+wq	vi	command			ctrl+wq	<em>multiple files:</em><br>Quit a window			vi
vi multifile ctrl+wv	vi	command			ctrl+wv	<em>multiple files:</em><br>Split windows vertically			vi
vi insert ea	vi	command			ea	<em>insert mode:</em><br>append at end of word			vi
vi insert Esc	vi	command			Esc	<em>insert mode:</em><br>exit insert mode			vi
vi copy-paste Del	vi	command			Del	Delete [count] characters under and after the cursor<br>cut current character (same as <code>x</code>)			vi
vi copy-paste X	vi	command			X	Delete [count] characters before the cursor			marked vi
vi exiting ZQ	vi	command			ZQ	throw away changes and quit (same as <code>:q[uit]!</code>)			vi
vi exiting :cq[uit]	vi	command			:cq[uit]	<i>always</i> throw away changes and quit			vi
vi exiting ZZ	vi	command			ZZ	save current file and quit (same as <code>ZZ</code>?)			vi
vi exiting :[range]wq[!]	vi	command			:[range]wq[!]	save lines in <i>range</i> in current file and quit			vi
vi exiting :wq!	vi	command			:wq!	<i>always</i> save current file and quit			vi
vi exiting :wq <i>filename</i>	vi	command			:wq	save <i>filename</i> and quit if not editing the last			vi
vi exiting :wq! <i>filename</i>	vi	command			:wq!	save <i>filename</i> and <i>always</i> quit			vi
vi insert :r[ead] [name]	vi	command			:r[ead] [name]	Insert the file [name] below the cursor.			vi
vi insert :r[ead] !{cmd}	vi	command			:r[ead] !{cmd}	Execute {cmd} and insert its standard output below the cursor.			vi
vi insert gI	vi	command			gI	<em>insert mode:</em><br>Insert text in column 1 [count] times.			vi
vi editing :e[dit]	vi	command			:e[dit]	Edit the current file. This is useful to re-edit the current file, when it has been changed outside of Vim.			vi
vi editing :e[dit]!	vi	command			:e[dit]!	Edit the current file always. Discard any changes to the current buffer. This is useful if you want to start all over again.			vi
vi multifile :e! <i>filename</i>	vi	command			:e! <i>filename</i>	<em>multiple files:</em><br>Edit <i>filename</i> always. Discard any changes to the current buffer.			vi
vi multifile gf	vi	command			gf	"Edit the file whose name is under or after the cursor. Mnemonic: ""goto file""."			vi
vi visual d{motion}	vi	command			d{motion}	Delete text that {motion} moves over			vi
vi visual dd	vi	command			dd	Delete [count] lines			vi
vi visual D	vi	command			D	Delete the characters under the cursor until the end of the line			vi
vi visual {Visual}x	vi	command			{Visual}x	Delete the highlighted text (for {Visual} see Selecting Text).&nbsp;(This is a&nbsp;throwback to the old days of the typewriter, when you deleted things by typing&nbsp;<kbd>xxxx</kbd>&nbsp;over them.)			vi
vi visual {Visual}d	vi	command			{Visual}d	Delete the highlighted text (for {Visual} see Selecting Text).			vi
vi visual {Visual}CTRL-H	vi	command			{Visual}CTRL-H	When in Select mode: Delete the highlighted text			vi
vi visual {Visual}	vi	command			{Visual}	When in Select mode: Delete the highlighted text			marked vi
vi visual {Visual}X	vi	command			{Visual}X	Delete the highlighted lines			vi
vi visual {Visual}D	vi	command			{Visual}D	Delete the highlighted lines			vi
vi visual :[range]d[elete]	vi	command			:[range]d[elete]	Delete [range] lines (default: current line)			vi
vi visual :[range]d[elete] {count}	vi	command			:[range]d[elete] {count}	Delete {count} lines, starting with [range]			vi
vi visual r{char}	vi	command			r{char}	replace the character under the cursor with {char}.			vi
vi visual R	vi	command			R	Enter Insert mode, replacing characters rather than inserting			vi
vi visual ~{motion}	vi	command			~{motion}	switch case of {motion} text.			vi
vi visual {Visual}~	vi	command			{Visual}~	Switch case of highlighted text			vi
vi undo-redo u	vi	command			u	Undo [count] changes.			vi
vi undo-redo :u[ndo]	vi	command			:u[ndo]	Undo one change.			vi
vi undo-redo Ctrl+R	vi	command			Ctrl+R	Redo [count] changes which were undone.			vi
vi undo-redo :red[o]	vi	command			:red[o]	Redo one change which was undone.			vi
vi undo-redo U	vi	command			U	Undo all latest changes on one line. {Vi: while not moved off of it}			vi
vi undo-redo .	vi	command			.	Repeat last change, with count replaced with [count].			vi
vim&nbsp;:set showmode	vim	command			:set showmode	To be able to see what mode you are in, type this command.			vi
vim&nbsp;J	vim	command			J	delete line break at end of line			vi
vim :set autoindent	vim	command			:set autoindent	<div>This makes Vim use the indent of the previous line for a newly created line.&nbsp;Thus there is the same amount of white space before the new line. For example&nbsp;when pressing &lt;Enter&gt; in Insert mode, and when using the <code>o</code> command to open a&nbsp;new line.</div>			vi
vim :set ruler	vim	command			:set ruler	<div><div>Always display the current cursor position in the lower right corner of the</div><div>Vim window.</div></div>			vi
vim :set history=50	vim	command			:set history=50	<div><div><div>Keep 50 commands and 50 search patterns in the history. &nbsp;Use another number if&nbsp;you want to remember fewer or more lines.</div></div></div>			vi
vim :set incsearch	vim	command			:set incsearch	<div><div><div><div>Display the match for a search pattern when halfway typing it.</div></div></div></div>			vi
"vim notation [""x]"	vim	notation			"[""x]"	"An optional register designation where text can be stored. The x is a single character between <code>a</code> and <code>z</code> or <code>A</code> and <code>Z</code> or <code>""'</code>, and in some cases (with the put                 command) between <code>0</code> and <code>9</code>, <code>%</code>, <code>#</code>, or others.  The                 uppercase and lowercase letter designate the same register,                 but the lowercase letter is used to overwrite the previous                 register contents, while the uppercase letter is used to                 append to the previous register contents.  Without the <code>""x</code> or                 with <code>""""</code> the stored text is put into the unnamed register."	<br />		vi
vim notation&nbsp;[]	vim	notation			[]	Optional characters.	<br />		vi
vim notation&nbsp;[count]	vim	notation			[count]	An optional number that may precede the command to multiply or iterate the command. If no number is given, a count of one is used, unless otherwise noted. Note that in this manual the <code>[count]</code> is not mentioned in the description of the command, but only in the explanation. This was done to make the commands easier to look up. If the <code>showcmd</code> option is on, the (partially) entered count is shown at the bottom of the window. You can use <code>&lt;Del&gt;</code> to erase the last digit.	<br />		vi
vim notation&nbsp;{}	vim	notation			{}	Denote parts of the command which must appear,                 but which can take a number of different values.	<code></code><br />		vi
vim notation&nbsp;{char1-char2}	vim	notation			{char1-char2}        	A single character from the range <i>char1</i> to <i>char2</i>.	<code></code>For example:&nbsp;<code>{a-z}</code>&nbsp;is a lowercase letter. Multiple ranges may be concatenated. For example,&nbsp;<code>{a-zA-Z0-9}</code>&nbsp;is any alphanumeric character.		vi
vim notation&nbsp;{motion}	vim	notation			{motion}        	"<p>A command that moves the cursor. This is used after an operator command to move over the text that is to be operated upon.</p> <ul> <li style=""text-align: left; "">If the motion includes a count and the operator also has a count, the two counts are multiplied. For example: <code>2d3w</code> deletes six words.</li> <li style=""text-align: left; "">The motion can be backwards, e.g. <code>db</code> to delete to the start of the word.</li> <li style=""text-align: left; "">The motion can also be a mouse click. The mouse is not supported in every terminal though.</li> <li style=""text-align: left; "">The <code>:omap</code> command can be used to map characters while an operator is pending.</li> <li style=""text-align: left; "">Ex commands can be used to move the cursor. This can be used to call a function that does some complicated motion. The motion is always characterwise exclusive, no matter what "":"" command is used. This means it's impossible to include the last character of a line without the line break (unless <code>virtualedit</code> is set). If the Ex command changes the text before where the operator starts or jumps to another buffer the result is unpredictable. It is possible to change the text further down. Jumping to another buffer is possible if the current buffer is not unloaded.</li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU2MTgwNDQsICJpZCI6ICIxNDk1NjE3MjY2NDg1LTAwNiIsICJtZCI6ICJBIGNvbW1hbmQgdGhhdCBtb3ZlcyB0aGUgY3Vyc29yLiBUaGlzIGlzIHVzZWQgYWZ0ZXIgYW4gb3BlcmF0b3IgY29tbWFuZCB0byBtb3ZlIG92ZXIgdGhlIHRleHQgdGhhdCBpcyB0byBiZSBvcGVyYXRlZCB1cG9uLlxuICBcbiogSWYgdGhlIG1vdGlvbiBpbmNsdWRlcyBhIGNvdW50IGFuZCB0aGUgb3BlcmF0b3IgYWxzbyBoYXMgYSBjb3VudCwgdGhlIHR3byBjb3VudHMgYXJlIG11bHRpcGxpZWQuIEZvciBleGFtcGxlOiBgMmQzd2AgZGVsZXRlcyBzaXggd29yZHMuXG4qIFRoZSBtb3Rpb24gY2FuIGJlIGJhY2t3YXJkcywgZS5nLiBgZGJgIHRvIGRlbGV0ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHdvcmQuXG4qIFRoZSBtb3Rpb24gY2FuIGFsc28gYmUgYSBtb3VzZSBjbGljay4gVGhlIG1vdXNlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gZXZlcnkgdGVybWluYWwgdGhvdWdoLlxuKiBUaGUgYDpvbWFwYCBjb21tYW5kIGNhbiBiZSB1c2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHdoaWxlIGFuIG9wZXJhdG9yIGlzIHBlbmRpbmcuXG4qIEV4IGNvbW1hbmRzIGNhbiBiZSB1c2VkIHRvIG1vdmUgdGhlIGN1cnNvci4gVGhpcyBjYW4gYmUgdXNlZCB0byBjYWxsIGEgZnVuY3Rpb24gdGhhdCBkb2VzIHNvbWUgY29tcGxpY2F0ZWQgbW90aW9uLiBUaGUgbW90aW9uIGlzIGFsd2F5cyBjaGFyYWN0ZXJ3aXNlIGV4Y2x1c2l2ZSwgbm8gbWF0dGVyIHdoYXQgJnF1b3Q7OiZxdW90OyBjb21tYW5kIGlzIHVzZWQuIFRoaXMgbWVhbnMgaXQmYXBvcztzIGltcG9zc2libGUgdG8gaW5jbHVkZSB0aGUgbGFzdCBjaGFyYWN0ZXIgb2YgYSBsaW5lIHdpdGhvdXQgdGhlIGxpbmUgYnJlYWsgKHVubGVzcyBgdmlydHVhbGVkaXRgIGlzIHNldCkuIElmIHRoZSBFeCBjb21tYW5kIGNoYW5nZXMgdGhlIHRleHQgYmVmb3JlIHdoZXJlIHRoZSBvcGVyYXRvciBzdGFydHMgb3IganVtcHMgdG8gYW5vdGhlciBidWZmZXIgdGhlIHJlc3VsdCBpcyB1bnByZWRpY3RhYmxlLiBJdCBpcyBwb3NzaWJsZSB0byBjaGFuZ2UgdGhlIHRleHQgZnVydGhlciBkb3duLiBKdW1waW5nIHRvIGFub3RoZXIgYnVmZmVyIGlzIHBvc3NpYmxlIGlmIHRoZSBjdXJyZW50IGJ1ZmZlciBpcyBub3QgdW5sb2FkZWQuXG4ifQ==---->"			vi
vim notation&nbsp;{Visual}	vim	notation			{Visual}        	A selected text area.  It is started with the <code>v</code>, <code>V</code>, or                 <kbd>CTRL</kbd> + <kbd>V</kbd> command, then any cursor movement command can be used                 to change the end of the selected text.                 This is used before an operator command to highlight the                 text that is to be operated upon.	<code></code><br />		vi
vim notation&nbsp;&lt;character&gt;	vim	notation			&lt;character&gt;        	A special character from the table below, optionally with                 modifiers, or a single ASCII character with modifiers.	<code></code><br />		vi
vim notation&nbsp;'c'	vim	notation			'c'        	A single ASCII character.	<code></code><br />		vi
vim notation CTRL-{char}	vim	notation			CTRL-{char}        	<code>{char}</code> typed as a control character; that is, typing <code>{char}</code>                 while holding the <kbd>CTRL</kbd> key down.  The case of <code>{char}</code> does not                 matter; thus <kbd>CTRL</kbd>+<kbd>A</kbd>&nbsp;and <kbd>CTRL</kbd>+<kbd>a</kbd> are equivalent.  But on some                 terminals, using the <kbd>SHIFT</kbd> key will produce another code,                 don’t use it then.	<code></code><br />		vi
vim notation&nbsp;'option'	vim	notation			'option'        	An option, or parameter, that can be set to a value.	<code></code><br />		vi
"vim notation&nbsp;""command"""	vim	notation			"""command""        "	A reference to a command that you can type.	<code></code><br />		vi
vim g8	vim	command			g8	Print the hex values of the bytes used in the                         character under the cursor, assuming it is in UTF-8 encoding.  This also shows composing characters.  The                         value of <code>maxcombine</code> doesn't matter.	Example of a character with two composing characters:<div><br /></div><div>e0 b8 81 + e0 b8 b9 + e0 b9 89</div><div><br /></div><div>{not in Vi}</div><div>{only when compiled with the <code>+multi_byte</code> feature}</div>		vi
vim 8g8	vim	command			8g8	Find an illegal UTF-8 byte sequence at or after the                         cursor.  This works in two situations:<div><br /></div><div>1. when <code>encoding</code> is any 8-bit encoding</div><div>2. when <code>encoding</code> is <code>utf-8</code> and <code>fileencoding</code> is                            any 8-bit encoding</div><div><br /></div><div>Thus it can be used when editing a file that was                         supposed to be UTF-8 but was read as if it is an 8-bit                         encoding because it contains illegal bytes.                         Does not wrap around the end of the file.                         Note that when the cursor is on an illegal byte or the                         cursor is halfway a multi-byte character the command                         won't move the cursor.</div>	<div>{not in Vi}</div><div>{only when compiled with the <code>+multi_byte</code> feature}</div>		vi
vim&nbsp;:!{cmd}	vim	command			:!{cmd}	Execute <code>{cmd}</code> with the shell.  See also the <code> shell</code> and <code>shelltype</code> option.                         Any <code>!</code> in <code>{cmd}</code> is replaced with the previous                         external command (see also <code>cpoptions</code>).  But not when                         there is a backslash before the <code>!</code>, then that                         backslash is removed.<div><br /></div><div>Example: <code>:!ls</code> followed by <code>:!echo ! \! \\!</code> executes <code>echo ls ! \!</code>.                         After the command has been executed, the timestamp of                         the current file is checked.                         A <code>|</code> in <code>{cmd}</code> is passed to the shell, you cannot use                         it to append a Vim command. A newline character ends <code>{cmd}</code>, what follows is                         interpreted as a following <code>:</code> command.  However, if                         there is a backslash before the newline it is removed                         and <code>{cmd}</code> continues.  It doesn't matter how many                         backslashes are before the newline, only one is                         removed.                         On Unix the command normally runs in a non-interactive                         shell.  If you want an interactive shell to be used                         (to use aliases) set <code>shellcmdflag</code> to <code>-ic</code>. Vim redraws the screen after the command is finished,                         because it may have printed any text.  This requires a                         hit-enter prompt, so that you can read any messages.                         To avoid this use:                                 <code>:silent !{cmd}</code>. The screen is not redrawn then, thus you have to use                         <kbd>CTRL</kbd>+<kbd>L</kbd> or <code>:redraw!</code> if the command did display                         something.</div>	<div><br /></div>		vi
vim&nbsp;:!!	vim	command			:!!	Repeat last <code>:!{cmd}</code>.	<div><br /></div>		vi
<b>stdout</b> represented by this number	1					
<b>stderr</b>&nbsp;represented by this number	2					
<!--anki-->redirect&nbsp;<b>stderr</b>&nbsp;to file	<code>... 2&gt; <i>file</i></code>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">grep da * 2&gt; grep-errors.txt </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU3MzU4MjIsICJpZCI6ICIxNDk1NzM1NTg1MzAwLTAwMiIsICJtZCI6ICIgICAgZ3JlcCBkYSAqIDImZ3Q7IGdyZXAtZXJyb3JzLnR4dFxuIn0=---->"	y		http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html	
<!--anki-->redirect&nbsp;<b>stdout</b>&nbsp;to file	<code>... &gt; <i>file</i></code>	<div><code>ls -l &gt; ls-l.txt</code></div>	y		http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html	
<!--anki-->redirect&nbsp;<b>stdout</b>&nbsp;to&nbsp;<b>stderr</b>&nbsp;file	<code>...&nbsp;1&gt;&amp;2</code>	<div><code>grep da * 1&gt;&amp;2</code></div>	y		http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html	
<!--anki-->redirect&nbsp;<b>stderr</b>&nbsp;to&nbsp;<b>stdout</b>	<code>... 2&gt;&amp;1</code>	<code>grep * 2&gt;&amp;1</code><div><br /></div><div>Here, the <i>stderr</i> portion of the command is sent to <i>stdout</i>, if you pipe to <code>less</code>, you'll see that lines that normally 'dissapear' (as they are written to <i>stderr</i>) are being kept now (because they're on <i>stdout</i>).&nbsp;</div>	y		http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html	
<!--anki-->redirect&nbsp;<b>stderr</b>&nbsp;and&nbsp;<b>stdout</b>&nbsp;to <b>file</b>	<code>... &amp;&gt;&nbsp;<i>file</i></code>	<div>This will place every output of a program to a file. This is suitable sometimes for cron entries, if you want a command to pass in absolute silence.</div><div><br /></div><div><code>rm -f $(find / -name core) &amp;&gt; /dev/null&nbsp;</code></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>This (thinking on the cron entry) will delete every file <code>core</code> in any directory. Notice that you should be pretty sure of what a command is doing if you are going to wipe its output.</div>	y		http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html	
delete lines in <code>file</code> containing <code>pattern</code> using <code>awk</code>	<code>awk '!/pattern/' file &gt; temp &amp;&amp; mv temp file</code>		y		https://stackoverflow.com/a/5413132/172602	
delete lines in <code>file</code> containing <code>pattern</code> using ruby	<code>ruby -i.bak -ne 'print if not /pattern/' file</code>		y		https://stackoverflow.com/a/5413132/172602	
delete lines in <code>file</code> containing <code>pattern</code> using <code>perl</code>	"<code>perl -ni.bak -e ""print unless /pattern/"" file</code>"		y		https://stackoverflow.com/a/5413132/172602	
delete lines in <code>file</code> containing <code>pattern</code> using <code>bash</code>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">while</span> <span style=""color: #24909d"">read</span> -r line <span style=""color: #6ab825; font-weight: bold"">do</span>   <span style=""color: #d0d0d0"">[[</span> ! <span style=""color: #40ffff"">$s</span> <span style=""color: #d0d0d0"">=</span>~ pattern <span style=""color: #d0d0d0"">]]</span> <span style=""color: #d0d0d0"">&amp;&amp;</span> <span style=""color: #24909d"">echo</span> <span style=""color: #ed9d13"">""</span><span style=""color: #40ffff"">$line</span><span style=""color: #ed9d13"">""</span> <span style=""color: #6ab825; font-weight: bold"">done</span> &lt;file &gt; o mv o file </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU3MzY1ODYsICJpZCI6ICIxNDk1NzM2NTQyMDc0LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIHdoaWxlIHJlYWQgLXIgbGluZVxuICAgIGRvXG4gICAgICBbWyAhICRzID1+IHBhdHRlcm4gXV0gJmFtcDsmYW1wOyBlY2hvICZxdW90OyRsaW5lJnF1b3Q7XG4gICAgZG9uZSAmbHQ7ZmlsZSAmZ3Q7IG9cbiAgICBtdiBvIGZpbGVcbiJ9---->"		y		https://stackoverflow.com/a/5413132/172602	
delete lines in <code>file</code> containing <code>pattern</code> using GNU&nbsp;<code>grep</code>	"<div><code>grep -v ""<i>pattern</i>""<i> file</i> &gt; temp &amp;&amp; mv temp <i>file</i></code></div><div><br /></div><div>The <code>grep</code> version does not work when every line matches the pattern. Better do:</div><div><code>grep -v ""<i>pattern</i>"" <i>file</i> &gt; temp; mv temp <i>file</i></code></div><div>This might apply to some of the other examples depending on the return value.</div>"		y		https://stackoverflow.com/a/5413132/172602	marked
delete lines in <code>file</code> containing <code>pattern</code> using&nbsp;<code>sed</code>	<div><code>sed -i '/<i>pattern</i>/d' <i>file</i></code></div><div><code>sed -n '/<i>pattern</i>/!p' <i>file</i></code></div><div><br /></div><div>(printing the inverse is faster than actual deletion)</div><div><br /></div><div>the sed example have a different behaviour, it only greps! it should be something like <code>sed -n -i '/<i>pattern</i>/!p' <i>file</i></code></div>		y		https://stackoverflow.com/a/5413132/172602	
portable temp dir	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #40ffff"">mytmpdir</span><span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">`</span>mktemp -d 2&gt;/dev/null <span style=""color: #d0d0d0"">||</span> mktemp -d -t <span style=""color: #ed9d13"">'mytmpdir'`</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTYxNTg3NTYsICJpZCI6ICIxNDk1NzQxNjE1MDcyLTAwMSIsICJtZCI6ICIgICAgOjo6c2ggIFxuICAgIG15dG1wZGlyPWBta3RlbXAgLWQgMiZndDsvZGV2L251bGwgfHwgbWt0ZW1wIC1kIC10ICZhcG9zO215dG1wZGlyJmFwb3M7YFxuIn0=---->"	"The following is what I ended up using to reliably create a temporary directory that works on both Linux and Darwin (all versions before Mac OS X 10.11), without hardcoding&nbsp;<code>$TMPDIR</code>&nbsp;or&nbsp;<code>/tmp</code>:<pre class=""lang-sh prettyprint prettyprinted""></pre><h3>Background:</h3><p>The GNU mktemp command requires no arguments. Plain&nbsp;<code>mktemp</code>&nbsp;will create a temporary file in the system temporary directory.</p><p>Plain&nbsp;<code>mktemp -d</code>&nbsp;will create a temporary directory, which is what you'd want to use on Linux.</p><pre class=""lang-sh prettyprint prettyprinted""><code><span class=""pun"">(</span><span class=""pln"">gnu</span><span class=""pun"">-</span><span class=""pln"">coreutils</span><span class=""pun"">)</span><span class=""pln"">$ man mktemp </span><span class=""com""># If DIR is not specified, uses $TMPDIR if set, else /tmp.</span></code></pre><p>By default it uses template&nbsp;<code>tmp.XXXXXXXXXX</code>&nbsp;expanded relative to the default temporary directory.</p><p>OSX's mktemp command requires this template, it has no default. The syntax for the template on OSX is compatible with that of GNU's. OSX's mktemp has a&nbsp;<code>-t</code>&nbsp;option that means something else. The&nbsp;<code>-t</code>&nbsp;option is documented as ""prefix"". It is expanded to&nbsp;<code>$TMPDIR/{prefix}.XXXXXXXX</code>, so it adds the Xs to it automatically (e.g.&nbsp;<code>mktemp -d -t example</code>&nbsp;could create&nbsp;<code>$TMPDIR/example.zEJZWCTQ</code>).</p><p>I was surprised to find that in various Linux environments&nbsp;<code>$TMPDIR</code>&nbsp;is&nbsp;<strong>not</strong>&nbsp;set by default (many tools support it when set, but still have to default to&nbsp;<code>/tmp</code>). Which meant passing&nbsp;<code>$TMPDIR/example.XXXXXXXX</code>&nbsp;to mktemp or mkdir was not an option (as it would cause the path to end up as a subdirectory of the root directory).</p><p>On OSX&nbsp;<code>$TMPDIR</code>&nbsp;is always set and (at least in the default shell) it is not set to&nbsp;<code>/tmp</code>&nbsp;(which is a symlink to&nbsp;<code>/private/tmp</code>) but to&nbsp;<code>/var/folders/dx/*****_*************/T</code>. So we should honour that if we can.</p><p>In conclusion the following is what I ended up using to reliably create a temporary directory that works on both Linux and Darwin (Mac OS X), without hardcoding&nbsp;<code>$TMPDIR</code>&nbsp;or&nbsp;<code>/tmp</code>:</p><pre class=""lang-sh prettyprint prettyprinted""><code><span class=""pln"">mytmpdir</span><span class=""pun"">=</span><span class=""str"">`mktemp -d 2&gt;/dev/null || mktemp -d -t 'mytmpdir'`</span></code></pre><p>The first part is for Linux. This command will fail on Darwin (Mac OS X) with error status code&nbsp;<code>1</code>&nbsp;responding with ""usage: ..."". That's why we ignore stderr and instead then execute the Mac variant. The&nbsp;<code>mytmpdir</code>&nbsp;prefix is only used on Mac.</p>"			https://unix.stackexchange.com/a/84980/39419	
<code>open</code> from pipe	"The <code>-f</code> command takes input from a STDIN pipe, creates a temporary file with it, then opens that in the specified app. You may have seen this yesterday in my tip for opening man pages in Preview. That trick uses PostScript output, but you can do the same with any type of data. Here’s a trick for pasting your current clipboard text to Marked. <div class=""bogus-wrapper""><notextile><figure class=""code""><figcaption><span></span></figcaption><div class=""highlight""><pre><code class=""bash""><span class=""line"">pbpaste | open -f -a Marked<span class=""se"">\ </span>2 </span></code></pre></div></figure></notextile></div> <p>Of course, Marked 2 can do that with just ⌘⇧V, so it’s less handy. Here’s a better one: combine a bunch of Markdown files in a folder into one temporary document with Markdown horizontal rules between them. I use this to quickly view all of my QuickQuestion answers from my nvALT folder (these filenames always start with “??”, adjust as needed):</p> <div class=""bogus-wrapper""><notextile><figure class=""code""><figcaption><span></span></figcaption><div class=""highlight""><pre><code class=""bash""><span class=""line"">awk <span class=""s1"">'FNR==1{print ""\n---\n""}1'</span> <span class=""se"">\?\?</span>*.md | open -f -a Marked<span class=""se"">\ </span>2 </span></code></pre></div></figure></notextile></div> <p><span class=""pullquote left"" data-pullquote=""The awk trick is kind of cool on its own""> The <code>awk</code> trick is kind of cool on its own. When you just use <code>cat</code>, you don’t get any separation between files, meaning that using it for Markdown output isn’t great. The command <code>awk 'FNR==1{print ""\n---\n1'</code> will take all of the input files and print them with <code>---</code> and newlines (or whatever you specify in the print command) between each one.</span></p>"				http://brettterpstra.com/2014/08/06/shell-tricks-the-os-x-open-command/	
detecting file moves &amp; renames with <code>rsync</code>	<div>There is a `––fuzzy` option to save bandwidth by building upon similar files on the target side, but only in the same directory. </div><div><br /></div><div>Do standard sync, then locally copy the tree as hardlinks, then sync both so hardlinks point correctly, then move.</div>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">rsync -avHP --delete-after ~/family/Photos remotebox:backups <span style=""color: #24909d"">cd</span> ~/family cp -rlp Photos Photos-work rsync -avHP --delete-after --no-inc-recursive ~/family/Photos ~/family/Photos-work remotebox:backups </pre></div> <p>Finalize by:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">mv Photos Photos-OLD mv Photos-work Photos </pre></div> <ul> <li style=""text-align: left; ""> <blockquote> <p>I use a derivative of this method, by creating a separate hard-links directory with md5-filenames. This gets rid of any duplicate files as well. Any files in this hard links directory with link count 1 are removed. Any files in the albums tree without the same inode to be found in the hard links tree are hard-linked into the hard links tree by using an MD5 of the file. Before I rsync I update the hard links dir, so when my wife decides to make a beautiful photobook and copies and moves lots of photos around, my ADSL doesn't get swamped when backing up my local photo store.</p> </blockquote> </li> <li style=""text-align: left; ""> <blockquote> <p>I started out with a reorganized source directory, and to avoid a big copy to get the destination the same, I did something similar to this. I made a local hard-link copy of the source as described, then flattened the original and the remote copy with <code>find in -type f -print0 | xargs -0 mv -n -t flat</code>. This skips flattening files of the same name, which will just be recopied during the sync (most had unique names so this recopy was minor). Then I did as described in this blog entry and avoided a massive copy. At this point I then had original and copy in sync, so could in the future do as the blog describes.</p> </blockquote> </li> </ul><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTU3ODQ0MDksICJpZCI6ICIxNDk1NzgzNzc3MzI1LTAwMiIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIHJzeW5jIC1hdkhQIC0tZGVsZXRlLWFmdGVyIH4vZmFtaWx5L1Bob3RvcyByZW1vdGVib3g6YmFja3Vwc1xuICAgIGNkIH4vZmFtaWx5XG4gICAgY3AgLXJscCBQaG90b3MgUGhvdG9zLXdvcmtcbiAgICByc3luYyAtYXZIUCAtLWRlbGV0ZS1hZnRlciAtLW5vLWluYy1yZWN1cnNpdmUgfi9mYW1pbHkvUGhvdG9zIH4vZmFtaWx5L1Bob3Rvcy13b3JrIHJlbW90ZWJveDpiYWNrdXBzXG4gIFxuRmluYWxpemUgYnk6XG4gIFxuICAgIDo6OmJhc2hcbiAgICBtdiBQaG90b3MgUGhvdG9zLU9MRFxuICAgIG12IFBob3Rvcy13b3JrIFBob3Rvc1xuICBcbiAgXG4qICZndDsgSSB1c2UgYSBkZXJpdmF0aXZlIG9mIHRoaXMgbWV0aG9kLCBieSBjcmVhdGluZyBhIHNlcGFyYXRlIGhhcmQtbGlua3MgZGlyZWN0b3J5IHdpdGggbWQ1LWZpbGVuYW1lcy4gVGhpcyBnZXRzIHJpZCBvZiBhbnkgZHVwbGljYXRlIGZpbGVzIGFzIHdlbGwuIEFueSBmaWxlcyBpbiB0aGlzIGhhcmQgbGlua3MgZGlyZWN0b3J5IHdpdGggbGluayBjb3VudCAxIGFyZSByZW1vdmVkLiBBbnkgZmlsZXMgaW4gdGhlIGFsYnVtcyB0cmVlIHdpdGhvdXQgdGhlIHNhbWUgaW5vZGUgdG8gYmUgZm91bmQgaW4gdGhlIGhhcmQgbGlua3MgdHJlZSBhcmUgaGFyZC1saW5rZWQgaW50byB0aGUgaGFyZCBsaW5rcyB0cmVlIGJ5IHVzaW5nIGFuIE1ENSBvZiB0aGUgZmlsZS4gQmVmb3JlIEkgcnN5bmMgSSB1cGRhdGUgdGhlIGhhcmQgbGlua3MgZGlyLCBzbyB3aGVuIG15IHdpZmUgZGVjaWRlcyB0byBtYWtlIGEgYmVhdXRpZnVsIHBob3RvYm9vayBhbmQgY29waWVzIGFuZCBtb3ZlcyBsb3RzIG9mIHBob3RvcyBhcm91bmQsIG15IEFEU0wgZG9lc24mYXBvczt0IGdldCBzd2FtcGVkIHdoZW4gYmFja2luZyB1cCBteSBsb2NhbCBwaG90byBzdG9yZS5cbiogJmd0OyBJIHN0YXJ0ZWQgb3V0IHdpdGggYSByZW9yZ2FuaXplZCBzb3VyY2UgZGlyZWN0b3J5LCBhbmQgdG8gYXZvaWQgYSBiaWcgY29weSB0byBnZXQgdGhlIGRlc3RpbmF0aW9uIHRoZSBzYW1lLCBJIGRpZCBzb21ldGhpbmcgc2ltaWxhciB0byB0aGlzLiBJIG1hZGUgYSBsb2NhbCBoYXJkLWxpbmsgY29weSBvZiB0aGUgc291cmNlIGFzIGRlc2NyaWJlZCwgdGhlbiBmbGF0dGVuZWQgdGhlIG9yaWdpbmFsIGFuZCB0aGUgcmVtb3RlIGNvcHkgd2l0aCBgZmluZCBpbiAtdHlwZSBmIC1wcmludDAgfCB4YXJncyAtMCBtdiAtbiAtdCBmbGF0YC4gVGhpcyBza2lwcyBmbGF0dGVuaW5nIGZpbGVzIG9mIHRoZSBzYW1lIG5hbWUsIHdoaWNoIHdpbGwganVzdCBiZSByZWNvcGllZCBkdXJpbmcgdGhlIHN5bmMgKG1vc3QgaGFkIHVuaXF1ZSBuYW1lcyBzbyB0aGlzIHJlY29weSB3YXMgbWlub3IpLiBUaGVuIEkgZGlkIGFzIGRlc2NyaWJlZCBpbiB0aGlzIGJsb2cgZW50cnkgYW5kIGF2b2lkZWQgYSBtYXNzaXZlIGNvcHkuIEF0IHRoaXMgcG9pbnQgSSB0aGVuIGhhZCBvcmlnaW5hbCBhbmQgY29weSBpbiBzeW5jLCBzbyBjb3VsZCBpbiB0aGUgZnV0dXJlIGRvIGFzIHRoZSBibG9nIGRlc2NyaWJlcy5cbiJ9---->"	<div>y</div>		https://lincolnloop.com/blog/detecting-file-moves-renames-rsync/	
ls exit status 0	<div>ls</div>	<div>exit status</div>			0	OK			ls
ls exit status 1	<div>ls</div>	<div>exit status</div>			1	minor problems (e.g., cannot access subdirectory)			ls
ls exit status 2	<div>ls</div>	<div>exit status</div>			2	serious trouble (e.g., cannot access command-line               argument)			ls
ls	<div>ls</div>	<div><br /></div>				List information about the FILEs (the current directory by default).        Sort entries alphabetically if none of <b>-cftuvSUX </b>nor <b>--sort </b>is        specified.		y	ls
ls color	<div>ls</div>			--color[=<i>WHEN</i>]		colorize the output; <i><code>WHEN</code></i> can be <code>always</code> (default if               omitted), <code>auto</code>, or <code>never</code>;        Using color to distinguish file types is disabled both by default and        with&nbsp;<code>--color=<i>never</i></code>.  With&nbsp;<code>--color=<i>auto</i></code>, <code>ls</code> emits color codes only        when standard output is connected to a terminal.  The <code>LS_COLORS</code>        environment variable can change the settings.  Use the <code>dircolors</code>        command to set it.			ls
ls block-size	ls			--block-size=<i>SIZE</i>		scale sizes by <code><i>SIZE</i></code> before printing them; e.g., <code><strike>--block-size</strike>=M</code> prints sizes in units of 1,048,576 bytes; The <code><i>SIZE</i></code> argument is an integer and optional unit (example: <code>10K</code> is        10*1024).  Units are <code>K,M,G,T,P,E,Z,Y</code> (powers of 1024) or <code>KB,MB,...</code>        (powers of 1000).			ls
ls -a	ls		-a	--all		do not ignore entries starting with <code>.</code>			ls
ls -A	ls		-A	--almost-all		do not list implied <code>.</code> and <code>..</code>			ls
ls --author	ls			--author		with <code>-l</code>, print the author of each file			ls
ls -b	ls		-b	--escape		print C-style escapes for nongraphic characters			ls
ls -B	ls		-B	--ignore-backups		do not list implied entries ending with <code>~</code>			ls
ls -c	ls		-c			with <code>-lt</code>: sort by, and show, ctime (time of last modification of file status information); with <code>-l</code>: show ctime and sort by name; otherwise: sort by ctime, newest first			ls
ls -C	ls		-C			list entries by columns			ls
ls -d	ls		-d	--directory		list directories themselves, not their contents			ls
ls -D	ls		-D	--dired		generate output designed for Emacs' dired mode			ls
ls -f	ls		-f			do not sort, enable <code>-aU</code>, disable <code>-ls --color</code>			ls
ls -F	ls		-F	--classify		append indicator (one of <code>*/=&gt;@|</code>) to entries	<ul> <li><code>@</code> means symbolic link (or that the file has extended attributes).</li> <li><code>*</code> means executable.</li> <li><code>=</code> means socket.</li> <li><code>|</code> means named pipe.</li> <li><code>&gt;</code> means door.</li> <li><code>/</code> means directory.</li></ul>		ls
ls --file-type	ls			--file-type		likewise, except do not append <code>*</code>			ls
ls --format	ls			--format=<i>WORD</i>		across <code>-x</code>, commas <code>-m</code>, horizontal <code>-x</code>, long <code>-l</code>, single-column <code>-1</code>, verbose <code>-l</code>, vertical <code>-C</code>			ls
ls -1	ls		-1			list one file per line.  Avoid <code>\n</code> with <code>-q</code>or <code>-b</code>			ls
ls --full-time	ls			--full-time		like <code>-l --time-style</code><code>=full-iso</code>			ls
ls -g	ls		-g			like <code>-l</code>, but do not list owner			ls
ls --group-directories-first	ls			--group-directories-first		group directories before files; can be augmented with a <code>--sort </code> option, but any use of --sort=<i>none</i> (<code>-U</code>) disables grouping			ls
ls --sort	ls			--sort=<i>WORD</i>		sort by WORD instead of name: none (<code>-U</code>), size (<code>-S</code>), time (<code>-t</code>), version (<code>-v</code>), extension (<code>-X</code>)			ls
ls -G	ls		-G	--no-group		in a long listing, don't print group names			ls
ls -h	ls		-h	--human-readable		with <code>-l</code> and/or <code>-s</code>, print human readable sizes (e.g., 1K 234M 2G)			ls
ls --si	ls			--si		likewise, but use powers of 1000 not 1024			ls
ls -H	ls		-H	--dereference-command-line		follow symbolic links listed on the command line			ls
ls --dereference-command-line-symlink-to-dir	ls			--dereference-command-line-symlink-to-dir		follow each command line symbolic link that points to a directory			ls
ls --hide	ls			--hide=<i>PATTERN</i>		do not list implied entries matching shell PATTERN (overridden by <code>-a </code> or <code>-A</code>)			ls
ls --indicator-style	ls			--indicator-style=<i>WORD</i>		append indicator with style WORD to entry names: none (default), slash (<code>-p</code>), file-type (<code>--file-type</code>), classify (<code>-F</code>)			ls
ls -i	ls		-i	--inode		print the index number of each file			ls
ls -I	ls		-I	--ignore=<i>PATTERN</i>		do not list implied entries matching shell PATTERN			ls
ls -k	ls		-k	--kibibytes		default to 1024-byte blocks for disk usage			ls
ls -l	ls		-l			use a long listing format			ls
ls -L	ls		-L	--dereference		when showing file information for a symbolic link, show information for the file the link references rather than for the link itself			ls
ls -m	ls		-m			fill width with a comma separated list of entries			ls
ls -n	ls		-n	--numeric-uid-gid		like <code>-l</code>, but list numeric user and group IDs			ls
ls -N	ls		-N	--literal		print entry names without quoting			ls
ls -o	ls		-o			like <code>-l</code>, but do not list group information			ls
ls -p	ls		-p	--indicator-style=<i>slash</i>		append / indicator to directories			ls
ls -q	ls		-q	--hide-control-chars		print ? instead of nongraphic characters			ls
ls --show-control-chars	ls			--show-control-chars		show nongraphic characters as-is (the default, unless program is <code>ls</code> and output is a terminal)			ls
ls -Q	ls		-Q	--quote-name		enclose entry names in double quotes			ls
ls --quoting-style	ls			--quoting-style=<i>WORD</i>		use quoting style WORD for entry names: literal, locale, shell, shell-always, shell-escape, shell-escape-always, c, escape			ls
ls -r	ls		-r	--reverse		reverse order while sorting			ls
ls -R	ls		-R	--recursive		list subdirectories recursively			ls
ls -s	ls		-s	--size		print the allocated size of each file, in blocks			ls
ls -S	ls		-S			sort by file size, largest first			ls
ls --time	ls			--time=<i>WORD</i>		with <code>-l</code>, show time as WORD instead of default modification time: atime or access or use (<code>-u</code>); ctime or status (<code>-c</code>); also use specified time as sort key if <code>--sort</code>=<i>time</i> (newest first)			ls
ls --time-style	ls			--time-style=<i>STYLE</i>		with <code>-l</code>, show times using style STYLE: full-iso, long-iso, iso, locale, or +FORMAT; FORMAT is interpreted like in <code>date</code>; if FORMAT is FORMAT1&lt;newline&gt;FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files; if STYLE is prefixed with <code>posix-</code>, STYLE takes effect only outside the POSIX locale			ls
ls -t	ls		-t			sort by modification time, newest first			ls
ls -T	ls		-T	--tabsize=<i>COLS</i>		assume tab stops at each COLS instead of 8			ls
ls -u	ls		-u			with <code>-lt</code>: sort by, and show, access time; with <code>-l</code>: show access time and sort by name; otherwise: sort by access time, newest first			ls
ls -U	ls		-U			do not sort; list entries in directory order			ls
ls -v	ls		-v			natural sort of (version) numbers within text			ls
ls -w	ls		-w	--width=<i>COLS</i>		set output width to COLS.  0 means no limit			ls
ls -x	ls		-x			list entries by lines instead of by columns			ls
ls -X	ls		-X			sort alphabetically by entry extension			ls
ls -Z	ls		-Z	--context		print any security context of each file			ls
ls --help	ls			--help		display this help and exit			ls
ls --version	ls			--version		output version information and exit			ls
zsh umask	zsh	builtin			umask	Set to <i>mask</i>.  <i>mask</i> can be either an octal number or               a symbolic value as described in <code>chmod</code><code>(1)</code>.  If<i> mask</i> is  omitted,               the  current value is printed.  The <code>-S</code> option causes the mask to               be printed as a symbolic value.  Otherwise, the <i>mask</i> is  printed               as  an octal number.  Note that in the symbolic form the permissions you specify are those which are to be allowed (not denied)               to the users specified.<div><br /></div><div>Bash <code>umask</code> has <code>-p</code> option Zsh does not.</div>			
<code>find</code> broken symlinks	"<div class=""post-text"" itemprop=""text""> <p>I'd strongly suggest <strong>not</strong> to use <code>find -L</code>  for the task (see below for explanation). Here are some other ways to do this:</p> <ul> <li><p>If you want to use a ""pure <code>find</code>"" method, it should rather look like this:</p> <pre><code>find . -xtype l </code></pre> <p>(<strong><code>xtype</code></strong> is a test performed on a dereferenced link) This may not be available in all versions of <code>find</code>, though. But there are other options as well;</p></li> <li><p>You can also exec <code>test -e</code> from within the <code>find</code> command:</p> <pre><code>find . -type l ! -exec test -e {} \; -print </code></pre></li> <li><p>Even some <code>grep</code> trick could be better (i.e. <em>safer</em>) than <code>find -L</code>, but not exactly such as presented in the question (which greps in entire output lines, including filenames): </p> <pre><code> find . -type l -exec sh -c ""file -b {} | grep -q ^broken"" \; -print </code></pre></li> </ul> <p>The <code>find -L</code> trick quoted <a href=""https://unix.stackexchange.com/a/34253/9382"">by solo</a> from <a href=""http://www.commandlinefu.com/commands/view/8260/find-broken-symlinks"" rel=""noreferrer"">commandlinefu</a> looks nice and hacky, but it has one very <strong>dangerous pitfall</strong>: All the symlinks are followed. Consider directory with the contents presented below:</p> <pre><code>$ ls -l total 0 lrwxrwxrwx 1 michal users  6 May 15 08:12 link_1 -&gt; nonexistent1 lrwxrwxrwx 1 michal users  6 May 15 08:13 link_2 -&gt; nonexistent2 lrwxrwxrwx 1 michal users  6 May 15 08:13 link_3 -&gt; nonexistent3 lrwxrwxrwx 1 michal users  6 May 15 08:13 link_4 -&gt; nonexistent4 lrwxrwxrwx 1 michal users 11 May 15 08:20 link_out -&gt; /usr/share/ </code></pre> <p>If you run <code>find -L . -type l</code> in that directory, all <code>/usr/share/</code> would be searched as well (and that can take really long)<sup>1</sup>. <strong>For a <code>find</code> command that is ""immune to outgoing links"", don't use <code>-L</code></strong>. </p> <hr /> <p><sup>1</sup> This may look like a minor inconvenience (the command will ""just"" take long to traverse all <code>/usr/share</code>)  - but can have more severe consequences. For instance, consider chroot  environments: They can exist in some subdirectory of the main filesystem  and contain symlinks to absolute locations. Those links could seem to  be broken for the ""outside"" system, because they only point to proper  places once you've entered the chroot. I also recall that some  bootloader used symlinks under <code>/boot</code> that only made sense in an initial boot phase, when the boot partition was mounted as <code>/</code>.</p> <p>So if you use a <code>find -L</code> command to find and then delete broken symlinks from some harmless-looking directory, you might even break your system...</p></div>"				https://unix.stackexchange.com/questions/34248/how-can-i-find-broken-symlinks	find
<code>bash</code> last argument parameter	<code>${@: -1}</code><div><br /></div><div>Note that a negative offset must be separated  from the colon by at least one space to avoid being confused with the  <code>:-</code> expansion.</div><div><br /></div><div>Works in ksh and zsh also.</div>	"<pre class=""lang-sh prettyprint prettyprinted"" style=""""><code><span class=""pln"">echo </span><span class=""str"">""${@: -1}""</span></code></pre>"	y		https://stackoverflow.com/questions/1853946/getting-the-last-argument-passed-to-a-shell-script	bash
<code>bash</code> last argument by <code>for</code> hack	"<div class=""post-text"" itemprop=""text""> <p>This is a bit of a hack:</p> <pre class=""lang-sh prettyprint prettyprinted"" style=""""><code><span class=""kwd"">for</span><span class=""pln""> last</span><span class=""pun"">;</span><span class=""pln""> </span><span class=""kwd"">do</span><span class=""pln""> true</span><span class=""pun"">;</span><span class=""pln""> </span><span class=""kwd"">done</span><span class=""pln""> echo $last</span></code></pre> <p>This one is also pretty portable (again, should work with bash, ksh  and sh) and it doesn't shift the arguments, which could be nice.</p> <p>It uses the fact that <code>for</code> implicitly loops over the  arguments if you don't tell it what to loop over, and the fact that for  loop variables aren't scoped: they keep the last value they were set to.</p></div>"	"<pre class=""lang-sh prettyprint prettyprinted"" style=""""><br /></pre>"	y		https://stackoverflow.com/questions/1853946/getting-the-last-argument-passed-to-a-shell-script	bash
POSIX true	POSIX	utility			true	This&nbsp;utility shall return with exit code zero.&nbsp;The special built-in utility <b>:</b> is sometimes more efficient.	<blockquote> <p>This command is executed forever:</p> <pre><tt>while true do     command done </tt> </pre></blockquote>		
bash operator !	bash	expression operator			[ ! <i>EXPR</i> ]	True if <code><i>EXPR</i></code> is false.			bash
bash operator ()	bash	expression operator			[ ( <i>EXPR</i> ) ]	Returns the value of <code><i>EXPR</i></code>. This may be used to override the normal precedence of operators.			bash
bash operator -a	bash	expression operator			[ <i>EXPR1</i> -a <i>EXPR2</i> ]	True if both <code><i>EXPR1</i></code> and <code><i>EXPR2</i></code> are true.			bash
bash operator -o	bash	expression operator			[ <i>EXPR1</i> -o <i>EXPR2</i> ]	True if either&nbsp;<code><i>EXPR1</i></code> or&nbsp;<code><i>EXPR2</i></code> are true.			bash
bash primary -a	bash	expression primary			[ -a <i>FILE</i> ]	<i>Deprecated.</i> True if <code><i>FILE</i></code> exists.			bash
bash primary -b	bash	expression primary			[ -b <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a block-special file.			bash
bash primary -c	bash	expression primary			[ -c <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a character-special file.			bash
bash primary -d	bash	expression primary			[ -d <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a directory.			bash
bash primary -e	bash	expression primary			[ -e <i>FILE</i> ]	True if<code><i>FILE</i></code>exists.			bash
bash primary -f	bash	expression primary			[ -f <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a regular file.			bash
bash primary -g	bash	expression primary			[ -g <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and its SGID bit is set.			bash
bash primary -h	bash	expression primary			[ -h <i>FILE</i> ]	<i>Sort of deprecated.</i> True if<code><i>FILE</i></code>exists and is a symbolic link.			bash
bash primary -k	bash	expression primary			[ -k <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and its sticky bit is set.			bash
bash primary -p	bash	expression primary			[ -p <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a named pipe (FIFO).			bash
bash primary -r	bash	expression primary			[ -r <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is readable.			bash
bash primary -s	bash	expression primary			[ -s <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and has a size greater than zero.			bash
bash primary -t	bash	expression primary			[ -t <i>FD</i> ]	True if file descriptor <code><i>FD</i></code> is open and refers to a terminal.			bash
bash primary -u	bash	expression primary			[ -u <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and its SUID (set user ID) bit is set.			bash
bash primary -w	bash	expression primary			[ -w <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is writable.			bash
bash primary -x	bash	expression primary			[ -x <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is executable.			bash
bash primary -O	bash	expression primary			[ -O <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is owned by the effective user ID.			bash
bash primary -G	bash	expression primary			[ -G <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is owned by the effective group ID.			bash
bash primary -L	bash	expression primary			[ -L <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a symbolic link.			bash
bash primary -N	bash	expression primary			[ -N <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and has been modified since it was last read.			bash
bash primary -S	bash	expression primary			[ -S <i>FILE</i> ]	True if<code><i>FILE</i></code>exists and is a socket.			bash
bash primary -nt	bash	expression primary			[ <i>FILE1</i> -nt <i>FILE2</i> ]	True if<code><i>FILE1</i></code>has been changed more recently than<code><i>FILE2</i></code> or if<code><i>FILE1</i></code>exists and<code><i>FILE2</i></code>does not.			bash
bash primary -ot	bash	expression primary			[ <i>FILE1</i> -ot <i>FILE2</i> ]	True if <code><i>FILE1</i></code> is older than <code><i>FILE2</i></code> or if <code><i>FILE2</i></code> exists and <code><i>FILE1</i></code> does not.			bash
bash primary -ef	bash	expression primary			[ <i>FILE1</i> -ef <i>FILE2</i> ]	True if<code><i>FILE1</i></code>and<code><i>FILE2</i></code>refer to the same device and inode numbers.			bash
bash primary -o	bash	expression primary			[ -o <i>NAME</i> ]	True if shell option <code><i>NAME</i></code> is enabled.			bash
bash primary -z	bash	expression primary			[ -z <i>STRING</i> ]	True if the length if<code><i>STRING</i></code>is zero.			bash
bash primary -n	bash	expression primary			[ -n <i>STRING</i> ] or [ <i>STRING</i> ]	True if the length of<code><i>STRING</i></code>is non-zero.			bash
bash primary ==	bash	expression primary			[ <i>STRING1</i> == <i>STRING2</i> ]	True if the strings are equal.	<code>=</code>&nbsp;may be used instead of&nbsp;<code>==</code>&nbsp;for strict POSIX compliance.		bash
bash primary !=	bash	expression primary			[ <i>ARG1</i> != <i>ARG2</i> ]	True if the <b><i>strings</i></b> are not equal.			bash
bash primary <	bash	expression primary			[ <i>STRING1</i> < <i>STRING2</i> ]	True if<code><i>STRING1</i></code>sorts before<code><i>STRING2</i></code>lexicographically in the current locale.			bash
bash primary >	bash	expression primary			[ <i>STRING1</i> > <i>STRING2</i> ]	True if<code><i>STRING1</i></code>sorts after<code><i>STRING2</i></code>lexicographically in the current locale.			bash
bash primary -eq	bash	expression primary			-eq	Arithmetic binary operator that returns true if<code><i>ARG1</i></code>is equal to <code><i>ARG2</i></code>. <code><i>ARG1</i></code> and <code><i>ARG2</i></code> are integers.<br><br><code>[ <i>ARG1</i> -eq <i>ARG2</i> ]</code>			bash
bash primary -ne	bash	expression primary			-ne	Arithmetic binary operator that returns true if <code><i>ARG1</i></code> is not equal to <code><i>ARG2</i></code>. <code><i>ARG1</i></code> and <code><i>ARG2</i></code> are integers.<br /><br /><code>[ <i>ARG1</i> -ne <i>ARG2</i> ]</code>			bash
bash primary -lt	bash	expression primary			-lt	Arithmetic binary operator that returns true if <code><i>ARG1</i></code> is less than <code><i>ARG2</i></code>. <code><i>ARG1</i></code> and <code><i>ARG2</i></code> are integers.<br /><br /><code>[ <i>ARG1</i> -lt <i>ARG2</i> ]</code>			bash
bash primary -le	bash	expression primary			-le	Arithmetic binary operator that returns true if<code><i>ARG1</i></code>is less than or equal to <code><i>ARG2</i></code>. <code><i>ARG1</i></code> and <code><i>ARG2</i></code> are integers.<br><br><code>[ <i>ARG1</i> -le <i>ARG2</i> ]</code>			bash
bash primary -gt	bash	expression primary			-gt	Arithmetic binary operator that returns true if<code><i>ARG1</i></code>is greater than <code><i>ARG2</i></code>. <code><i>ARG1</i></code> and <code><i>ARG2</i></code> are integers.<br><br><code>[ <i>ARG1</i> -gt <i>ARG2</i> ]</code>			bash
bash primary -ge	bash	expression primary			-ge	Arithmetic binary operator that returns true if<code><i>ARG1</i></code>is greater than or equal to <code><i>ARG2</i></code>. <code><i>ARG1</i></code> and <code><i>ARG2</i></code> are integers.<br><br><code>[ <i>ARG1</i> -ge <i>ARG2</i> ]</code>			bash
regex: what does <code>^\d+$</code> match for string <code>123\n</code>?	<code>123</code>					regex
regex: what does <code>^\d+$</code> match for string <code>123</code>?	<code>123</code>					regex
regex: does what&nbsp;<code>^\d+$</code> matches for string <code>123\n</code>&nbsp;change in multiline mode?	No, it matches <code>123</code> independent of the mode.					regex
regex: does&nbsp;<code>\A\d+\z</code> match string <code>123\n</code> in Python?	"No.<div><br /></div><div>Python does not support&nbsp;<tt class=""code""><span class=""regexspecial"">\z</span></tt>&nbsp;and&nbsp;<tt class=""code""><span class=""regexspecial"">\Z</span></tt>&nbsp;matches only at the very end of the string.</div>"					regex
regex: does&nbsp;<code>\A\d+\z</code> match string <code>123\n</code>?	"No.<div><br /></div><div><tt class=""code""><span class=""regexspecial"">\z</span></tt>&nbsp;matches after the line break, which is not matched by the shorthand character class.</div>"					regex
regex: does&nbsp;<code>\A\d+\Z</code> match string <code>123\n</code>?	Yes, except in Python.					regex
regex: does&nbsp;<code>\A\d+\Z</code> match string <code>123\n</code> in Python?	"No.<div><br /></div><div>In Python,&nbsp;<tt class=""code""><span class=""regexspecial"">\Z</span></tt>&nbsp;matches only at the very end of the string.</div>"					regex
regex anchor that only ever matches the start of the string	regex anchor&nbsp;<code>\A</code>		reverse			regex
regex anchor that only ever matches the end of the string	regex anchor&nbsp;<code>\Z</code>		reverse			regex
regex anchor <code>\Z</code> matches line breaks when?	never					regex
regex anchor <code>\A</code> matches line breaks when?	never					regex
regex flavors that do not support&nbsp;<code>\A</code> or <code>\Z</code>	<b></b><b>{{c1::JavaScript}}</b><div><b>{{c2::POSIX}}</b></div><div><b>{{c3::XML}}</b></div><div><b>{{c4::XPath}}</b></div>						regex
regex flavors that&nbsp;treat <code>\</code> in character classes as literal characters	<b>POSIX</b> and <b>GNU</b>					regex
regex metacharacters	<code>{{c1::\}}{{c2::^}}{{c3::$}}{{c4::.}}{{c5::|}}{{c6::?}}{{c7::*}}{{c8::+}}{{c9::(}}{{c10::)}}{{c11::[}}{{c12::{}}</code>						
<code>bash</code> positional parameters that require braces	positional parameters consisting of more than a single digit	<code>${10} $9</code>	y			bash
HTML element <code>&lt;html&gt;</code>	<small>HTML main root element</small><br />represents the <b>root of an HTML document</b>, so it is also referred to as the <em>root element</em>. All other elements must be descendants of this element	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>manifest</code></strong> <i> </i></dt> <dd>Specifies the URI of a resource manifest indicating resources that should be cached locally. See Using the application cache for details.</dd> <dt><strong><code>version</code></strong> <i> </i></dt> <dd>Specifies the version of the HTML Document Type Definition  that governs the current document. This attribute is not needed,  because it is redundant with the version information in the document  type declaration.</dd> <dt><strong><code>xmlns</code></strong>&nbsp;</dt> <dd>Specifies the XML Namespace of the document. Default value is <code>""http://www.w3.org/1999/xhtml""</code>. This is required in documents parsed with XML parsers, and optional in text/html documents.</dd></dl>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html	HTML
HTML element <code>&lt;base&gt;</code>	<small>HTML document metadata element</small><br />specifies the <b>base URL to use for all relative URLs</b> contained within a document. There can be only one&nbsp;in a document	<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>href</code></strong></dt> <dd>The base URL to be used throughout the document for relative URL  addresses. If this attribute is specified, this element must come before  any other elements with attributes whose values are URLs. Absolute and  relative URLs are allowed.</dd> <dt><strong><code>target</code></strong></dt> <dd>A name or keyword indicating the default location to display the  result when hyperlinks or forms cause navigation, for elements that do  not have an explicit target reference. It is a name of, or keyword for, a  <em>browsing context</em> (for example: tab, window, or inline frame). The following keywords have special meanings:  <ul> <li><code>_self</code>: Load the result into the same browsing  context&nbsp;as the current one. This value is the default if the attribute  is not specified.</li> <li><code>_blank</code>: Load the result into a new unnamed browsing context.</li> <li><code>_parent</code>: Load the result into the parent browsing  context of the current one. If there is no parent, this option behaves  the same way as <code>_self</code>.</li> <li><code>_top</code>: Load the result into the top-level browsing  context (that is, the browsing context that is an ancestor of the  current one, and has no parent). If there is no parent, this option  behaves the same way as <code>_self</code>.</li> </ul> </dd> </dl> <h2>Usage notes</h2> <p>If multiple <code>&lt;base&gt;</code> elements are specified, only the first <strong>href</strong> and first <strong>target</strong> value are used; all others are ignored.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base	HTML
HTML element <code>&lt;head&gt;</code>	<small>HTML document metadata element</small><br /><b>metadata about the document</b>, including its title and links to its scripts and style sheets	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>profile</code></strong> <i> </i></dt> <dd>The URIs of one or more metadata profiles, separated by white space.</dd></dl>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head	HTML
HTML element <code>&lt;link&gt;</code>	<small>HTML document metadata element</small><br />specifies <b>relationship to an external resource</b>. Possible uses for this element include defining a relational framework for navigation. This element is most used to link to style sheets	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>charset</code></strong><i> </i></dt> <dd>This attribute defines the character encoding of the linked  resource. The value is a space- and/or comma-delimited list of character  sets as defined in RFC 2045. The default value is <code>iso-8859-1</code>.  <div><strong>Usage note:</strong> This attribute is obsolete and <em>must</em> <strong>not be used by authors</strong>. To achieve its effect, use the <code>Content-Type</code> HTTP header on the linked resource.</div> </dd> <dt><strong><code>crossorigin</code></strong></dt> <dd>This enumerated attribute indicates whether CORS must be used when fetching the related image. CORS-enabled images can be reused in the <code>&lt;canvas&gt;</code> element without being <em>tainted</em>. The allowed values are:  <dl> <dt><code>""anonymous""</code></dt> <dd>A cross-origin request (i.e. with <code>Origin:</code> HTTP  header) is performed. But no credential is sent (i.e. no cookie, no  X.509 certificate and no HTTP Basic authentication is sent). If the  server does not give credentials to the origin site (by not setting the <code>Access-Control-Allow-Origin:</code> HTTP header) the image will be <em>tainted</em> and its usage restricted.</dd> <dt><code>""use-credentials""</code></dt> <dd>A cross-origin request (i.e. with <code>Origin:</code> HTTP  header) is performed with credential is sent (i.e. a cookie, a  certificate and HTTP Basic authentication is performed). If the server  does not give credentials to the origin site (through <code>Access-Control-Allow-Credentials:</code> HTTP header), the image will be <em>tainted</em> and its usage restricted.</dd> </dl>  When not present, the resource is fetched without a CORS request (i.e. without sending the <code>Origin:</code> HTTP header), preventing its non-tainted used in <code>&lt;canvas&gt;</code> elements. If invalid, it is handled as if the enumerated keyword <strong>anonymous</strong> was used. See CORS settings attributes for additional information.</dd> <dt><strong><code>disabled</code></strong> <i> </i></dt> <dd>This attribute is used to disable a link relationship. In  conjunction with scripting, this attribute could be used to turn on and  off various style sheet relationships.  <div> <p><strong>Note: </strong>While there is no <code>disabled</code> attribute in the HTML standard, there <strong>is</strong> a <code>disabled</code> attribute on the <code>HTMLLinkElement</code> DOM object.</p> <p>The use of <code>disabled</code> as an HTML attribute is non-standard and only used by some browsers (W3 #27677). <strong>Do not use it</strong>. To achieve a similar effect, use one of the following techniques:</p> <ul> <li>If the <code>disabled</code> attribute has been added directly to the element on the page, do not include the <code>&lt;link&gt;</code> element instead;</li> <li>Set the <code>disabled</code> <strong>property</strong> of the <code>StyleSheet</code> DOM object via scripting.</li> </ul> </div> </dd> <dt><strong><code>href</code></strong></dt> <dd>This attribute specifies the URL of the linked resource. A URL might be absolute or relative.</dd> <dt><strong><code>hreflang</code></strong></dt> <dd>This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are determined by BCP47. Use this attribute only if the <code>href</code> attribute is present.</dd> <dt><strong><code>integrity</code></strong> <i> </i></dt> <dd>Contains inline metadata, a base64-encoded&nbsp;cryptographic hash of a  resource (file) you’re telling the browser to fetch,&nbsp;that a user agent  can use to verify that a fetched resource has been delivered free of  unexpected manipulation. See Subresource Integrity.</dd> <dt><strong><code>media</code></strong></dt> <dd>This attribute specifies the media which the linked resource applies to. Its value must be a media query.  This attribute is mainly useful when linking to external stylesheets by  allowing the user agent to pick the best adapted one for the device it  runs on.  <div><strong>Usage note: </strong> <ul> <li>In HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., media types and groups, where defined and allowed as values for this attribute, such as <code>print</code>, <code>screen</code>, <code>aural</code>, <code>braille</code>. HTML5 extended this to any kind of media queries, which are a superset of the allowed values of HTML 4.</li> <li>Browsers not supporting the CSS3 Media Queries  won't necessarily recognize the adequate link; do not forget to set  fallback links, the restricted set of media queries defined in HTML 4.</li> </ul> </div> </dd> <dt><strong><code>methods</code></strong> <i> </i></dt> <dd>The value of this attribute provides information about the  functions that might be performed on an object. The values generally are  given by the HTTP protocol when it is used, but it might (for similar  reasons as for the <strong>title</strong> attribute) be useful to  include advisory information in advance in the link. For example, the  browser might choose a different rendering of a link as a function of  the methods specified; something that is searchable might get a  different icon, or an outside link might render with an indication of  leaving the current site. This attribute is not well understood nor  supported, even by the defining browser, Internet Explorer 4. See Methods Property (MSDN).</dd> <dt><strong><code>prefetch</code></strong> <i> </i></dt> <dd>This attribute identifies a resource that might be required by the  next navigation and that the user agent should retrieve it. This allows  the user agent to respond faster when the resource is requested in the  future.</dd> <dt><strong><code>referrerpolicy</code></strong> <i> </i></dt> <dd>A string indicating which referrer to use when fetching the resource:  <ul> <li><code>'no-referrer'</code> meaning that the <code>Referer</code> header will not be sent.</li> <li><code>'no-referrer-when-downgrade'</code> meaning that no&nbsp;<code>Referer</code>  header will be sent when navigating to an origin without TLS  (HTTPS).&nbsp;This is a user agent’s default behavior, if no policy is  otherwise specified.</li> <li><code>'origin'</code> meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port.</li> <li><code>'origin-when-cross-origin'</code> meaning that navigating to  other origins will be limited to the scheme, the host and the port,  while navigating on the same origin will include the referrer's path.&nbsp;</li> <li><code>'unsafe-url'</code> meaning that the referrer will include  the origin and the path (but not the fragment, password, or username).  This case is unsafe because it can leak origins and paths from  TLS-protected resources to insecure origins.</li> </ul> </dd> <dt><strong><code>rel</code></strong></dt> <dd>This attribute names a relationship of the linked document to the  current document. The attribute must be a space-separated list of the link types values. The most common use of this attribute is to specify a link to an external style sheet: the <strong>rel</strong> attribute is set to <code>stylesheet</code>, and the <strong>href</strong> attribute is set to the URL of an external style sheet to format the page. WebTV also supports the use of the value <code>next</code> for <strong>rel</strong> to preload the next page in a document series.</dd> <dt><strong><code>rev</code></strong><i> </i></dt> <dd>The value of this attribute shows the relationship of the current document to the linked document, as defined by the <code>href</code> attribute. The attribute thus defines the reverse relationship compared to the value of the <strong>rel</strong> attribute. Link types values for the attribute are similar to the possible values for <code>rel</code>.  <div><strong>Usage note: </strong>This attribute is obsolete in HTML5. <strong>Do not use it</strong>. To achieve its effect, use the <code>rel</code> attribute with the opposite link types values, e.g. <code>made</code> should be replaced by <code>author</code>. Also this attribute doesn't mean <em>revision</em> and must not be used with a version number, which is unfortunately the case on numerous sites.</div> </dd> <dt><strong><code>sizes</code></strong></dt> <dd>This attribute defines the sizes of the icons for visual media contained in the resource. It must be present only if the <code>rel</code> contains the <code>icon</code> link types value. It may have the following values:  <ul> <li><code>any</code>, meaning that the icon can be scaled to any size as it is in a vectorial format, like <code>image/svg+xml</code>.</li> <li>a white-space separated list of sizes, each in the format <code><em>&lt;width in pixels&gt;</em>x<em>&lt;height in pixels&gt;</em></code> or <code><em>&lt;width in pixels&gt;</em>X<em>&lt;height in pixels&gt;</em></code>. Each of these sizes must be contained in the resource.</li> </ul> <div><strong>Usage note: </strong> <ul> <li>Most icon format are only able to store one single icon; therefore most of the time the <code>sizes</code> contains only one entry. MS's ICO format does, as well as Apple's ICNS. ICO being more ubiquitous, you should use it.</li> <li>Apple's iOS does not support this attribute, hence Apple's iPhone and iPad use special, non-standard link types values to define icon to be used as Web Clip or start-up placeholder: <code>apple-touch-icon</code> and <code>apple-touch-startup-icon</code>.</li> </ul> </div> </dd> <dt><strong><code>target</code></strong><i> </i></dt> <dd>Defines the frame or window name that has the defined linking  relationship or that will show the rendering of any linked resource.</dd> <dt><strong><code>title</code></strong></dt> <dd>The <code>title</code> attribute has special semantics on the <code>&lt;link&gt;</code> element. When used on a <code>&lt;link rel=""stylesheet""&gt;</code> it defines a preferred or an alternate stylesheet. Incorrectly using it may cause the stylesheet to be ignored.</dd> <dt><strong><code>type</code></strong></dt> <dd>This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as <strong>text/html</strong>, <strong>text/css</strong>, and so on. The common use of this attribute is to define the type of style sheet linked and the most common current value is <strong>text/css</strong>, which indicates a Cascading Style Sheet format.</dd></dl>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link	HTML
HTML element <code>&lt;meta&gt;</code>	<small>HTML document metadata element</small><br />represents <b>metadata </b>that <b>cannot be represented by other HTML meta-related elements</b>, like <code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code> or <code>&lt;title&gt;</code>	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <div> <p><strong>Note:</strong> the global attribute <code>name</code> has a specific meaning for the <code>&lt;meta&gt;</code> element, and the <code>itemprop</code> attribute must not be set on the same <code>&lt;meta&gt;</code> element that has any existing <code>name</code>, <code>http-equiv</code> or <code>charset</code> attributes.</p> </div> <dl> <dt><strong><code>charset</code></strong></dt> <dd>Declares the page's character encoding. This attribute must contain a standard IANA MIME name for character encodings. Although the standard doesn't request a specific encoding, it suggests…         <ul> <li>Authors are encouraged to use <code>UTF-8</code>.</li> <li>Authors should not use ASCII-incompatible encodings to avoid  security risk: browsers not supporting them may interpret harmless  content as HTML. This happens with at least <code>JIS_C6226-1983</code>, <code>JIS_X0212-1990</code>, <code>HZ-GB-2312</code>, <code>JOHAB</code>, the ISO-2022 family, and the EBCDIC family. (ASCII-incompatible encodings are those that don't map the 8-bit code points <code>0x20</code> to <code>0x7E</code> to the <code>0x0020</code> to <code>0x007E</code> Unicode code points)</li> <li>Authors <strong>must not</strong> use <code>CESU-8</code>, <code>UTF-7</code>, <code>BOCU-1</code> and <code>SCSU</code>, because cross-site scripting attacks with these encodings have been demonstrated.</li> <li>Authors should not use <code>UTF-32</code> because not all HTML5 encoding algorithms can distinguish it from <code>UTF-16</code>.</li> </ul> <div><strong>Notes:</strong> <ul> <li>The declared character encoding must match the one the page was saved with, to avoid garbled characters and security holes.</li> <li>The <code>&lt;meta&gt;</code> element declaring the encoding must be inside the <code>&lt;head&gt;</code> element and <strong>within the first 1024 bytes</strong> of the HTML, as some browsers only look at those bytes before choosing an encoding.</li> <li>This <code>&lt;meta&gt;</code> element is only one part of the algorithm to determine a page's character set. The <code>Content-Type</code> header and any Byte-Order Marks override this element.</li> <li>It is strongly recommended to define the character encoding. If a  page's encoding is undefined, cross-scripting techniques are possible,  such as the <code>UTF-7</code> fallback cross-scripting technique.</li> <li>The <code>&lt;meta&gt;</code> element with a <code>charset</code> attribute is a synonym for the pre-HTML5 <code>&lt;meta http-equiv=""Content-Type"" content=""text/html; charset=<em>IANAcharset</em>""&gt;</code>, where <em><code>IANAcharset</code></em> contains the value of the equivalent <code>charset</code> attribute. This syntax is still allowed, although no longer recommended.</li> </ul> </div> </dd> <dt><strong><code>content</code></strong></dt> <dd>This attribute contains the value for the <code>http-equiv</code> or <code>name</code> attribute, depending on which was used.</dd> <dt><strong><code>http-equiv</code></strong></dt> <dd>This attribute can contain the name of an HTTP header, hence the attribute name <strong>http-equiv</strong>alent.  It defines an instruction that can alter server and user-agent  behavior. The value of the instruction is defined inside the <code>content</code> attribute, and can be one of the following:         <dl> <dt><code>""content-language""</code> <i> </i></dt> <dd>Defines the default language of the page. It can be overridden by the lang attribute on any element.                 <div>Do not use this value, as it is obsolete. Prefer the <code>lang</code> attribute on the <code>&lt;html&gt;</code> element.</div> </dd> <dt><code>""content-security-policy""</code></dt> <dd>Allows page authors to define a content policy  for the current page. Content policies mostly specify allowed server  origins and script endpoints, which helps guard against cross-site  scripting attacks.</dd> <dt><code>""content-type""</code> <i> </i></dt> <dd>Defines the MIME type of the document, followed by its character encoding. It follows the same syntax as the HTTP <code>content-type</code> entity-header field, but as it is inside an HTML page, most values other than <code>text/html</code> are impossible. Therefore the valid syntax for its <code>content</code> is the string '<code>text/html</code>' followed by a character set with the following syntax: '<code>; charset=<em>IANAcharset</em></code>', where <code>IANAcharset</code> is the <em>preferred MIME name</em> for a character set as defined by the IANA. <div><strong>Usage note:</strong> <ul> <li>Do not use this value, as it is obsolete. Prefer the <code>charset</code> attribute on the <code>&lt;meta&gt;</code> element.</li> <li>As <code>&lt;meta&gt;</code> can't change documents' types in XHTML or HTML5's XHTML serialization, never set the MIME type to an XHTML MIME type with <code>&lt;meta&gt;</code>.</li> </ul> </div> </dd> <dt><code>""refresh""</code></dt> <dd>This instruction specifies:                 <ul> <li>The number of seconds until the page should be reloaded, if the <code>content</code> attribute contains only a positive integer.</li> <li>The number of seconds until the page should redirect to another, if the <code>content</code> attribute contains a positive integer followed by the string '<code>;url=</code>', then a valid URL.</li> </ul> </dd> <dt><code>""set-cookie""</code> <i> </i></dt> <dd>Defines a cookie for the page. Its content must follow the syntax defined in the IETF HTTP Cookie Specification.                 <div><strong>Note:</strong> Do not use this instruction, as it is obsolete. Use the HTTP header <code>Set-Cookie</code> instead.</div> </dd> </dl> </dd> <dt><strong><code>name</code></strong></dt> <dd> <p>This attribute defines the name of a piece of document-level metadata. It should not be set if one of the attributes <code>itemprop</code>, <code>http-equiv</code> or <code>charset</code> is also set.</p> <p>This metadata name is associated with the value contained by the <code>content</code> attribute. The possible values for the name attribute are:</p> <ul> <li><code>application-name</code> defines the name of the application running in the web page.                  <div><strong>Note:</strong> <ul> <li>Browsers may use this to identify the application. It is different from the <code>&lt;title&gt;</code> element, which usually contain the application name, but may also contain information like the document name or a status.</li> <li>Simple web pages shouldn't define an application-name.</li> </ul> </div> </li> <li><code>author</code> defines the name of the document's author.</li> <li><code>description</code> contains a short and accurate summary of  the content of the page. Several browsers, like Firefox and Opera, use  this as the default description of bookmarked pages.</li> <li><code>generator</code> contains the identifier of the software that generated the page.</li> <li><code>keywords</code> contains words relevant to the page's content, separated by commas.</li> <li><code>referrer</code> <i> </i> controls the <code>Referer</code> HTTP header attached to requests sent from the document:                 <table> <caption>Values for the <code>content</code> attribute of <code>&lt;meta name=""referrer""&gt;</code></caption> <tbody> <tr> <td><code>no-referrer</code></td> <td>Do not send a HTTP <code>Referer</code> header.</td> </tr> <tr> <td><code>origin</code></td> <td>Send the origin of the document.</td> </tr> <tr> <td><code>no-referrer-when-downgrade</code></td> <td>Send the origin  as referrer to URLs as secure as the current page, (https→https), but  don't send a referrer to less secure URLs (https→http). This is the  default behavior.</td> </tr> <tr> <td><code>origin-when-crossorigin</code></td> <td>Send the full URL (stripped of parameters) for same-origin requests, but only send the origin for other cases.</td> </tr> <tr> <td><code>unsafe-URL</code></td> <td>Send the full URL (stripped of parameters) for same-origin or cross-origin requests.</td> </tr> </tbody> </table> <div> <ul> <li>Some browsers support the deprecated values <code>always</code>, <code>default</code>, and <code>never</code> for referrer.</li> <li>Dynamically inserting <code>&lt;meta name=""referrer""&gt;</code> (with <code>document.write</code> or <code>appendChild</code>) makes referrer behavior unpredictable.</li> <li>When several conflicting policies are defined, the no-referrer policy is applied.</li> </ul> </div> <p>The attribute may also have a value taken from the extended list defined on WHATWG Wiki MetaExtensions page. Although none have been formally accepted yet, a few commonly used names are:</p> <ul> <li><code>creator</code> defines the name of the creator of the document, such as an organization or institution. If there are more than one, several <code>&lt;meta&gt;</code> elements should be used.</li> <li><code>googlebot</code>, a synonym of <code>robots</code>, but is only followed by Googlebot, the indexing crawler for Google.</li> <li><code>publisher</code> defines the name of the document's publisher.</li> <li><code>robots</code> defines the behavior that cooperative  crawlers, or ""robots"", should use with the page. It is a comma-separated  list of the values below:                         <table> <caption>Values for the content of <code>&lt;meta name=""robots""&gt;</code></caption> <thead> <tr> <th scope=""col"">Value</th> <th scope=""col"">Description</th> <th scope=""col"">Used by</th> </tr> </thead> <tbody> <tr> <td><code>index</code></td> <td>Allows the robot to index the page (default).</td> <td>All</td> </tr> <tr> <td><code>noindex</code></td> <td>Requests the robot to not index the page.</td> <td>All</td> </tr> <tr> <td><code>follow</code></td> <td>Allows the robot to follow the links on the page (default).</td> <td>All</td> </tr> <tr> <td><code>nofollow</code></td> <td>Requests the robot to not follow the links on the page.</td> <td>All</td> </tr> <tr> <td><code>none</code></td> <td>Equivalent to <code>noindex, nofollow</code></td> <td>Google</td> </tr> <tr> <td><code>noodp</code></td> <td>Prevents using the Open Directory Project description, if any, as the page description in search engine results.</td> <td> <p>Google, Yahoo, Bing</p> </td> </tr> <tr> <td><code>noarchive</code></td> <td>Requests the search engine not cache the page content.</td> <td>Google, Yahoo, Bing</td> </tr> <tr> <td><code>nosnippet</code></td> <td>Prevents displaying any description of the page in search engine results.</td> <td>Google, Bing</td> </tr> <tr> <td><code>noimageindex</code></td> <td>Requests this page not appear as the referring page of an indexed image.</td> <td>Google</td> </tr> <tr> <td><code>nocache</code></td> <td>Synonym of <code>noarchive</code>.</td> <td>Bing</td> </tr> </tbody> </table> <div><strong>Notes:</strong> <ul> <li>Only cooperative robots follow these rules. Do not expect to prevent e-mail harvesters with them.</li> <li>The robot still needs to access the page in order to read these rules. To prevent bandwidth consumption, use a <em>robots.txt</em> file.</li> <li>If you want to remove a page, <code>noindex</code> will work, but only after the robot visits the page again. Ensure that the <code>robots.txt</code> file doesn't preventing revisits. Some search engines have developer's tools, allowing quick removal of pages.</li> <li>Some values are mutually exclusive, like <code>index</code> and <code>noindex</code>, or <code>follow</code> and <code>nofollow</code>. In these cases the robot's behavior is undefined and may vary between them.</li> <li>Some crawler robots, like Google, Yahoo, and Bing, support the same values for the HTTP header <code>X-Robot-Tags</code>; this allows non-HTML documents like images to use these rules.</li> </ul> </div> </li> <li><code>slurp</code>, a synonym of <code>robots</code>, but only for Slurp, the crawler for Yahoo Search.</li> </ul> <p>Finally, a few names are in common use, though not in the process of being standardized:</p> <ul> <li><code>viewport</code>, which gives hints about the size of the initial size of the viewport. Used by mobile devices only.                          <table> <caption>Values for the content of <code>&lt;meta name=""viewport""&gt;</code></caption> <thead> <tr> <th scope=""col"">Value</th> <th scope=""col"">Possible subvalues</th> <th scope=""col"">Description</th> </tr> </thead> <tbody> <tr> <td><code>width</code></td> <td>A positive integer number, or the text <code>device-width</code></td> <td>Defines the pixel width of the viewport, or allows the viewport to adapt to the device's screen width.</td> </tr> <tr> <td><code>height</code></td> <td>A positive integer, or the text <code>device-height</code></td> <td>Defines the height of the viewport. Not used by any browser.</td> </tr> <tr> <td><code>initial-scale</code></td> <td>A positive number between <code>0.0</code> and <code>10.0</code></td> <td>Defines the ratio between the device width (<code>device-width</code> in portrait mode or <code>device-height</code> in landscape mode) and the viewport size.</td> </tr> <tr> <td><code>maximum-scale</code></td> <td>A positive number between <code>0.0</code> and <code>10.0</code></td> <td>Defines the maximum amount to zoom in. It must be greater or equal to the <code>minimum-scale</code> or the behavior is undefined. Browser settings can ignore this rule, and iOS10+ ignores it by default.</td> </tr> <tr> <td><code>minimum-scale</code></td> <td>A positive number between <code>0.0</code> and <code>10.0</code></td> <td>Defines the minimum zoom level. It must be smaller or equal to the <code>maximum-scale</code> or the behavior is undefined. Browser settings can ignore this rule, and iOS10+ ignores it by default.</td> </tr> <tr> <td><code>user-scalable</code></td> <td><code>yes</code> or <code>no</code></td> <td>If set to <code>no</code>, the user is not able to zoom in the webpage. The default is <code>yes</code>. Browser settings can ignore this rule, and iOS10+ ignores it by default.</td> </tr> </tbody> </table> <table> <thead> <tr> <th scope=""col"">Specification</th> <th scope=""col"">Status</th> <th scope=""col"">Comment</th> </tr> </thead> <tbody> <tr> <td>CSS Device Adaptation<br /><small lang=""en-US"">The definition of '&lt;meta name=""viewport""&gt;' in that specification.</small></td> <td>Working Draft</td> <td>Non-normatively describes the Viewport META element</td> </tr> </tbody> </table> <div>See also: <code>@viewport</code></div> <div><strong>Notes:</strong> <ul> <li>Though unstandardized, this declaration is respected by most mobile browsers due to de-facto dominance.</li> <li>The default values may vary between devices and browsers.</li> <li>To learn about this declaration in Firefox for Mobile, see this article.</li> </ul> </div> </li> </ul> </li> </ul> </dd> <dt><strong><code>scheme</code></strong> <i> </i></dt> <dd>This attribute defines the scheme in which metadata is described. A  scheme is a context leading to the correct interpretations of the <code>content</code> value, like a format.         <div><strong>Notes:</strong> Do not use this value, as it is obsolete. There is no replacement as there was no real usage for it.</div> </dd> </dl> <h2>Notes</h2> <p>Depending on the attributes set, the kind of metadata can be one of the following:</p> <ul> <li>If <code>name</code> is set, it is <em>document-level</em> <em>metadata</em>, applying to the whole page.</li> <li>If <code>http-equiv</code> is set, it is a <em>pragma directive</em> — information normally given by the web server about how the web page is served.</li> <li>If <code>charset</code> is set, it is a <em>charset declaration</em> — the character encoding used by the webpage.</li> <li>If <code>itemprop</code> is set, it is <em>user-defined metadata</em> — transparent for the user-agent as the semantics of the metadata is user-specific.&nbsp;<i> </i></li></ul>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta	HTML
HTML element <code>&lt;style&gt;</code>	<small>HTML document metadata element</small><br />contains<b> style information</b> for a document, or part of a document. By default, the style instructions written inside that element are expected to be CSS	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>type</code></strong></dt> <dd>This attribute defines the styling language as a MIME type (charset  should not be specified). This attribute is optional and default to <code>text/css</code> if it's missing.</dd> <dt><strong><code>media</code></strong></dt> <dd>This attribute&nbsp;defines which media the style should apply to. It's value is a media query, which default to <code>all</code> if the attribute is missing.</dd> <dt><strong><code>title</code></strong></dt> <dd>Specifies alternative style sheet sets.</dd> <dt><strong><code>scoped</code></strong> <i> </i> <i> </i></dt> <dd>Specifies that the styles only apply to this element's parent element and that element's child elements.</dd></dl>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style	HTML
HTML element <code>&lt;title&gt;</code>	<small>HTML document metadata element</small><br />defines the <b>title of the document</b>, shown in a browser's title bar or on the page's tab. It can only contain text, and any contained tags are ignored	<h2>Attributes</h2> <p>This element only includes the global attributes.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title	HTML
HTML element <code>&lt;address&gt;</code>	<small>HTML content sectioning element</small><br />supplies <b>contact information</b> for its nearest <code>&lt;article&gt;</code> or <code>&lt;body&gt;</code> ancestor; in the latter case, it applies to the whole document	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>To represent an arbitrary address, one that is not related to the contact information, use a <code>&lt;p&gt;</code> element rather than the <code>&lt;address&gt;</code> element.</li> <li>This element should not contain more information than the contact information, like a publication date (which belongs in a <code>&lt;time&gt;</code> element).</li> <li>Typically an <code>&lt;address&gt;</code> element can be placed inside the <code>&lt;footer&gt;</code> element of the current section, if any.</li></ul>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address	HTML
HTML element <code>&lt;article&gt;</code>	<small>HTML content sectioning element</small><br />represents a <b>self-contained composition</b> in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Each <code>&lt;article&gt;</code> should be identified, typically by including a heading (<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code> element) as a child of the <code>&lt;article&gt;</code> element.</li> <li>When an <code>&lt;article&gt;</code> element is nested, the inner  element represents an article related to the outer element. For example,  the comments of a blog post can be <code>&lt;article&gt;</code> elements nested in the <code>&lt;article&gt;</code> representing the blog post.</li> <li>Author information of an <code>&lt;article&gt;</code> element can be provided through the <code>&lt;address&gt;</code> element, but it doesn't apply to nested <code>&lt;article&gt;</code> elements.</li> <li>The publication date and time of an <code>&lt;article&gt;</code> element can be described using the <code>datetime</code> attribute of a <code>&lt;time&gt;</code> element. <em>Note that the&nbsp;<code>pubdate</code> attribute of <code>&lt;time&gt;</code> is no longer a part of the W3C HTML 5 standard.</em></li></ul>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article	HTML
HTML element <code>&lt;aside&gt;</code>	<small>HTML content sectioning element</small><br />represents a section of a document with <b>content connected tangentially to the main content</b> of the document (often presented as a sidebar)	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Do not use the <code>&lt;aside&gt;</code> element to tag parenthesized text, as this kind of text is considered part of the main flow.</li></ul>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside	HTML
HTML element <code>&lt;footer&gt;</code>	<small>HTML content sectioning element</small><br /><b>footer for its nearest sectioning element</b>. A footer typically contains information about the author of the section, copyright data or links to related documents	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Enclose information about the author in an <code>&lt;address&gt;</code> element that can be included into the <code>&lt;footer&gt;</code> element.</li> <li>The <code>&lt;footer&gt;</code> element is not sectioning content and therefore doesn't introduce a new section in the outline.</li></ul>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer	HTML
HTML element <code>&lt;h1–h6&gt;</code>	HTML content sectioning elements represent six levels of section <b>headings</b>. <code>&lt;h1&gt;</code> is the highest section level and <code>&lt;h6&gt;</code> is the lowest	"<h2>Attributes</h2> <p>These elements include the global attributes.</p> <p>The <code>align</code> attribute is obsolete; don't use it.</p> <h2>Usage notes</h2> <ul> <li>Heading information may be used by user agents, for example, to construct a table of contents for a document automatically.</li> <li>Do not use lower levels to decrease heading font size: use the CSS <code>font-size</code> property instead.</li> <li>Avoid skipping heading levels: always start from <code>&lt;h1&gt;</code>, next use <code>&lt;h2&gt;</code> and so on.</li> <li>With the <code>&lt;section&gt;</code>  element, you should consider avoiding using &lt;h1&gt; more than once  on a page; by convention and for&nbsp;accessibility, it's used for the page's  displayed title, with all headings below starting with <code>&lt;h2&gt;</code>. When using sections, you should use one <code>&lt;h1&gt;</code> per section. See ""Defining sections"" in Using HTML sections and outlines for more information.</li> </ul> <h2>Examples</h2> <h3>All headings</h3> <p>The following code shows all the heading levels, in use.</p> <pre><code>&lt;h1&gt;Heading level 1&lt;/h1&gt; &lt;h2&gt;Heading level 2&lt;/h2&gt; &lt;h3&gt;Heading level 3&lt;/h3&gt; &lt;h4&gt;Heading level 4&lt;/h4&gt; &lt;h5&gt;Heading level 5&lt;/h5&gt; &lt;h6&gt;Heading level 6&lt;/h6&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1–h6	HTML
HTML element <code>&lt;header&gt;</code>	<small>HTML content sectioning element</small><br /><b>group of introductory or navigational aids</b>. It may contain some heading elements but also other elements like a logo, a search form, and so on	"<h2>Usage notes</h2> <p>The <code>&lt;header&gt;</code> element is not sectioning content and therefore does not introduce a new section in the outline. That said, a <code>header</code> element is intended to usually contain the surrounding <code>section</code>'s heading (an <code>h1</code>–<code>h6</code> element), but this is <strong>not</strong> required.</p> <h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <pre><code>&lt;header&gt;   &lt;h1&gt;Main Page Title&lt;/h1&gt;   &lt;img src=""mdn-logo-sm.png"" alt=""MDN logo""&gt; &lt;/header&gt;</code></pre> <h1></h1>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header	HTML
HTML element <code>&lt;hgroup&gt;</code>	<small>HTML content sectioning element</small><br>represents a multi-level heading for a section of a document. It groups a set of <code>&lt;h1&gt;–&lt;h6&gt;</code> elements	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <div> <p>The <code>&lt;hgroup&gt;</code> element has been removed from the  HTML5 (W3C) specification, but it still is in the WHATWG version of  HTML. It is partially implemented in most browsers, though, so is  unlikely to go away.<br />  However, given that a key purpose of the <code>&lt;hgroup&gt;</code> element is to affect how headings are displayed by the outline algorithm defined in the HTML specification—but <strong>the HTML outline algorithm is not implemented in any browsers</strong>—then the <code>&lt;hgroup&gt;</code> semantics are in practice only theoretical.<br />  So the HTML5 (W3C) specification provides advice on how to mark up Subheadings, subtitles, alternative titles and taglines without using <code>&lt;hgroup&gt;</code>.</p> </div> <p>The <code>&lt;hgroup&gt;</code> element allows the primary heading  for a document section to be grouped with any secondary headings—such as  subheadings or alternative titles—to form a <em>multi-level</em> heading.</p> <p>In other words, the <code>&lt;hgroup&gt;</code> element prevents any of its secondary <code>&lt;h1&gt;–&lt;h6&gt;</code> children from creating separate sections of their own in the outline—as those&nbsp;<code>&lt;h1&gt;–&lt;h6&gt;</code> elements otherwise normally would if they were not children of any <code>&lt;hgroup&gt;</code>.</p> <p>So in the abstract outline produced by the HTML outline algorithm defined in the HTML specification, the <code>&lt;hgroup&gt;</code> as a whole forms a single logical heading, with the entire set of <code>&lt;h1&gt;–&lt;h6&gt;</code> children of the <code>&lt;hgroup&gt;</code> going into the outline as one <em>multi-level</em> unit, to comprise that single logical heading in the abstract outline.</p> <p>To produce any (non-abstract) <em>rendered</em> view of such an outline, some choice must be made in the design of the rendering tool about how to render <code>&lt;hgroup&gt;</code> headings in such a way as to convey their multi-level nature. There are a variety of ways an <code>&lt;hgroup&gt;</code> might be shown in a rendered outline; for example:</p> <ul> <li>an <code>&lt;hgroup&gt;</code> might be shown in a rendered outline in with a colon character and space (“<code>: </code>”)  or other such punctuation after the primary heading and before the  first secondary heading (and with the same or similar punctuation before  any other secondary headings</li> <li>an <code>&lt;hgroup&gt;</code> might be shown in a rendered outline in with the primary heading followed by parentheses around the secondary heading(s)</li> </ul> <p>Consider the following HTML document:</p> <pre><code>&lt;!DOCTYPE html&gt; &lt;title&gt;HTML Standard&lt;/title&gt; &lt;body&gt;   &lt;hgroup&gt;     &lt;h1&gt;HTML&lt;/h1&gt;     &lt;h2&gt;Living Standard — Last Updated 12 August 2016&lt;/h2&gt;   &lt;/hgroup&gt;   &lt;p&gt;Some intro to the document.&lt;/p&gt;   &lt;h2&gt;Table of contents&lt;/h2&gt;   &lt;ol id=toc&gt;...&lt;/ol&gt;   &lt;h2&gt;First section&lt;/h2&gt;   &lt;p&gt;Some intro to the first section.&lt;/p&gt; &lt;/body&gt;</code></pre> <p>A rendered outline for that document might look like the following:</p> <p><img src=""outline-colon.png"" /></p> <p>That is, the rendered outline might show the primary title, <em>HTML</em>, followed by a colon and space, followed by the secondary title, <em>Living Standard — Last Updated 12 August 2016</em>.</p> <p>Or, the rendered outline for that document might instead look like the following:</p> <p><img src=""outline-paren.png"" /></p> <p>That is, the rendered outline might show the primary title, <em>HTML</em>, followed by the secondary title shown in parentheses:<em> (Living Standard — Last Updated 12 August 2016)</em>.</p> <h2>Examples</h2> <pre><code>&lt;hgroup&gt;   &lt;h1&gt;HTML&lt;/h1&gt;   &lt;h2&gt;Living Standard — Last Updated 12 August 2016&lt;/h2&gt; &lt;/hgroup&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup	HTML
HTML element <code>&lt;nav&gt;</code>	<small>HTML content sectioning element</small><br />represents a section of a page whose purpose is to provide <b>navigation links</b>, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Not all links of a document must be in a <code>&lt;nav&gt;</code> element, which is intended only for major block of navigation links; typically the <code>&lt;footer&gt;</code> element often has a list of links that don't need to be in a <code>&lt;nav&gt;</code> element.</li> <li>A document may have several <code>&lt;nav&gt;</code> elements, for example, one for site navigation and one for intra-page navigation.</li> <li>User agents, such as screen readers targeting disabled users, can  use this element to determine whether to omit the initial rendering of  this content.</li> </ul> <h2>Examples</h2> <p>In this example, a <code>&lt;nav&gt;</code> block is used to contain an unordered list (<code>&lt;ul&gt;</code>) of links. With appropriate CSS, this can be presented as a sidebar, navigation bar, or drop-down menu.</p> <pre><code>&lt;nav&gt;   &lt;ul&gt;     &lt;li&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;     &lt;li&gt;&lt;a&gt;About&lt;/a&gt;&lt;/li&gt;     &lt;li&gt;&lt;a&gt;Contact&lt;/a&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/nav&gt;</code></pre> <h2></h2>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav	HTML
HTML element <code>&lt;section&gt;</code>	<small>HTML content sectioning element</small><br /><b>standalone section</b> of functionality contained within an HTML document, typically with a heading, which doesn't have a more specific semantic element to represent it	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Each <code>&lt;section&gt;</code> should be identified, typically by including a heading (<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code> element) as a child of the <code>&lt;section&gt;</code> element.</li> <li>If it makes sense to separately syndicate the content of a <code>&lt;section&gt;</code> element, use an <code>&lt;article&gt;</code> element instead.</li> <li>Do not use the <code>&lt;section&gt;</code> element as a generic container; this is what <code>&lt;div&gt;</code>  is for, especially when the sectioning is only for styling purposes. A  rule of thumb is that a section should logically appear in the outline  of a document.</li> </ul> <h2>Example 1</h2> <h3>Before</h3> <pre><code>&lt;div&gt;   &lt;h1&gt;Heading&lt;/h1&gt;   &lt;p&gt;Bunch of awesome content&lt;/p&gt; &lt;/div&gt;</code></pre> <h3>After</h3> <pre><code>&lt;section&gt;   &lt;h1&gt;Heading&lt;/h1&gt;   &lt;p&gt;Bunch of awesome content&lt;/p&gt; &lt;/section&gt;</code></pre> <h2>Example 2</h2> <h3>Before</h3> <pre><code>&lt;div&gt;   &lt;h2&gt;Heading&lt;/h2&gt;   &lt;img src=""bird.jpg"" alt=""bird""&gt; &lt;/div&gt;</code></pre> <h3>After</h3> <pre><code>&lt;section&gt;   &lt;h2&gt;Heading&lt;/h2&gt;   &lt;img src=""bird.jpg"" alt=""bird""&gt; &lt;/section&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section	HTML
HTML element <code>&lt;blockquote&gt;</code>	<small>HTML text content element</small><br /><b>extended quotation</b>,&nbsp;usually indentated<div>source URL may be given using the <code>cite</code> attribute, while a text representation of the source can be given using the <code>&lt;cite&gt;</code> element</div>	<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>cite</code></strong></dt> <dd>A URL that designates a source document or message for the  information quoted. This attribute is intended to point to information  explaining the context or the reference for the quote.</dd> </dl> <h2>Notes</h2> <p>To change <code>&lt;blockquote&gt;</code> indent, use CSS <code>margin</code> property.</p> <p>For short quotes use the <code>&lt;q&gt;</code> element.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote	HTML
HTML element <code>&lt;dd&gt;</code>	<small>HTML text content element</small><br />indicates the <b>description of a term</b> in a description list (<code>&lt;dl&gt;</code>)	<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>nowrap</code></strong> <i> </i></dt> <dd>If the value of this attribute is set to <code>yes</code>, the definition text will not wrap. The default value is <code>no</code>.</dd> </dl> <h2>Example</h2> <p>For an example, see &lt;dl&gt; examples.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd	HTML
HTML element <code>&lt;div&gt;</code>	<small>HTML text content element</small><br />is the <b>generic container</b> for flow content and does not inherently represent anything. Use it to group elements for purposes such as styling (using the <code>class</code> or <code>id</code> attributes), marking a section of a document in a different language (using the <code>lang</code> attribute), and so on	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <p>The <strong>align</strong> attribute is obsolete; do not use it anymore.</p> <h2>Usage notes</h2> <ul> <li>The &lt;div&gt; element should be used only when no other semantic element (such as <code>&lt;article&gt;</code> or <code>&lt;nav&gt;</code>) is appropriate.</li> </ul> <h2>Examples</h2> <pre><code>&lt;div&gt;   &lt;p&gt;Any kind of content here. Such as   &amp;lt;p&amp;gt;, &amp;lt;table&amp;gt;. You name it!&lt;/p&gt; &lt;/div&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div	HTML
HTML element <code>&lt;dl&gt;</code>	<small>HTML text content element</small><br />represents a <b>description list</b>. The element encloses a list of groups of terms and descriptions. Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs)	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>compact</code></strong> <i> </i></dt> <dd>Forces the description to appear on the same line as the term. This attribute is currently unsupported</dd> </dl> <h2>Examples</h2> <h3>Single term and description</h3> <pre><code>&lt;dl&gt;   &lt;dt&gt;Firefox&lt;/dt&gt;   &lt;dd&gt;     A free, open source, cross-platform,     graphical web browser developed by the     Mozilla Corporation and hundreds of     volunteers.   &lt;/dd&gt;    &lt;!-- Other terms and descriptions --&gt; &lt;/dl&gt;</code></pre> <p>Output:</p> <p><img src=""=HTML-dl1.png"" /></p> <h3>Multiple terms, single description</h3> <pre><code>&lt;dl&gt;   &lt;dt&gt;Firefox&lt;/dt&gt;   &lt;dt&gt;Mozilla Firefox&lt;/dt&gt;   &lt;dt&gt;Fx&lt;/dt&gt;   &lt;dd&gt;     A free, open source, cross-platform,     graphical web browser developed by the     Mozilla Corporation and hundreds of     volunteers.   &lt;/dd&gt;    &lt;!-- Other terms and descriptions --&gt; &lt;/dl&gt;</code></pre> <p>Output:</p> <p><img src=""=HTML-dl2.png"" /></p> <h3>Single term, multiple descriptions</h3> <pre><code>&lt;dl&gt;   &lt;dt&gt;Firefox&lt;/dt&gt;   &lt;dd&gt;     A free, open source, cross-platform,     graphical web browser developed by the     Mozilla Corporation and hundreds of     volunteers.   &lt;/dd&gt;   &lt;dd&gt;     The Red Panda also known as the Lesser     Panda, Wah, Bear Cat or Firefox, is a     mostly herbivorous mammal, slightly large     than a domestic cat (60 cm long).   &lt;/dd&gt;    &lt;!-- Other terms and descriptions --&gt; &lt;/dl&gt;</code></pre> <p>Output:</p> <p><img src=""=HTML-dl3.png"" /></p> <h3>Multiple terms and descriptions</h3> <p>It is also possible to define multiple terms with multiple corresponding descriptions, by combining the examples above.</p> <h3>Metadata</h3> <p>Description lists are useful for displaying metadata as a list of key-value pairs.</p> <pre><code>&lt;dl&gt;   &lt;dt&gt;Name&lt;/dt&gt;       &lt;dd&gt;Godzilla&lt;/dd&gt;   &lt;dt&gt;Born&lt;/dt&gt;   &lt;dd&gt;1952&lt;/dd&gt;   &lt;dt&gt;Birthplace&lt;/dt&gt;   &lt;dd&gt;Japan&lt;/dd&gt;   &lt;dt&gt;Color&lt;/dt&gt;   &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt;</code></pre> <p>Tip: It can be handy to define a key-value seperator in the CSS, such as:</p> <pre><code>dt::after {   content: "": ""; }</code></pre> <h3>Wrapping name-value groups in <code>&lt;div&gt;</code> elements</h3> <p>WHATWG HTML allows wrapping each name-value group in a <code>&lt;dl&gt;</code> element in a <code>&lt;div&gt;</code> element. This can be useful when using microdata, or when global attributes apply to a whole group, or for styling purposes.</p> <pre><code>&lt;dl&gt;   &lt;div&gt;     &lt;dt&gt;Name&lt;/dt&gt;     &lt;dd&gt;Godzilla&lt;/dd&gt;   &lt;/div&gt;   &lt;div&gt;     &lt;dt&gt;Born&lt;/dt&gt;     &lt;dd&gt;1952&lt;/dd&gt;   &lt;/div&gt;   &lt;div&gt;     &lt;dt&gt;Birthplace&lt;/dt&gt;     &lt;dd&gt;Japan&lt;/dd&gt;   &lt;/div&gt;   &lt;div&gt;     &lt;dt&gt;Color&lt;/dt&gt;     &lt;dd&gt;Green&lt;/dd&gt;   &lt;/div&gt; &lt;/dl&gt;</code></pre> <h2>Notes</h2> <p>Do not use this element&nbsp;(nor <code>&lt;ul&gt;</code>  elements)&nbsp;to merely create indention on a page. Although it works, this  is a bad practice and obscures the meaning of description&nbsp;lists.</p> <p>To change the indention of a description term, use the CSS <code>margin</code> property.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl	HTML
HTML element <code>&lt;dt&gt;</code>	<small>HTML text content element</small><br />identifies a <b>term in a description list</b>. This element can occur only as a child element of a <code>&lt;dl&gt;</code>. It is usually followed by a <code>&lt;dd&gt;</code> element; however, multiples of this&nbsp;element in a row indicate several terms that are all defined by the immediate next <code>&lt;dd&gt;</code> element	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <p>For example see description list.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt	HTML
HTML element <code>&lt;figcaption&gt;</code>	<small>HTML text content element</small><br>represents a caption or a legend associated with a figure or an illustration described by the rest of the data of the <code>&lt;figure&gt;</code> element which is its immediate ancestor	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Examples</h2> <p>Please see the <code>&lt;figure&gt;</code> page for examples on <code>&lt;figcaption&gt;</code>.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption	HTML
HTML element <code>&lt;figure&gt;</code>	<small>HTML text content element</small><br>represents self-contained content, frequently with a caption (<code>&lt;figcaption&gt;</code>), and is typically referenced as a single unit	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Usually a <code>&lt;figure&gt;</code> is an image, illustration,  diagram, code snippet, etc., that is referenced in the main flow of a  document, but that can be moved to another part of the document or to an  appendix without affecting the main flow.</li> <li>Being a sectioning root, the outline of the content of the <code>&lt;figure&gt;</code> element is excluded from the main outline of the document.</li> <li>A caption can be associated with the <code>&lt;figure&gt;</code> element by inserting a <code>&lt;figcaption&gt;</code> inside it (as the first or the last child).</li> </ul> <h2>Examples</h2> <h3>Example 1</h3> <pre><code>&lt;!-- Just a figure --&gt; &lt;figure&gt;   &lt;img   src=""https://developer.cdn.mozilla.net/media/img/mdn-logo-sm.png""   alt=""An awesome picture""&gt; &lt;/figure&gt; &lt;p&gt;&lt;/p&gt; &lt;!-- Figure with figcaption --&gt; &lt;figure&gt;   &lt;img   src=""https://developer.cdn.mozilla.net/media/img/mdn-logo-sm.png""   alt=""An awesome picture""&gt;           &lt;figcaption&gt;Fig1. MDN Logo&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;&lt;/p&gt;</code></pre> <figure><img src=""https://developer.cdn.mozilla.net/media/img/mdn-logo-sm.png"" /></figure> <figure><img src=""https://developer.cdn.mozilla.net/media/img/mdn-logo-sm.png"" /> <figcaption>Fig1. MDN Logo</figcaption> </figure> <h3>Example 2</h3> <pre><code>&lt;figure&gt;   &lt;figcaption&gt;Get browser details using navigator&lt;/figcaption&gt;   &lt;pre&gt; function NavigatorExample() {   var txt;   txt = ""Browser CodeName: "" + navigator.appCodeName;   txt+= ""Browser Name: "" + navigator.appName;   txt+= ""Browser Version: "" + navigator.appVersion ;   txt+= ""Cookies Enabled: "" + navigator.cookieEnabled;   txt+= ""Platform: "" + navigator.platform;   txt+= ""User-agent header: "" + navigator.userAgent; }               &lt;/pre&gt; &lt;/figure&gt;</code></pre> <figure> <figcaption>Get browser details using navigator</figcaption> <pre><code>function NavigatorExample() {   var txt;   txt = ""Browser CodeName: "" + navigator.appCodeName;   txt+= ""Browser Name: "" + navigator.appName;   txt+= ""Browser Version: "" + navigator.appVersion ;   txt+= ""Cookies Enabled: "" + navigator.cookieEnabled;   txt+= ""Platform: "" + navigator.platform;   txt+= ""User-agent header: "" + navigator.userAgent; }</code></pre></figure><figure> </figure> <h3>Example 3</h3> <pre><code>&lt;figure&gt;   &lt;figcaption&gt;&lt;cite       &gt;Edsger Dijkstra :-&lt;/cite&gt;&lt;/figcaption&gt;   &lt;p&gt;""If debugging is the process of removing software bugs,   &lt;br /&gt;   then programming must be the process of putting them in""&lt;/p&gt; &lt;/figure&gt;</code></pre> <figure> <figcaption><cite>Edsger Dijkstra :-</cite></figcaption> <p>""If debugging is the process of removing software bugs,<br /> then programming must be the process of putting them in""</p> <h3>Example 4</h3> <p>&lt;figure&gt; element could be used to markup a poem.</p> <pre><code>&lt;figure&gt;  &lt;p&gt;   Depression is running through my head,&lt;br&gt;   These thoughts make me think of death,&lt;br&gt;   A darkness which blanks my mind,&lt;br&gt;   A walk through the graveyard, what can I find?....  &lt;/p&gt;  &lt;figcaption&gt;&lt;cite&gt;Depression&lt;/cite&gt;.   By: Darren Harris&lt;/figcaption&gt; &lt;/figure&gt;</code></pre></figure>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure	HTML
HTML element <code>&lt;hr&gt;</code>	<small>HTML text content element</small><br /><b>thematic break</b> between paragraph-level elements, often represented a horizontal rule<div>for example, a change of scene in a story, or a shift of topic with a section</div>	<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>align</code></strong> <i> </i></dt> <dd>Sets the alignment of the rule on the page. If no value is specified, the default value is <code>left</code>.</dd> <dt><strong><code>color</code></strong> <i> </i></dt> <dd>Sets the color of the rule through color name or hexadecimal value.</dd> <dt><strong><code>noshade</code></strong>&nbsp;<i> </i></dt> <dd>Sets the rule to have no shading.</dd> <dt><strong><code>size</code></strong>&nbsp;<i> </i></dt> <dd>Sets the height, in pixels, of the rule.</dd> <dt><strong><code>width</code></strong>&nbsp;<i> </i></dt> <dd>Sets the length of the rule on the page through a pixel or percentage value.</dd> </dl> <h2>Example</h2> <pre><code>&lt;p&gt;   This is the first paragraph of text.   This is the first paragraph of text.   This is the first paragraph of text.   This is the first paragraph of text. &lt;/p&gt;  &lt;hr&gt;  &lt;p&gt;   This is the second paragraph of text.   This is the second paragraph of text.   This is the second paragraph of text.   This is the second paragraph of text. &lt;/p&gt;</code></pre> <p>Above HTML will output:</p> <p>This is the first paragraph of text. This is the first paragraph of  text. This is the first paragraph of text. This is the first paragraph  of text.</p> <hr /> <p>This is the second paragraph of text. This is the second paragraph of  text. This is the second paragraph of text. This is the second  paragraph of text.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr	HTML
HTML element <code>&lt;li&gt;</code>	<small>HTML text content element</small><br />is used to represent an <b>item in a list</b>. It must be contained in a parent element: an ordered list (<code>&lt;ol&gt;</code>), an unordered list (<code>&lt;ul&gt;</code>), or a menu (<code>&lt;menu&gt;</code>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>value</code></strong></dt> <dd>This integer attribute indicates the current ordinal value of the list item as defined by the <code>&lt;ol&gt;</code>  element. The only allowed value for this attribute is a number, even if  the list is displayed with Roman numerals or letters. List items that  follow this one continue numbering from the value set. The <strong>value</strong> attribute has no meaning for unordered lists (<code>&lt;ul&gt;</code>) or for menus (<code>&lt;menu&gt;</code>).  <div><strong>Note</strong>: This attribute was deprecated in HTML4, but reintroduced in HTML5.</div> <div> <p><strong>Note:</strong> Prior to Gecko&nbsp;9.0, negative values were incorrectly converted to 0. Starting in Gecko&nbsp;9.0 all integer values are correctly parsed.</p> </div> </dd> <dt><strong><code>type</code></strong> <i> </i></dt> <dd>This character attribute indicates the numbering type:  <ul> <li><code>a</code>: lowercase letters</li> <li><code>A</code>: uppercase letters</li> <li><code>i</code>: lowercase Roman numerals</li> <li><code>I</code>: uppercase Roman numerals</li> <li><code>1</code>: numbers</li> </ul>  This type overrides the one used by its parent <code>&lt;ol&gt;</code> element, if any.   <div><strong>Usage note:</strong> This attribute has been deprecated: use the CSS <code>list-style-type</code> property instead.</div> </dd> </dl> <h2>Examples</h2> <pre><code>&lt;ol&gt;     &lt;li&gt;first item&lt;/li&gt;     &lt;li&gt;second item&lt;/li&gt;     &lt;li&gt;third item&lt;/li&gt; &lt;/ol&gt;</code></pre> <p>The above HTML will output:</p> <ol> <li>first item</li> <li>second item</li> <li>third item</li> </ol> <pre><code>&lt;ol type=""I""&gt;     &lt;li value=""3""&gt;third item&lt;/li&gt;     &lt;li&gt;fourth item&lt;/li&gt;     &lt;li&gt;fifth item&lt;/li&gt; &lt;/ol&gt;</code></pre> <p>The above HTML will output:</p> <ol style=""list-style-type: upper-roman;"" start=""3""> <li>third item</li> <li>fourth item</li> <li>fifth item</li> </ol> <pre><code>&lt;ul&gt;     &lt;li&gt;first item&lt;/li&gt;     &lt;li&gt;second item&lt;/li&gt;     &lt;li&gt;third item&lt;/li&gt; &lt;/ul&gt;</code></pre> <ul> <li>first item</li> <li>second item</li> <li>third item</li> </ul> <p>For more detailed examples, see the &lt;ol&gt; and &lt;ul&gt; pages.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li	HTML
HTML element <code>&lt;main&gt;</code>	<small>HTML text content element</small><br /><b>main content of the <code>&lt;body&gt;</code> </b>of a document or application. The main content area consists of content that is directly related to, or expands upon the central topic of a document or the central functionality of an application	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <p>While the WHATWG living standard for HTML allows multiple <code>&lt;main&gt;</code> elements in a page, the W3C version of the specification does not. In addition, the W3C version of the HTML specification doesn't allow <code>&lt;main&gt;</code> as a descendant of <code>&lt;article&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;header&gt;</code>, or <code>&lt;nav&gt;</code>.</p> <p>The content of a <code>&lt;main&gt;</code> element should be unique  to the document, excluding any content that is repeated across a set of  documents such as sidebars, navigation links, copyright information,  site logos, and search forms (unless the document's main function is as a  search form).</p> <h2>Example</h2> <pre><code>&lt;!-- other content --&gt;  &lt;main&gt;   &lt;h1&gt;Apples&lt;/h1&gt;   &lt;p&gt;The apple is the pomaceous fruit of the apple tree.&lt;/p&gt;      &lt;article&gt;     &lt;h2&gt;Red Delicious&lt;/h2&gt;     &lt;p&gt;These bright red apples are the most common found in many     supermarkets.&lt;/p&gt;     &lt;p&gt;... &lt;/p&gt;     &lt;p&gt;... &lt;/p&gt;   &lt;/article&gt;    &lt;article&gt;     &lt;h2&gt;Granny Smith&lt;/h2&gt;     &lt;p&gt;These juicy, green apples make a great filling for     apple pies.&lt;/p&gt;     &lt;p&gt;... &lt;/p&gt;     &lt;p&gt;... &lt;/p&gt;   &lt;/article&gt;  &lt;/main&gt;  &lt;!-- other content --&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main	HTML
HTML element <code>&lt;ol&gt;</code>	<small>HTML text content element</small><br />represents an <b>ordered list</b> of items, typically rendered as a numbered list	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>compact</code></strong><i> </i></dt> <dd>This Boolean attribute hints that the list should be rendered in a  compact style. The interpretation of this attribute depends on the user  agent and it doesn't work in all browsers. <div><strong>Note:</strong>&nbsp;Do not use this attribute, as it has been deprecated: the <code>&lt;ol&gt;</code> element should be styled using CSS. To give an effect similar to&nbsp;the <code>compact</code> attribute, the CSS property <code>line-height</code> can be used with a value of <code>80%</code>.</div></dd> <dt><strong><code>reversed</code></strong> HTML5</dt> <dd>This Boolean attribute specifies that the items of the list are specified in reversed order.</dd> <dt><strong><code>start</code></strong>HTML5</dt> <dd>This integer attribute specifies the start value for numbering the  individual list items. Although the ordering type of list elements might  be Roman numerals, such as XXXI, or letters, the value of start is  always represented as a number. To start numbering elements from the  letter ""C"", use <code>&lt;ol start=""3""&gt;</code>.  <div><strong>Note</strong>: This attribute was deprecated in HTML4, but reintroduced in HTML5.</div> </dd> <dt><strong><code>type</code></strong></dt> <dd>Indicates the numbering type:  <ul> <li><code>'a'</code> indicates lowercase letters,</li> <li><code>'A'</code> indicates uppercase letters,</li> <li><code>'i'</code> indicates lowercase Roman numerals,</li> <li><code>'I'</code> indicates uppercase Roman numerals,</li> <li>and <code>'1'</code> indicates numbers (default).</li> </ul> <p>The type set is used for the entire list unless a different <code>type</code> attribute is used within an enclosed <code>&lt;li&gt;</code> element.</p> <div><strong>Note:&nbsp;</strong>This attribute was deprecated  in HTML4, but reintroduced in HTML5. Unless the value of the list number  matters (e.g. in legal or technical documents where items are to be  referenced by their number/letter), the CSS <code>list-style-type</code> property should be used instead.</div> </dd> </dl> <h2>Usage notes</h2> <ul> <li>Typically, ordered-list items are displayed with a preceding  numbering, which can be of any form, like numerals, letters or Romans  numerals or even simple bullets. This numbered style is not defined in  the HTML description of the page, but in its associated CSS, using the <code>list-style-type</code> property.</li> <li>There is no limitation to the depth and alternation of nested lists defined with the <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> elements.</li> <li>The <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> both represent a list of items. They differ in the way that, with the <code>&lt;ol&gt;</code>  element, the order is meaningful. As a rule of thumb to determine which  one to use, try changing the order of the list items; if the meaning is  changed, the <code>&lt;ol&gt;</code> element should be used, else the <code>&lt;ul&gt;</code> is adequate.</li> </ul> <h2>Examples</h2> <h3>Simple example</h3> <pre><code>&lt;ol&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item&lt;/li&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ol&gt;</code></pre> <p>Above HTML will output:</p> <ol> <li>first item</li> <li>second item</li> <li>third item</li> </ol> <h3>Using the <code>start</code> attribute</h3> <pre><code>&lt;ol start=""7""&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item&lt;/li&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ol&gt;</code></pre> <p>Above HTML will output:</p> <ol start=""7""> <li>first item</li> <li>second item</li> <li>third item</li> </ol> <h3>Nesting lists</h3> <pre><code>&lt;ol&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item  &lt;!-- closing &lt;/li&gt; tag not here! --&gt;     &lt;ol&gt;       &lt;li&gt;second item first subitem&lt;/li&gt;       &lt;li&gt;second item second subitem&lt;/li&gt;       &lt;li&gt;second item third subitem&lt;/li&gt;     &lt;/ol&gt;   &lt;/li&gt;            &lt;!-- Here's the closing &lt;/li&gt; tag --&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ol&gt;</code></pre> <p>Above HTML will output:</p> <ol> <li>first item</li> <li>second item   <ol> <li>second item first subitem</li> <li>second item second subitem</li> <li>second item third subitem</li> </ol> </li> <li>third item</li> </ol> <h3>Nested &lt;ol&gt; and &lt;ul&gt;</h3> <pre><code>&lt;ol&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item  &lt;!-- closing &lt;/li&gt; tag not here! --&gt;     &lt;ul&gt;       &lt;li&gt;second item first subitem&lt;/li&gt;       &lt;li&gt;second item second subitem&lt;/li&gt;       &lt;li&gt;second item third subitem&lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;            &lt;!-- Here's the closing &lt;/li&gt; tag --&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ol&gt;</code></pre> <p>Above HTML will output:</p> <ol> <li>first item</li> <li>second item   <ul> <li style=""list-style-type: square;"">second item first subitem</li> <li style=""list-style-type: square;"">second item second subitem</li> <li style=""list-style-type: square;"">second item third subitem</li> </ul> </li> <li>third item</li></ol>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol	HTML
HTML element <code>&lt;p&gt;</code>	<small>HTML text content element</small><br /><b>paragraph</b> of text	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <div> <p><strong>Note:</strong> The <code>align</code> attribute on <code>&lt;p&gt;</code>&nbsp;tags is obsolete and should no longer be used.</p> </div> <h2>Example</h2> <pre><code>&lt;p&gt;This is the first paragraph of text.   This is the first paragraph of text.   This is the first paragraph of text.   This is the first paragraph of text.&lt;/p&gt; &lt;p&gt;This is the second paragraph.  This is the second paragraph.  This is the second paragraph.  This is the second paragraph.&lt;/p&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p	HTML
HTML element <code>&lt;pre&gt;</code>	"<small>HTML text content element</small><br />represents <b>preformatted text</b>. Text within this element is typically displayed in a non-proportional (""monospace"") font exactly as it is laid out in the file. Whitespace inside this element is displayed as typed"	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <dl> <dt><strong><code>cols</code></strong> <i> </i><i> </i></dt> <dd>Contains the <em>preferred</em> count of characters that a line should have. It was a non-standard synonym of <code>width</code>. To achieve such an effect, use CSS <code>width</code> instead.</dd> <dt><strong><code>width</code></strong> <i> </i></dt> <dd>Contains the <em>preferred</em> count of characters that a line  should have. Though technically still implemented, this attribute has no  visual effect; to achieve such an effect, use CSS <code>width</code> instead.</dd> <dt><strong><code>wrap</code></strong> <i> </i></dt> <dd>Is a <em>hint</em> indicating how the overflow must happen. In  modern browser this hint is ignored and no visual effect results in its  present; to achieve such an effect, use CSS <code>white-space</code> instead.</dd> </dl> <h2>Examples</h2> <pre><code>&lt;!-- Some example CSS code --&gt; &lt;pre&gt; body {   color:red; } &lt;/pre&gt;</code></pre> <h3>Result</h3> <pre><code>body {   color:red; }</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre	HTML
HTML element <code>&lt;ul&gt;</code>	<small>HTML text content element</small><br />represents an <b>unordered list</b> of items, typically rendered as a bulleted list	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>compact</code></strong><i> </i></dt> <dd>This Boolean attribute hints that the list should be rendered in a  compact style. The interpretation of this attribute depends on the user  agent and it doesn't work in all browsers.  <div><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it has been deprecated: the <code>&lt;ul&gt;</code> element should be styled using CSS. To give a similar effect as the <code>compact</code> attribute, the CSS property line-height can be used with a value of <code>80%</code>.</div> </dd> </dl> <dl> <dt><strong><code>type</code></strong><i> </i></dt> <dd>Used to set the bullet style for the list. The values defined under HTML3.2 and the transitional version of HTML 4.0/4.01 are:  <ul> <li><code>circle</code>,</li> <li><code>disc</code>,</li> <li>and <code>square</code>.</li> </ul> <p>A fourth bullet type has been defined in the WebTV interface, but not all browsers support it: <code>triangle.</code></p> <p>If not present and if no CSS <code>list-style-type</code> property does apply to the element, the user agent decide to use a kind of bullets depending on the nesting level of the list.</p> <div><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated; use the CSS <code>list-style-type</code> property instead.</div> </dd> </dl> <h2>Usage notes</h2> <ul> <li>The <code>&lt;ul&gt;</code> element is for grouping a collection of  items that do not have a numerical ordering, and their order in the  list is meaningless. Typically, unordered-list items are displayed with a  bullet, which can be of several forms, like a dot, a circle or a  squared. The bullet style is not defined in the HTML description of the  page, but in its associated CSS, using the <code>list-style-type</code> property.</li> <li>There is no limitation to the depth and alternation&nbsp;of nested lists defined with the <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> elements.</li> <li>The <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> elements both represent a list of items. They differ in that, with the <code>&lt;ol&gt;</code>  element, the order is meaningful. As a rule of thumb to determine which  one to use, try changing the order of the list items; if the meaning is  changed, the <code>&lt;ol&gt;</code> element should be used, otherwise you can use <code>&lt;ul&gt;</code>.</li> </ul> <h2>Examples</h2> <h3>Simple example</h3> <pre><code>&lt;ul&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item&lt;/li&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ul&gt;</code></pre> <p>Above HTML will output:</p> <ul> <li>first item</li> <li>second item</li> <li>third item</li> </ul> <h3>Nesting list</h3> <pre><code>&lt;ul&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item        &lt;!-- Look, the closing &lt;/li&gt; tag is not placed here! --&gt;     &lt;ul&gt;       &lt;li&gt;second item first subitem&lt;/li&gt;       &lt;li&gt;second item second subitem       &lt;!-- Same for the second nested unordered list! --&gt;         &lt;ul&gt;           &lt;li&gt;second item second subitem first sub-subitem&lt;/li&gt;           &lt;li&gt;second item second subitem second sub-subitem&lt;/li&gt;           &lt;li&gt;second item second subitem third sub-subitem&lt;/li&gt;         &lt;/ul&gt;       &lt;/li&gt; &lt;!-- Closing &lt;/li&gt; tag for the li that                   contains the third unordered list --&gt;       &lt;li&gt;second item third subitem&lt;/li&gt;     &lt;/ul&gt;   &lt;!-- Here is the closing &lt;/li&gt; tag --&gt;   &lt;/li&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ul&gt;</code></pre> <p>Above HTML will output:</p> <ul> <li>first item</li> <li>second item   <ul> <li>second item first subitem</li> <li>second item second subitem     <ul style=""""> <li>second item second subitem first sub-subitem</li> <li>second item second subitem second sub-subitem</li> <li>second item second subitem third sub-subitem</li> </ul> </li> <li>second item third subitem</li> </ul> </li> <li>third item</li> </ul> <h3>Nested &lt;ul&gt; and &lt;ol&gt;</h3> <pre><code>&lt;ul&gt;   &lt;li&gt;first item&lt;/li&gt;   &lt;li&gt;second item   &lt;!-- Look, the closing &lt;/li&gt; tag is not placed here! --&gt;     &lt;ol&gt;       &lt;li&gt;second item first subitem&lt;/li&gt;       &lt;li&gt;second item second subitem&lt;/li&gt;       &lt;li&gt;second item third subitem&lt;/li&gt;     &lt;/ol&gt;   &lt;!-- Here is the closing &lt;/li&gt; tag --&gt;   &lt;/li&gt;   &lt;li&gt;third item&lt;/li&gt; &lt;/ul&gt;</code></pre> <p>Above HTML will output:</p> <ul> <li>first item</li> <li>second item   <ol> <li>second item first subitem</li> <li>second item second subitem</li> <li>second item third subitem</li> </ol> </li> <li>third item</li></ul>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul	HTML
HTML element <code>&lt;a&gt;</code>	<small>HTML inline text semantics element</small><br /><b>creates a hyperlink</b> to other web pages, files, locations within the same page, email addresses, or any other URL	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>download</code></strong> HTML5</dt> <dd>This attribute instructs browsers to download a URL instead of  navigating to it, so the user will be prompted to save it as a local  file. If the attribute has a value, it is used as the pre-filled file  name in the Save prompt (the user can still change the file name if they  want). There are no restrictions on allowed values, though <code>/</code> and <code>\</code>  are converted to underscores. Most file systems limit some punctuation  in file names, and browsers will adjust the suggested name accordingly.  <div><strong>Notes:</strong> <ul> <li>This attribute only works for same-origin URLs.</li> <li>This attribute can be used with <code>blob:</code> URLs and <code>data:</code> URLs to download content generated by JavaScript, such as pictures created in an image-editor Web app.</li> <li>If the HTTP header <code>Content-Disposition:</code> gives a different filename than this attribute, the HTTP header takes priority over this attribute.</li> <li>If <code>Content-Disposition:</code> is set to <code>inline</code>, Firefox prioritizes <code>Content-Disposition</code>, like the filename case, while Chrome prioritizes the <code>download</code> attribute.</li> </ul> </div> </dd> <dt><strong><code>href</code></strong></dt> <dd>Contains a URL or a URL fragment that the hyperlink points to.</dd> <dd>A URL fragment is a name preceded by a hash mark (<code>#</code>), which specifies an internal target location (an ID  of an HTML element) within the current document. URLs are not  restricted to Web (HTTP)-based documents, but can use any protocol  supported by the browser. For example, <code>file:</code>, <code>ftp:</code>, and <code>mailto:</code> work in most browsers.</dd> <dd>This attribute may be omitted (as of HTML5) to create a placeholder  link. A placeholder link resembles a traditional hyperlink, but does  not lead anywhere.  <div> <p><strong>Note:</strong> You can use <code>href=""#top""</code> or the empty fragment <code>href=""#""</code> to link to the top of the current page. This behavior is specified by HTML5.</p> </div> </dd> <dt><strong><code>hreflang</code></strong></dt> <dd>This attribute indicates the human language of the linked resource.  It is purely advisory, with no built-in functionality. Allowed values  are determined by BCP47.</dd> <dt><strong><code>referrerpolicy</code></strong> <i> </i></dt> <dd>Indicates which referrer to send when fetching the URL:  <ul> <li><code>'no-referrer'</code> means the <code>Referer:</code> header will not be sent.</li> <li><code>'no-referrer-when-downgrade'</code> means no <code>Referer:</code> header will be sent when navigating to an origin without HTTPS. This is the default behavior.</li> <li><code>'origin'</code> means the referrer will be the origin of the page, not including information after the domain.</li> <li><code>'origin-when-cross-origin'</code> meaning that navigations  to other origins will be limited to the scheme, the host and the port,  while navigations on the same origin will include the referrer's path.</li> <li><code>'unsafe-url'</code> means the referrer will include the  origin and path, but not the fragment, password, or username. This is  unsafe because it can leak data from secure URLs to insecure ones.</li> </ul> </dd> <dt><strong><code>rel</code></strong></dt> <dd>Specifies the relationship of the target object to the link object. The value is a space-separated list of link types.</dd> <dt><strong><code>target</code></strong></dt> <dd>Specifies where to display the linked URL. It is a name of, or keyword for, a <em>browsing context</em>: a tab, window, or <code>&lt;iframe&gt;</code>. The following keywords have special meanings:  <ul> <li><code>_self</code>: Load the URL into the same browsing context as the current one. This is the default behavior.</li> <li><code>_blank</code>: Load the URL into a new browsing context. This is usually a tab, but users can configure browsers to use new windows instead.</li> <li><code>_parent</code>: Load the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as <code>_self</code>.</li> <li><code>_top</code>: Load the URL into the top-level browsing  context (that is, the ""highest"" browsing context that is an ancestor of  the current one, and has no parent). If there is no parent,&nbsp;this behaves  the same way as <code>_self</code>.</li> </ul> <div> <p><strong>Note:</strong> When using <code>target</code>, consider adding <code>rel=""noopener noreferrer""</code> to avoid exploitation of the <code>window.opener</code> API.</p> </div> </dd> <dt><strong><code>type</code></strong></dt> <dd>Specifies the media type in the form of a MIME type for the linked URL. It is purely advisory, with no built-in functionality.</dd> </dl> <h3>Obsolete</h3> <dl> <dt><strong><code>charset</code></strong> Obsolete since HTML5</dt> <dd>This attribute defined the character encoding of the linked URL. The value should be a space- and/or comma-delimited list of character sets defined in RFC 2045. The default value is <code>ISO-8859-1</code>.  <div> <p><strong>Usage note:</strong> This attribute is obsolete in HTML5 and <strong>should not be used by authors</strong>. To achieve its effect, use the HTTP <code>Content-Type:</code> header on the linked URL.</p> </div> </dd> <dt><strong><code>coords</code></strong> HTML 4 only, Obsolete since HTML5</dt> <dd>For use with the below <code>shape</code> attribute, this attribute used a comma-separated list of numbers to define the coordinates of the link on the page.</dd> <dt><strong><code>name</code></strong> HTML 4 only, Obsolete since HTML5</dt> <dd>This attribute was required for anchors defining a possible target location within a page. In HTML 4.01, <code>id</code> and <code>name</code> could be used simultaneously on a <code>&lt;a&gt;</code> element as long as they have identical values.  <div> <p><strong>Usage note:</strong> This attribute is obsolete in HTML5, use the global attribute <code>id</code> instead.</p> </div> </dd> <dt><strong><code>rev</code></strong> HTML 4 only, Obsolete since HTML5</dt> <dd>This attribute specified a reverse link, the inverse relationship of the <strong>rel</strong> attribute. It was deprecated for being very confusing.</dd> <dt><strong><code>shape</code></strong> HTML 4 only, Obsolete since HTML5</dt> <dd>This attribute was used to define a region for hyperlinks to create an image map. The values are <code>circle</code>, <code>default</code>, <code>polygon</code>, and <code>rect</code>. The format of the <strong>coords</strong> attribute depends on the value of shape. For <code>circle</code>, the value is <code>x,y,r</code> where <code>x</code> and <code>y</code> are the pixel coordinates for the center of the circle and <code>r</code> is the radius value in pixels. For <code>rect</code>, the <strong>coords</strong> attribute should be <code>x,y,w,h</code>. The <code>x,y</code> values define the upper-left-hand corner of the rectangle, while <code>w</code> and <code>h</code> define the width and height respectively. A value of <code>polygon</code> for <strong>shape</strong> requires <code>x1,y1,x2,y2,...</code> values for <strong>coords</strong>. Each of the <code>x,y</code>  pairs defines a point in the polygon, with successive points being  joined by straight lines and the last point joined to the first. The  value <code>default</code> for shape requires that the entire enclosed area, typically an image, be used.  <div><strong>Note:</strong> Use the <code>usemap</code> attribute for the <code>&lt;img&gt;</code> element and the associated <code>&lt;map&gt;</code> element to define hotspots instead of the <code>shape</code> attribute.</div> </dd> </dl> <h2>Examples</h2> <h3>Linking to an external location</h3> <pre><code>&lt;!-- anchor linking to external file --&gt; &lt;a&gt; External Link &lt;/a&gt;</code></pre> <h4>Result</h4> <p>External Link</p> <h3>Linking to another section on the same page</h3> <pre><code>&lt;!-- links to element on this page with --&gt; &lt;a&gt; Description of Same-Page Links &lt;/a&gt;</code></pre> <h4>Result</h4> <p>Description of Same Page Links</p> <h3>Creating a clickable image</h3> <p>This example uses an image to link to the MDN home page. The home  page will open in a new browsing context, that is, a new page or a new  tab.</p> <pre><code>&lt;a target=""_blank""&gt;   &lt;img src=""https://mdn.mozillademos.org/files/6851/mdn_logo.png""        alt=""MDN logo"" /&gt; &lt;/a&gt;</code></pre> <h4>Result</h4> <figure> <p><iframe src=""https://mdn.mozillademos.org/en-US/docs/Web/HTML/Element/a$samples/Creating_a_clickable_image?revision=1234409"" width=""320"" height=""64"" frameborder=""0""></iframe></p><div></div><p></p></figure><h3>Creating an email link</h3> <p>It's common to create links that open in the user's email program to allow them to send a new message. This is done with a <code>mailto:</code> link. Here's a simple example:</p> <pre><code>&lt;a&gt;Send email to nowhere&lt;/a&gt;</code></pre> <h4>Result</h4> <p>Send email to nowhere</p> <p>For additional details about the <code>mailto</code> URL scheme, such as including the subject, body, or other predetermined content, see Email links or RFC 6068.</p> <h3>Creating a phone link</h3> <p>Offering phone links is helpful for users viewing web documents and laptops connected to phones.</p> <pre><code>&lt;a&gt;+49 157 0156&lt;/a&gt;</code></pre> <p>For additional details about the <code>tel</code> URL scheme, see RFC 2806 and RFC 2396.</p> <h3>Using the <code>download</code> attribute to save a <code>&lt;canvas&gt;</code> as a PNG</h3> <p>If you want to let users download an HTML <code>&lt;canvas&gt;</code> element as an image, you can create a link with a <code>download</code> attribute and the canvas data as a file URL:</p> <pre><code>var link = document.createElement('a'); link.innerHTML = 'download image';  link.addEventListener('click', function(ev) {     link.href = canvas.toDataURL();     link.download = ""mypainting.png""; }, false);  document.body.appendChild(link);</code></pre> <p>You can see this in action at jsfiddle.net/codepo8/V6ufG/2/.</p> <h2>Notes</h2> <p>HTML 3.2 defines only the <code>name</code>, <code>href</code>, <code>rel</code>, <code>rev</code>, and <code>title</code> attributes.</p> <h3>Accessibility recommendations</h3> <p>Anchor tags are often abused with the <code>onclick</code> event to create psuedo-buttons by setting&nbsp;<strong>href</strong>&nbsp;to <code>""#""</code> or <code>""javascript:void(0)""</code>&nbsp;to  prevent the page from refreshing. These values cause unexpected  behavior when copying/dragging links, opening links in a new  tabs/windows, bookmarking, and when JavaScript is still downloading,  errors out, or is disabled. This also conveys incorrect semantics to  assistive technologies (e.g., screen readers). In these cases, it is  recommended to use&nbsp;a <code>&lt;button&gt;</code> instead. In general you should only use an anchor for&nbsp;navigation using a proper URL.&nbsp;</p> <h3>Clicking and focus</h3> <p>Whether clicking on an <code>&lt;a&gt;</code> causes it to become focused varies by browser and OS.</p> <table> <caption>Does clicking on an <code>&lt;a&gt;</code> give it focus?</caption> <tbody> <tr> <td>Desktop Browsers</td> <th>Windows 8.1</th> <th>OS X 10.9</th> </tr> <tr> <th>Firefox 30.0</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: LawnGreen;"">Yes</td> </tr> <tr> <th>Chrome ≥39<br />     (Chromium bug 388666)</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: LawnGreen;"">Yes</td> </tr> <tr> <th>Safari 7.0.5</th> <td style=""background-color: silver;"">N/A</td> <td style=""background-color: yellow;"">Only when it has a <code>tabindex</code></td> </tr> <tr> <th>Internet Explorer 11</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: silver;"">N/A</td> </tr> <tr> <th>Presto (Opera 12)</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: LawnGreen;"">Yes</td> </tr> </tbody> </table> <table> <caption>Does tapping on an <code>&lt;a&gt;</code> give it focus?</caption> <tbody> <tr> <td>Mobile Browsers</td> <th>iOS 7.1.2</th> <th>Android 4.4.4</th> </tr> <tr> <th>Safari Mobile</th> <td style=""background-color: yellow;"">Only when it has a <code>tabindex</code></td> <td style=""background-color: silver;"">N/A</td> </tr> <tr> <th>Chrome 35</th> <td>???</td> <td style=""background-color: yellow;"">Only when it has a <code>tabindex</code></td> </tr> </tbody> </table> <h2></h2>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a	HTML
HTML element <code>&lt;abbr&gt;</code>	<small>HTML inline text semantics element</small><br /><b>represents an abbreviation</b> and optionally provides a full description for it. If present, the <code>title</code> attribute must contain this full description and nothing else	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <p>Use the <code>title</code>&nbsp;attribute to define the&nbsp;full description of the abbreviation. Many user agents present this as a tooltip.</p> <div> <p><strong>Note: </strong>In languages with grammatical number  (especially languages with more than two&nbsp;numbers, like Arabic), use the  same grammatical number in your&nbsp;<code>title</code>&nbsp;attribute as inside your&nbsp;<code>&lt;abbr&gt;</code> element.</p> </div> <h2>Example</h2> <pre><code>&lt;abbr&gt;I18N&lt;/abbr&gt;</code></pre> <p>See more in-depth examples in the <em>How to mark abbreviations and make them understandable</em> article.</p> <h2>Default styling</h2> <p>The purpose of this element is purely for the convenience of the author and all browsers display it inline (<code>display</code><code>: inline</code>) by default, though its default styling varies from one browser to another:</p> <ul> <li>Some browsers, like Internet Explorer, do not style it differently than a <code>&lt;span&gt;</code> element.</li> <li>Opera, Firefox, and some others add a dotted underline to the content of the element.</li> <li>A few browsers not only add a dotted underline, but also put it in small caps; to avoid this styling, adding something like <code>font-variant</code><code>: none</code> in the CSS takes care of this case.</li></ul>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr	HTML
HTML element <code>&lt;b&gt;</code>	<small>HTML inline text semantics element</small><br />text <b>stylistically different</b> (typically boldface) but <b>without special importance or relevance</b>	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Use the <code>&lt;b&gt;</code> for cases like keywords in a  summary, product names in a review, or other spans of text whose typical  presentation would be boldfaced.</li> <li>Do not confuse the <code>&lt;b&gt;</code> element with the <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, or <code>&lt;mark&gt;</code> elements. The <code>&lt;strong&gt;</code> element represents text of certain <em>importance</em>, <code>&lt;em&gt;</code> puts some emphasis on the text and the <code>&lt;mark&gt;</code> element represents text of certain <em>relevance</em>. The <code>&lt;b&gt;</code> element doesn't convey such special semantic information; use it only when no others fit.</li> <li>Similarly, do not mark titles and headings using the <code>&lt;b&gt;</code> element. For this purpose, use the <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> tags. Further, stylesheets can change the default style of these elements, with the result that they are not <em>necessarily</em> displayed in bold.</li> <li>It is a good practice to use the <strong>class</strong> attribute on the <code>&lt;b&gt;</code> in order to convey additional semantic information (for example <code>&lt;b&gt;</code>  for the first sentence in a paragraph). This eases the development of  several stylings of a web document, without the need to change its HTML  code.</li> <li>Historically, the <code>&lt;b&gt;</code> element was meant to make text boldface. Styling information has been deprecated since HTML4, so the meaning of the <code>&lt;b&gt;</code> element has been changed.</li> <li>If there is no semantic purpose on using the &lt;b&gt; element, using css property font-weight with bold value would be a better choice for making text bold.</li> </ul> <h2>Example</h2> <pre><code>&lt;p&gt;   This article describes several &lt;b&gt;text-level&lt;/b&gt; elements.   It explains their usage in an &lt;b&gt;HTML&lt;/b&gt; document.    &lt;/p&gt; Keywords are displayed with the default style of the &lt;b&gt; element, likely in bold.</code></pre> <h3>Result</h3> <p>This article describes several <strong>text-level</strong> elements. It explains their usage in an <strong>HTML</strong> document.</p> <p>Keywords are displayed with the default style of the &lt;b&gt; element, likely in bold.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b	HTML
HTML element <code>&lt;bdi&gt;</code>	<small>HTML inline text semantics element</small><br />isolates a span of <b>text that might be formatted in a different direction</b> from other text outside it	"<h2>Attributes</h2> <p>Like all other HTML elements, this element has the global attributes, with a slight semantic difference: the <strong>dir</strong> attribute is not inherited. If not set, its default value is the <code>auto</code> which let the browser decide the direction based on the element's content.</p> <h2>Usage notes</h2> <p>Though the same visual effect can be achieved using the CSS rule <code>unicode-bidi</code><code>: isolate</code> on a <code>&lt;span&gt;</code> or another text-formatting element, the semantic meaning is only conveyed by the <code>&lt;bdi&gt;</code>  element. Especially, browsers are allowed to ignore CSS styling. In  such a case, the text would still be correctly displayed using the HTML  element, but will become garbage when using the CSS styling to convey  semantic.</p> <h2>Example</h2> <pre><code>&lt;p dir=""ltr""&gt;This arabic word &lt;bdi&gt;ARABIC_PLACEHOLDER&lt;/bdi&gt; is automatically displayed right-to-left.&lt;/p&gt;</code></pre> <h3>Result</h3> <p dir=""ltr"">This arabic word REDLOHECALP_CIBARA is automatically displayed right-to-left.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi	HTML
HTML element <code>&lt;bdo&gt;</code>	<small>HTML inline text semantics element</small><br />is used to <b>override the current directionality</b> of text. It causes the directionality of the characters to be ignored in favor of the specified directionality	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>dir</code></strong></dt> <dd>Text direction in this element. Possible values are:  <ul> <li><code>ltr</code>: Indicates that the text should go in a left-to-right direction.</li> <li><code>rtl</code>: Indicates that the text should go in a right-to-left direction.</li> </ul> </dd> </dl> <h2>Examples</h2> <pre><code>&lt;!-- Switch text direction --&gt; &lt;p&gt;This text will go left to right.&lt;/p&gt; &lt;p&gt;&lt;bdo dir=""rtl""&gt;This text will go right to left.&lt;/bdo&gt;&lt;/p&gt;</code></pre> <h3>Result</h3> <p>This text will go left to right.</p> <p>.tfel ot thgir og lliw txet sihT</p> <h2>Notes</h2> <p>The HTML 4 specification did not specify events for this element; they were added in XHTML. This is most likely an oversight.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo	HTML
HTML element <code>&lt;br&gt;</code>	<small>HTML inline text semantics element</small><br />produces a <b>line break</b> in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant	<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>clear</code></strong> Deprecated since HTML4.01 Obsolete since HTML5</dt> <dd>Indicates where to begin the next line after the break.  <div> <p><strong>Usage note: </strong>This attribute is obsolete in HTML5 and <strong>should not be used by authors</strong>. Use the CSS <code>clear</code> property instead.</p> </div> </dd> </dl> <h2>Notes</h2> <p>Do not use <code>&lt;br&gt;</code> to increase the gap between lines of text; use the CSS <code>margin</code> property or the <code>&lt;p&gt;</code> element.</p> <h2>Example</h2> <pre><code>Mozilla Foundation&lt;br&gt; 1981 Landings Drive&lt;br&gt; Building K&lt;br&gt; Mountain View, CA 94043-0801&lt;br&gt; USA</code></pre> <p>The HTML above outputs:</p> <p>Mozilla Foundation<br />  1981 Landings Drive<br />  Building K<br />  Mountain View, CA 94043-0801<br />  USA</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br	HTML
HTML element <code>&lt;cite&gt;</code>	<small>HTML inline text semantics element</small><br /><b>reference to a creative work</b>. It must include the title of a work or a URL reference, which may be in an abbreviated form according to the conventions used for the addition of citation metadata	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>A creative work may include a book, a paper, an essay, a poem, a  score, a song, a script, a film, a TV show, a game, a sculpture, a  painting, a theater production, a play, an opera, a musical, an  exhibition, a legal case report, a computer program, a web site, a web  page, a blog post or comment, a forum post or comment, a tweet, a  written or oral statement, etc.</li> <li>The W3C spec states that a reference to a creative work may include  the author's name, while WHATWG has declared that it may not include a  person's name under any circumstances.</li> <li>Use the <code>cite</code> attribute on a <code>&lt;blockquote&gt;</code> or <code>&lt;q&gt;</code> element to reference an online resource for a source.</li> <li>To avoid the default italic style from being used for the &lt;cite&gt; element use the CSS <code>font-style</code> property.</li> </ul> <h2>Example</h2> <pre><code>More information can be found in &lt;cite&gt;[ISO-0000]&lt;/cite&gt;.</code></pre> <p>The HTML above outputs:</p> <p>More information can be found in <cite>[ISO-0000].</cite></p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite	HTML
HTML element <code>&lt;code&gt;</code>	<small>HTML inline text semantics element</small><br /><b>fragment of computer code</b>, usually monospace	"<div> <div> <div style=""width: auto; max-height: none;""> In This Article <ol> <li>Attributes</li><li>Example<ol><li>Result</li></ol></li><li>Note</li><li>Specifications</li><li>Browser compatibility</li><li>See also </li></ol> </div> </div> <div> <article> </article><p>The <strong>HTML <code>&lt;code&gt;</code> element</strong> represents a fragment of computer code. By default, it is displayed in the browser's default monospace font.</p> <table> <tbody> <tr> <th scope=""row"">Content categories</th> <td>Flow content, phrasing content, palpable content.</td> </tr> <tr> <th scope=""row"">Permitted content</th> <td>Phrasing content.</td> </tr> <tr> <th scope=""row"">Tag omission</th> <td>None, both the starting and ending tag are mandatory.</td> </tr> <tr> <th scope=""row"">Permitted parents</th> <td>Any element that accepts phrasing content.</td> </tr> <tr> <th scope=""row"">Permitted ARIA roles</th> <td>Any</td> </tr> <tr> <th scope=""row"">DOM interface</th> <td><code>HTMLElement</code> Up to Gecko 1.9.2 (Firefox 4) inclusive, Firefox implements the <code>HTMLSpanElement</code> interface for this element.</td> </tr> </tbody> </table> <h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <p>Regular text, followed by code.</p> <pre><code>&lt;p&gt;This is how we declare a Javascript variable:&lt;br\&gt; &lt;code&gt;var i = 0;&lt;/code&gt; &lt;/p&gt;</code></pre></div></div> <h3>Result</h3> <p>This is how we declare a Javascript variable:<br /> <code>var i = 0; </code></p> <h2>Note</h2> <p>A CSS rule can be defined for the <code>code</code> selector to override the browser's default font face. Preferences set by the user might take precedence over the specified CSS.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code	HTML
HTML element <code>&lt;data&gt;</code>	<small>HTML inline text semantics element</small><br />links a given content with a <b>machine readable translation</b>. Use&nbsp;<code>&lt;time&gt;</code>&nbsp;if time or date related.	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>value</code></strong></dt> <dd>This attribute specifies the machine-readable translation of the content of the element.</dd> </dl> <h2>Example</h2> <p>The following example displays product names but also associates each name with a product number.</p> <pre><code>&lt;p&gt;New Products&lt;/p&gt; &lt;ul&gt;  &lt;li&gt;&lt;data value=""398""&gt;Mini Ketchup&lt;/data&gt;&lt;/li&gt;  &lt;li&gt;&lt;data value=""399""&gt;Jumbo Ketchup&lt;/data&gt;&lt;/li&gt;  &lt;li&gt;&lt;data value=""400""&gt;Mega Jumbo Ketchup&lt;/data&gt;&lt;/li&gt; &lt;/ul&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data	HTML
HTML element <code>&lt;dfn&gt;</code>	<small>HTML inline text semantics element</small><br /><b>defining instance of a term</b>	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <p>In HTML5, the <code>title</code> attribute has special meaning, as noted above.</p> <h2>Usage notes</h2> <ul> <li>The <code>&lt;dfn&gt;</code> element marks the term being defined; the definition of the term should be given by the surrounding <code>&lt;p&gt;</code>, <code>&lt;section&gt;</code> or definition list group (usually a <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code> pair).</li> <li>The exact value of the term being defined is determined by the following rules:   <ol> <li>If the <code>&lt;dfn&gt;</code> element has a <code>title</code> attribute, then the term is the value of that attribute.</li> <li>Else, if it contains only an <code>&lt;abbr&gt;</code> element with a <code>title</code> attribute, then the term is the value of that attribute.</li> <li>Otherwise, the text content of the <code>&lt;dfn&gt;</code> element is the term being defined.</li> </ol> </li> </ul> <h2>Examples</h2> <p>The following examples are valid in HTML5.</p> <pre><code>&lt;!-- Define ""The Internet"" --&gt; &lt;p&gt;&lt;dfn&gt;The Internet&lt;/dfn&gt; is a global system of interconnected networks that use the Internet Protocol Suite (TCP/IP) to serve billions of users worldwide.&lt;/p&gt;</code></pre> <p>Later in the same document:</p> <pre><code>&lt;dl&gt;   &lt;!-- Define ""World-Wide Web"" and reference        definition for ""the Internet"" --&gt;   &lt;dt&gt;     &lt;dfn&gt;       &lt;abbr&gt;WWW&lt;/abbr&gt;     &lt;/dfn&gt;   &lt;/dt&gt;   &lt;dd&gt;The World-Wide Web (WWW) is a system of   interlinked hypertext documents accessed on   &lt;a&gt;the Internet&lt;/a&gt;.&lt;/dd&gt; &lt;/dl&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn	HTML
HTML element <code>&lt;em&gt;</code>	<small>HTML inline text semantics element</small><br />marks text that has <b>stress emphasis</b>. This element <i>can be nested</i>, with each level of nesting indicating a greater degree of emphasis	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <p>Typically this element is displayed in italic type. However, it  should not be used simply to apply italic styling; use the CSS styling  for that purpose. Use the <code>&lt;cite&gt;</code>  element to mark the title of a work (book, play, song, etc.); it is  also typically styled with italic type, but carries different meaning.  Use the <code>&lt;strong&gt;</code> element to mark text that has greater importance than surrounding text.</p> <h2>Example</h2> <p>The <code>&lt;em&gt;</code> element is often used to indicate an implicit or explicit contrast.</p> <pre><code>&lt;p&gt;   In HTML 5, what was previously called   &lt;em&gt;block-level&lt;/em&gt; content is now called   &lt;em&gt;flow&lt;/em&gt; content. &lt;/p&gt;</code></pre> <h3>Result</h3> <p>In HTML 5, what was previously called <em>block-level</em> content is now called <em>flow</em> content.</p> <h2>&lt;i&gt; vs. &lt;em&gt;</h2> <p>It is often confusing to new developers why there are so many  elements to express emphasis on some text. &lt;i&gt; and &lt;em&gt; are  perhaps one of the most common. Why use <code>&lt;em&gt;&lt;/em&gt;</code> vs <code>&lt;i&gt;&lt;/i&gt;</code>? They produce exactly the same result, right?</p> <p>Not exactly. The visual result is, by default, the same - both tags  render its content in italics. But the semantic meaning is different.  The <code>&lt;em&gt;</code> tag represents stress emphasis of its  contents, while the &lt;i&gt; tag represents text that is set off from  the normal prose, such as the name of a movie or book, a foreign word,  or when the text refers to the definition of a word instead of  representing its semantic meaning.</p> <p>An example for <code>&lt;em&gt;</code> could be: ""Just <em>do</em> it already!"", or: ""We <em>had</em> to do something about it"". A person or software reading the text would pronounce the words in italics with an emphasis.</p> <p>An example for <code>&lt;i&gt;</code> could be: ""The <em>Queen Mary</em>  sailed last night"". Here, there is no added emphasis or importance on  the word ""Queen Mary"". It is merely indicated that the object in  question is not a queen named Mary, but a ship named <em>Queen Mary</em> . Another example for <code>&lt;i&gt;</code> could be: ""The word <em>the</em> is an article"".</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em	HTML
HTML element <code>&lt;i&gt;</code>	<small>HTML inline text semantics element</small><br /><b>text that is set off</b> from the normal text for some reason, typically displayed in italic type<div>for example, technical terms, foreign language phrases, or fictional character thoughts</div>	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <pre><code>&lt;p&gt;The Latin phrase &lt;i&gt;Veni, vidi, vici&lt;/i&gt; is often mentioned in music, art, and literature&lt;/p&gt;</code></pre> <h3>Result</h3> <p>The Latin phrase <em>Veni, vidi, vici</em> is often mentioned in music, art, and literature</p> <h2>Notes</h2> <p>In earlier versions of the HTML specification, the <code>&lt;i&gt;</code> tag was merely a presentational element used to display text in italics, much like the <code>&lt;b&gt;</code>  tag was used to display text in bold letters. This is no longer true,  as these tags now define semantics rather than typographic appearance.  The <code>&lt;i&gt;</code> tag should represent a range of text with a  different semantic meaning whose typical typographic representation is  italicized. &nbsp;This means a browser will typically still display its  contents in italic type, but is, by definition, no longer required to.</p> <p>Use this element only when there is not a more appropriate semantic element. For example:</p> <ul> <li>Use <code>&lt;em&gt;</code> to indicate emphasis or stress.</li> <li>Use <code>&lt;strong&gt;</code> to indicate importance.</li> <li>Use <code>&lt;mark&gt;</code> to indicate relevance.</li> <li>Use <code>&lt;cite&gt;</code> to mark the name of a work, such as a book, play, or song.</li> <li>Use <code>&lt;dfn&gt;</code> to mark the defining instance of a term.</li> </ul> <p>It is a good idea to use the <strong>class</strong> attribute to  identify why the element is being used, so that if the presentation  needs to change at a later date, it can be done selectively with style  sheets.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i	HTML
HTML element <code>&lt;kbd&gt;</code>	<small>HTML inline text semantics element</small><br />represents <b>user input</b> and produces an inline element displayed in the browser's default monospace font	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Examples</h2> <pre><code>&lt;p&gt;Type the following in the Run dialog:   &lt;kbd&gt;cmd&lt;/kbd&gt;&lt;br /&gt;Then click the OK button.&lt;/p&gt;  &lt;p&gt;Save the document by pressing   &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt;&lt;/p&gt;</code></pre> <h3>Result</h3> <p><iframe src=""https://mdn.mozillademos.org/en-US/docs/Web/HTML/Element/kbd$samples/Examples?revision=1163638"" width=""350"" height=""120"" frameborder=""0""></iframe></p><div></div><p></p><h2>Note</h2> <p>A CSS rule can be defined for the <code>kbd</code> selector to override the browser's default font face. Preferences set by the user might take precedence over the specified CSS.</p> <p>When the <code>&lt;kbd&gt;</code> element is nested inside a <code>&lt;samp&gt;</code> element, it represents the input as it was echoed by the system.</p> <p>When the <code>&lt;kbd&gt;</code> element <em>contains</em> a <code>&lt;samp&gt;</code> element, it represents input based on system output, for example invoking a menu item.</p> <p>When the <code>&lt;kbd&gt;</code> element is nested inside another <code>&lt;kbd&gt;</code> element, it represents an actual key or other single unit of input as appropriate for the input mechanism.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd	HTML
HTML element <code>&lt;mark&gt;</code>	<small>HTML inline text semantics element</small><br />text <b>highlighted&nbsp;due to its relevance</b> in a particular context<div><i>i.e.</i>, a run of text marked for reference purpose</div>	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>In a quotation or another block, the highlighted text typically  marks text that is referenced outside the quote, or marked for specific  scrutiny even though the original author didn't consider it important.</li> <li>In the main text, the highlighted text typically marks text that  may be of special relevance for the user's current activity, like search  results.</li> <li>Do not use the <code>&lt;mark&gt;</code> element for syntax highlighting; use the <code>&lt;span&gt;</code> element for this purpose.</li> <li>Do not confuse the <code>&lt;mark&gt;</code> element with the <code>&lt;strong&gt;</code> element. The <code>&lt;strong&gt;</code> element is used to denote spans of text of <em>importance </em>in context of the text, when the <code>&lt;mark&gt;</code> element is used to denote spans of text of <em>relevance</em> to a different context.</li> </ul> <h2>Examples</h2> <pre><code>&lt;p&gt;The &amp;lt;mark&amp;gt; element is used to   &lt;mark&gt;highlight&lt;/mark&gt; text&lt;/p&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark	HTML
HTML element <code>&lt;q&gt;</code>	<small>HTML inline text semantics element</small><br /><b>short inline quotation</b>. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the <code>&lt;blockquote&gt;</code> element	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>cite</code></strong></dt> <dd>The value of this attribute is a URL that designates a source  document or message for the information quoted. This attribute is  intended to point to information explaining the context or the reference  for the quote.</dd> </dl> <h2>Example</h2> <h3>HTML Content</h3> <pre><code>&lt;p&gt;According to Mozilla's website,   &lt;q   cite=""https://www.mozilla.org/en-US/about/history/details/""&gt;Firefox 1.0   was released in 2004 and became a big success.&lt;/q&gt;&lt;/p&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q	HTML
HTML element <code>&lt;rp&gt;</code>	"<small>HTML inline text semantics element</small><br />is used to provide <b>fall-back parentheses</b> for browsers that do not support display of ruby annotations using the <code>&lt;ruby&gt;</code> element<div><br /></div><div>Alternative to this element:</div><div><pre class=""style"">rt:before { content: ""("" } rt:after { content: "")"" }</pre></div>"	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>Ruby annotations are for showing pronunciation of East Asian  characters, like using Japanese furigana or Taiwanese bopomofo  characters. The <code>&lt;rp&gt;</code> element is used in the case of lack of <code>&lt;ruby&gt;</code> element support; the <code>&lt;rp&gt;</code> content provides what should be displayed in order to indicate the presence of a ruby annotation, usually parentheses.</li> </ul> <h2>Example</h2> <pre><code>&lt;ruby&gt;   漢 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Kan&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;   字 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ji&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; &lt;/ruby&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp	HTML
HTML element <code>&lt;rt&gt;</code>	<small>HTML inline text semantics element</small><br />embraces <b>pronunciation</b> of characters presented in a ruby annotations, which are used to describe the pronunciation of East Asian characters. This element is always used inside a <code>&lt;ruby&gt;</code> element	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <pre><code>&lt;ruby&gt;   漢 &lt;rt&gt;Kan&lt;/rt&gt;   字 &lt;rt&gt;ji&lt;/rt&gt; &lt;/ruby&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt	HTML
HTML element <code>&lt;rtc&gt;</code>	<small>HTML inline text semantics element</small><br />embraces <b>semantic annotations</b> of characters presented in a ruby of <code>&lt;rb&gt;</code> elements used inside of <code>&lt;ruby&gt;</code> element. <code>&lt;rb&gt;</code> elements can have both pronunciation&nbsp;and semantic&nbsp;annotations	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <pre><code>&lt;ruby&gt;    &lt;rb&gt;旧&lt;/rb&gt;    &lt;rb&gt;金&lt;/rb&gt;    &lt;rb&gt;山&lt;/rb&gt;    &lt;rt&gt;jiù&lt;/rt&gt;    &lt;rt&gt;jīn&lt;/rt&gt;    &lt;rt&gt;shān&lt;/rt&gt;    &lt;rtc&gt;San Francisco&lt;/rtc&gt; &lt;/ruby&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc	HTML
HTML element <code>&lt;ruby&gt;</code>	"<p><small>HTML inline text semantics element</small><br /> <strong>ruby annotation</strong>, for showing pronunciation of East Asian characters</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">ruby</span> <span style=""color: #bbbbbb"">xml:lang</span><span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">""ja""</span><span style=""color: #d0d0d0"">&gt;</span>   <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rbc</span><span style=""color: #d0d0d0"">&gt;</span>     <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rb</span><span style=""color: #d0d0d0"">&gt;</span>斎<span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rb</span><span style=""color: #d0d0d0"">&gt;</span>     <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rb</span><span style=""color: #d0d0d0"">&gt;</span>藤<span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rb</span><span style=""color: #d0d0d0"">&gt;</span>   <span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rbc</span><span style=""color: #d0d0d0"">&gt;</span>   <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rtc</span> <span style=""color: #bbbbbb"">class</span><span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">""reading""</span><span style=""color: #d0d0d0"">&gt;</span>     <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rt</span><span style=""color: #d0d0d0"">&gt;</span>さい<span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rt</span><span style=""color: #d0d0d0"">&gt;</span>     <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rt</span><span style=""color: #d0d0d0"">&gt;</span>とう<span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rt</span><span style=""color: #d0d0d0"">&gt;</span>   <span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rtc</span><span style=""color: #d0d0d0"">&gt;</span>   <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rtc</span> <span style=""color: #bbbbbb"">class</span><span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">""annotation""</span><span style=""color: #d0d0d0"">&gt;</span>     <span style=""color: #d0d0d0"">&lt;</span><span style=""color: #6ab825; font-weight: bold"">rt</span> <span style=""color: #bbbbbb"">rbspan</span><span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">""2""</span> <span style=""color: #bbbbbb"">xml:lang</span><span style=""color: #d0d0d0"">=</span><span style=""color: #ed9d13"">""en""</span><span style=""color: #d0d0d0"">&gt;</span>W3C Associate Chairman<span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rt</span><span style=""color: #d0d0d0"">&gt;</span>   <span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">rtc</span><span style=""color: #d0d0d0"">&gt;</span> <span style=""color: #d0d0d0"">&lt;/</span><span style=""color: #6ab825; font-weight: bold"">ruby</span><span style=""color: #d0d0d0"">&gt;</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY5OTI3OTcsICJpZCI6ICIxNDk2MjAxMjQ3OTE4LTAwMSIsICJtZCI6ICJIVE1MIGlubGluZSB0ZXh0IHNlbWFudGljcyBlbGVtZW50ICBcbioqcnVieSBhbm5vdGF0aW9uKiouIFJ1YnkgYW5ub3RhdGlvbnMgYXJlIGZvciBzaG93aW5nIHByb251bmNpYXRpb24gb2YgRWFzdCBBc2lhbiBjaGFyYWN0ZXJzXG4gIFxuICAgIDo6Omh0bWxcbiAgICAmbHQ7cnVieSB4bWw6bGFuZz0mcXVvdDtqYSZxdW90OyZndDtcbiAgICAgICZsdDtyYmMmZ3Q7XG4gICAgICAgICZsdDtyYiZndDtcdTY1OGUmbHQ7L3JiJmd0O1xuICAgICAgICAmbHQ7cmImZ3Q7XHU4NWU0Jmx0Oy9yYiZndDtcbiAgICAgICZsdDsvcmJjJmd0O1xuICAgICAgJmx0O3J0YyBjbGFzcz0mcXVvdDtyZWFkaW5nJnF1b3Q7Jmd0O1xuICAgICAgICAmbHQ7cnQmZ3Q7XHUzMDU1XHUzMDQ0Jmx0Oy9ydCZndDtcbiAgICAgICAgJmx0O3J0Jmd0O1x1MzA2OFx1MzA0NiZsdDsvcnQmZ3Q7XG4gICAgICAmbHQ7L3J0YyZndDtcbiAgICAgICZsdDtydGMgY2xhc3M9JnF1b3Q7YW5ub3RhdGlvbiZxdW90OyZndDtcbiAgICAgICAgJmx0O3J0IHJic3Bhbj0mcXVvdDsyJnF1b3Q7IHhtbDpsYW5nPSZxdW90O2VuJnF1b3Q7Jmd0O1czQyBBc3NvY2lhdGUgQ2hhaXJtYW4mbHQ7L3J0Jmd0O1xuICAgICAgJmx0Oy9ydGMmZ3Q7XG4gICAgJmx0Oy9ydWJ5Jmd0O1xuIn0=---->"	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Examples</h2> <h3>Example 1: Character</h3> <pre><code>&lt;ruby&gt;   漢 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Kan&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;   字 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ji&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; &lt;/ruby&gt;</code></pre> <h3>Example 2: Word</h3> <pre><code>&lt;ruby&gt;   明日 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Ashita&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; &lt;/ruby&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby	HTML
HTML element <code>&lt;s&gt;</code>	<small>HTML inline text semantics element</small><br />renders text with a strikethrough, or a line through it. Use this&nbsp;element to represent things that are<b> no longer relevant</b> or no longer accurate. However, this element is not appropriate when indicating document edits; for that, use the <code>&lt;del&gt;</code> and <code>&lt;ins&gt;</code> elements, as appropriate	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <div><strong>Implementation note: </strong>Up to Gecko 1.9.2 inclusive, Firefox implements the <code>HTMLSpanElement</code> interface for this element.</div> <h2>Example</h2> <pre><code>&lt;s&gt;Today's Special: Salmon&lt;/s&gt; SOLD OUT&lt;br&gt; &lt;span style=""text-decoration:line-through;""&gt;Today's Special:   Salmon&lt;/span&gt; SOLD OUT</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s	HTML
HTML element <code>&lt;samp&gt;</code>	<small>HTML inline text semantics element</small><br /><b>sample output</b> from a computer program, usually monospace	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <p>Regular text, followed by sample output, and then regular text again.</p> <pre><code>&lt;p&gt;The diet-tracking app said: &lt;samp&gt;You're not eating your veggies&lt;/samp&gt; and that was true&lt;/p&gt;</code></pre> <h3>Result</h3> <p>The diet-tracking app said: <samp>You're not eating your veggies.</samp> and that was true.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp	HTML
HTML element <code>&lt;small&gt;</code>	<small>HTML inline text semantics element</small><br /><b>side-comments and small print</b>&nbsp;(since HTML5), including copyright and legal text, independent of its styled presentation	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <div> <p><strong>Implementation note: </strong>up to Gecko 1.9.2 inclusive, Firefox implements the <code>HTMLSpanElement</code> interface for this element.</p> </div> <h2>Examples</h2> <h3>Example 1</h3> <pre><code>&lt;p&gt;This is the first sentence. &lt;small&gt;This whole sentence   is in small letters.&lt;/small&gt;&lt;/p&gt;</code></pre> <h4>Result</h4> <p>This is the first sentence. <small>This whole sentence is in small letters.</small></p> <h3>Example 2 (CSS alternative)</h3> <pre><code>&lt;p&gt;This is the first sentence.   &lt;span style=""font-size:0.8em""&gt;This whole sentence is in small   letters.&lt;/span&gt;&lt;/p&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small	HTML
HTML element <code>&lt;span&gt;</code>	<small>HTML inline text semantics element</small><br />is a <b>generic inline container</b> for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the <code>class</code> or <code>id</code> attributes), or because they share attribute values, such as <code>lang</code>	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example 2</h2> <pre><code>&lt;li&gt;&lt;span&gt;     &lt;a target=""_blank""&gt;See my portfolio&lt;/a&gt;&nbsp; </code></pre><h2>&lt;/span&gt;&lt;/li&gt;</h2><h2>Example 1</h2> <pre><code>&lt;p&gt;&lt;span&gt;Some text&lt;/span&gt;&lt;/p&gt;</code></pre><pre><code><br /></code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span	HTML
HTML element <code>&lt;strong&gt;</code>	<small>HTML inline text semantics element</small><br />gives text <b>strong importance</b>, and is typically displayed in bold	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <pre><code>&lt;p&gt;When doing x it is &lt;strong&gt;imperative&lt;/strong&gt;    to do y before proceeding.&lt;/p&gt;</code></pre> <h3>Result</h3> <p>When doing x it is <strong>imperative</strong> to do y before proceeding.</p> <h3>Bold vs. Strong</h3> <p>It is often confusing to new developers why there are so many ways to  express the same thing on a rendered website. Bold and Strong are  perhaps one of the most common. Why use &lt;strong&gt;&lt;/strong&gt; vs  &lt;b&gt;&lt;/b&gt;? You have to type a whole lot more with strong and  it produces the exact same result, right?</p> <p>Perhaps not; strong is a logical state, and bold is a physical state.  Logical states separate presentation from the content, and by doing so  allow for it to be expressed in many different ways. Perhaps instead of  rendering some text as bold you want to render it red, or a different  size, or underlined, or whatever. It makes more sense to change the  presentational properties of strong than it does bold. This is because  bold is a physical state; there is no separation of presentation and  content, and making bold do anything other than bold text would be  confusing and illogical.</p> <p>It is important to note that &lt;b&gt;&lt;/b&gt; does have other  uses, when one wants to draw attention without increasing importance.</p> <h3>Emphasis vs. Strong</h3> <p>While in HTML4, Strong simply indicated a stronger emphasis, in  HTML5, the element is described as representing ""strong importance for  its contents."" This is an important distinction to make. While Emphasis  is used to change the meaning of a sentence (""I <em>love</em> carrots"" vs. ""I love <em>carrots</em>""), Strong is used to give portions of a sentence added importance (e.g., ""<strong>Warning!</strong> This is <strong>very dangerous.</strong>"") Both Strong and Emphasis can be nested to increase the relative degree of importance or stress emphasis, respectively.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong	HTML
HTML element <code>&lt;sub&gt;</code>	<small>HTML inline text semantics element</small><br />text that should be <b>displayed, for typographic reasons, lower, and often smaller</b>, than the main span of text	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>This element should be used for typographical reasons only, i.e.  changing the position of the text changing its meaning like in  mathematical (like <var>t<sub>2</sub></var>, though the use of a MathML formula should be considered) or chemical formulas (like <code>H<sub>2</sub>O</code>).</li> <li>This element must not be used for styling purpose like the styling of the product name Latex. In that case CSS style should be used: the <code>vertical-align</code> property with the <code>sub</code> value will achieve the same effect.</li> </ul> <h2>Examples</h2> <pre><code>&lt;p&gt;The chemical formula of water: H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;</code></pre> <h4>Result</h4> <p>The chemical formula of water: H<sub>2</sub>O</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub	HTML
HTML element <code>&lt;sup&gt;</code>	<small>HTML inline text semantics element</small><br />text that should be <b>displayed, for typographic reasons, higher</b>, and often smaller, than the main span of text	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <ul> <li>This element should be used for typographical reasons only, i.e.  changing the position of the text changing its meaning like in  mathematical (like <var>f<sup>4</sup></var>, though the use of a MathML formula should be considered) or in French abbreviations (like M<sup>lle</sup>, M<sup>me</sup> or C<sup>ie</sup>).</li> <li>This element must not be used for styling purpose like the styling of the product name Latex. In that case CSS style should be used: the <code>vertical-align</code> property with the <code>super</code> value will achieve the same effect.</li> </ul> <h2>Examples</h2> <pre><code>&lt;p&gt;This text is &lt;sup&gt;superscripted&lt;/sup&gt;&lt;/p&gt;</code></pre> <h4>Result</h4> <p>This text is <sup>superscripted</sup></p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup	HTML
HTML element <code>&lt;time&gt;</code>	<small>HTML inline text semantics element</small><br />represents either a <b>time</b> on a 24-hour clock or a precise date in the Gregorian calendar (with optional time and timezone information)	"<h2>Attributes</h2> <p>Like all other HTML&nbsp;elements, this element supports the global attributes.</p> <dl> <dt><strong><code>datetime</code></strong></dt> <dd>This attribute indicates the time and date of the element and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp.</dd> </dl> <h2>Usage notes</h2> <p>This element is intended to be used presenting dates and times in a  machine readable format. This can be helpful for user agents to offer  any event scheduling for user's calendar.&nbsp;</p> <p>This element is not appropriate for instances where a specific date  cannot be calculated, nor should it be used for dates prior to the  introduction to the Gregorian calendar (due to complications with  calculating those dates).</p> <h2>Examples</h2> <h3>Simple example</h3> <h4>HTML</h4> <pre><code>&lt;p&gt;The concert starts at &lt;time&gt;20:00&lt;/time&gt;.&lt;/p&gt;</code></pre> <h4><code>datetime</code> example</h4> <h4>HTML</h4> <pre><code>&lt;p&gt;The concert took place on &lt;time   datetime=""2001-05-15T19:00""&gt;May 15&lt;/time&gt;.&lt;/p&gt;</code></pre> <h4></h4>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time	HTML
HTML element <code>&lt;u&gt;</code>	<small>HTML inline text semantics element</small><br /><b>unarticulated, though explicitly rendered, non-textual annotation</b>, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelled<div>Before HTML5: renders text with an underline, a line under the baseline of its content.&nbsp;</div>	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <p>As with all pure styling elements, <code>&lt;u&gt;</code>  was deprecated in HTML 4 and XHTML 1, but was then re-introduced in  HTML5 with other semantics. If you want to underline text in a  non-semantic manner, you should use a <code>&lt;span&gt;</code> element, or another semantically appropriate element, and style it with the CSS <code>text-decoration</code> property, with the <code>underline</code> value.</p> <p><strong>Tip:</strong>&nbsp;Avoid using the <code>&lt;u&gt;</code> element where it could be confused for a hyperlink.</p> <div> <p><strong>Note:</strong>&nbsp;The HTML 5 specification reminds developers that other elements are almost always more appropriate than <code>&lt;u&gt;</code>.</p> </div> <h2>Example</h2> <div> <p>The following are examples of how elements other than <code>&lt;u&gt;</code> should be used instead.</p> </div> <pre><code>&lt;u&gt;Today's Special&lt;/u&gt;: Salmon&lt;br /&gt; &lt;span style=""text-decoration:underline;""&gt;Today's Special&lt;/span&gt;:   Salmon &lt;!-- Here &lt;span&gt; is used as the underlining is purely decorative   and it is applied with CSS --&gt;</code></pre> <p><u>Today's Special</u>: Salmon</p> <p><u>Today's Special</u>: Salmon</p> <pre><code>&lt;p&gt;&lt;u&gt;All&lt;/u&gt; of that is explained in   &lt;u&gt;Dive into Python&lt;/u&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;All&lt;/em&gt; of that is explained in   &lt;i&gt;Dive into Python&lt;/i&gt;&lt;/p&gt; &lt;!-- Here the ""All"" is marked as stressed, using &lt;em&gt;,   while ""Dive into Python"" is marked as a name using &lt;i&gt; --&gt;</code></pre> <p><u>All</u> of that is explained in <u>Dive into Python</u>.</p> <p><em>All</em> of that is explained in<em> Dive into Python</em>.</p> <p>Due to the default styling of <code>&lt;em&gt;</code> and <code>&lt;i&gt;</code> they have been displayed in italics, however CSS can be used to style those elements with a normal font style and underline.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u	HTML
HTML element <code>&lt;var&gt;</code>	<small>HTML inline text semantics element</small><br />represents a <b>variable</b> in a mathematical expression or a programming context	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Typical default style properties</h2> <pre><code>var {   font-style: italic;  }</code></pre> <h2>Example</h2> <pre><code>&lt;p&gt; A simple equation:   &lt;var&gt;x&lt;/var&gt; = &lt;var&gt;y&lt;/var&gt; + 2 &lt;/p&gt;</code></pre> <p>A simple equation: <var>x</var> = <var>y</var> + 2</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var	HTML
HTML element <code>&lt;wbr&gt;</code>	<small>HTML inline text semantics element</small><br /><b>word break opportunity</b>—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Notes</h2> <p>On UTF-8 encoded pages, <code>&lt;wbr&gt;</code> behaves like the <code>U+200B</code><code> ZERO-WIDTH SPACE</code> code point. In particular, it behaves like a Unicode bidi BN code point, meaning it has no effect on bidi-ordering: <code>&lt;div dir=rtl&gt;123,&lt;wbr&gt;456&lt;/div&gt;</code> displays, when not broken on two lines, <code>123,456</code> and not <code>456,123</code>.</p> <p>For the same reason, the <code>&lt;﻿wbr﻿&gt;</code> element does not  introduce a hyphen at the line break point. To make a hyphen appear only  at the end of a line, use the soft hyphen character entity (<code>&amp;﻿shy;</code>) instead.</p> <p>This element was first implemented in Internet Explorer 5.5 and was officially defined in HTML5.</p> <h2>Example</h2> <p><em>The Yahoo Style Guide </em>recommends breaking a URL <em>before</em> punctuation, to avoid leaving a punctuation mark at the end of the line, which the reader might mistake for the end of the URL.</p> <pre><code>&lt;p&gt;http://this&lt;wbr&gt;.is&lt;wbr&gt;.a&lt;wbr&gt;.really&lt;wbr&gt;.long&lt;wbr&gt;.example&lt;wbr&gt;.com/With&lt;wbr&gt;/deeper&lt;wbr&gt;/level&lt;wbr&gt;/pages&lt;wbr&gt;/deeper&lt;wbr&gt;/level&lt;wbr&gt;/pages&lt;wbr&gt;/deeper&lt;wbr&gt;/level&lt;wbr&gt;/pages&lt;wbr&gt;/deeper&lt;wbr&gt;/level&lt;wbr&gt;/pages&lt;wbr&gt;/deeper&lt;wbr&gt;/level&lt;wbr&gt;/pages&lt;/p&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr	HTML
HTML element <code>&lt;area&gt;</code>	<small>HTML media element</small><br />defines a <b>hot-spot region</b> on an image, and optionally associates it with a hypertext link. This element is used only within a <code>&lt;map&gt;</code> element	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>accesskey</code></strong> HTML 4 only, Obsolete since Gecko 5.0</dt> <dd>Specifies a keyboard navigation accelerator for the element.  Pressing ALT or a similar key in association with the specified  character selects the form control correlated with that key sequence.  Page designers are forewarned to avoid key sequences already bound to  browsers. This attribute is global since HTML5.</dd> </dl> <dl> <dt><strong><code>alt</code></strong></dt> <dd>A text string alternative to display on browsers that do not  display images. The text should be phrased so that it presents the user  with the same kind of choice as the image would offer when displayed  without the alternative text. In HTML4, this attribute is required, but  may be the empty string (""""). In HTML5, this attribute is required only  if the <strong>href</strong> attribute is used.</dd> </dl> <dl> <dt><strong><code>coords</code></strong></dt> <dd>A set of values specifying the coordinates of the hot-spot region.  The number and meaning of the values depend upon the value specified for  the <strong>shape</strong> attribute. For a <code>rect</code> or rectangle shape, the <strong>coords</strong> value is two x,y pairs: left, top, right, and bottom. For a <code>circle</code> shape, the value is <code>x,y,r</code> where <code>x,y</code> is a pair specifying the center of the circle and <code>r</code> is a value for the radius. For a <code>poly</code> or polygon&nbsp;shape, the value is a set of x,y pairs for each point in the polygon: <code>x1,y1,x2,y2,x3,y3,</code>  and so on. In HTML4, the values are numbers of pixels or percentages,  if a percent sign (%) is appended; in HTML5, the values are numbers of  CSS&nbsp;pixels.</dd> <dt><strong><code>download</code></strong> HTML5</dt> <dd>This attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource. See <code>&lt;a&gt;</code> for a full description of the <code>download</code> attribute.</dd> </dl> <dl> <dt><strong><code>href</code></strong></dt> <dd>The hyperlink target for the area. Its value is a valid URL. In HTML4, either this attribute or the <strong>nohref</strong>  attribute must be present in the element. In HTML5, this attribute may  be omitted; if so, the area element does not represent a hyperlink.</dd> </dl> <dl> <dt><strong><code>hreflang</code></strong> HTML5</dt> <dd>Indicates the language of the linked resource. Allowed values are determined by BCP47. Use this attribute only if the <strong>href</strong> attribute is present.</dd> </dl> <dl> <dt><strong><code>name</code></strong> HTML 4 only, Obsolete since Gecko 5.0</dt> <dd>Define a names for the clickable area so that it can be scripted by older browsers.</dd> </dl> <dl> <dt><strong><code>media</code></strong> HTML5</dt> <dd>A hint of the media for which the linked resource was designed, for example <code>print and screen</code>. If omitted, it defaults to <code>all</code>. Use this attribute only if the <strong>href</strong> attribute is present.</dd> </dl> <dl> <dt><strong><code>nohref</code></strong> HTML 4 only, Obsolete since Gecko 5.0</dt> <dd>Indicates that no hyperlink exists for the associated area. Either this attribute or the <strong>href</strong> attribute must be present in the element.  <div> <p><strong>Usage note: </strong>This attribute is obsolete in HTML5, instead omitting the <strong>href</strong> attribute is sufficient.</p> </div> </dd> </dl> <dl> <dt><strong><code>referrerpolicy</code></strong> <i> </i></dt> <dd>A string indicating which referrer to use when fetching the resource:  <ul> <li><code>""no-referrer""</code> meaning that the <code>Referer:</code>&nbsp;header will not be sent.</li> <li>""<code>no-referrer-when-downgrade</code>"" meaning that no <code>Referer:</code>  header will be sent when navigating to an origin without TLS  (HTTPS).&nbsp;This is a user agent’s default behavior, if no policy is  otherwise specified.</li> <li><code>""origin""</code> meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port.</li> <li>""origin-when-cross-origin"" meaning that navigations to other  origins will be limited to the scheme, the host and the port, while  navigations on the same origin will include the referrer's path.&nbsp;</li> <li><code>""unsafe-url""</code> meaning that the referrer will include  the origin and the path (but not the fragment, password, or username).  This case is unsafe because it can leak origins and paths from  TLS-protected resources to insecure origins.</li> </ul> </dd> <dt><strong><code>rel</code></strong> HTML5</dt> <dd>For anchors containing the <strong>href</strong> attribute, this  attribute specifies the relationship of the target object to the link  object. The value is a comma-separated list of link types values.  The values and their semantics will be registered by some authority  that might have meaning to the document author. The default  relationship, if no other is given, is void. Use this attribute only if  the <strong>href</strong> attribute is present.</dd> <dt><strong><code>shape</code></strong></dt> <dd>The shape of the associated hot spot. The specifications for HTML 5 and HTML 4 define the values <code>rect</code>, which defines a rectangular region; <code>circle</code>, which defines a circular region; <code>poly</code>, which defines a polygon; and <code>default</code>, which indicates the entire region beyond any defined shapes. Many browsers, notably Internet Explorer 4 and higher, support <code>circ</code>, <code>polygon</code>, and <code>rectangle</code> as valid values for <strong>shape</strong>; these values are <i> </i>.</dd> <dt><strong><code>tabindex</code></strong> HTML 4 only, Obsolete since Gecko 5.0</dt> <dd>A numeric value specifying the position of the defined area in the browser tabbing order. This attribute is global in HTML5.</dd> </dl> <dl> <dt><strong><code>target</code></strong></dt> <dd>This attribute specifies where to display the linked resource. In  HTML4, this is the name of, or a keyword for, a frame. In HTML5, it is a  name of, or keyword for, a <em>browsing context</em> (for example, tab, window, or inline frame). The following keywords have special meanings:  <ul> <li><code>_self</code>: Load the response into the same HTML4 frame  (or HTML5 browsing context) as the current one. This value is the  default if the attribute is not specified.</li> <li><code>_blank</code>: Load the response into a new unnamed HTML4 window or HTML5 browsing context.</li> <li><code>_parent</code>: Load the response into the HTML4 frameset  parent of the current frame or HTML5 parent browsing context of the  current one. If there is no parent, this option behaves the same way as <code>_self</code>.</li> <li><code>_top</code>: In HTML4: Load the response into the full,  original window, canceling all other frames. In HTML5: Load the response  into the top-level browsing context (that is, the browsing context that  is an ancestor of the current one, and has no parent). If there is no  parent, this option behaves the same way as <code>_self</code>.</li> </ul>  Use this attribute only if the <strong>href</strong> attribute is present.</dd> <dt><strong><code>type</code></strong>&nbsp;Obsolete since Gecko 5.1</dt> <dd>This attribute specifies the media type in the form of a MIME type  for the link target. Generally, this is provided strictly as advisory  information; however, in the future a browser might add a small icon for  multimedia types. For example, a browser might add a small speaker icon  when type is set to audio/wav. For a complete list of recognized MIME  types, see https://www.w3.org/TR/html4/references.html#ref-MIMETYPES. Use this attribute only if the <strong>href</strong> attribute is present.</dd> </dl> <h2>Example</h2> <pre><code>&lt;map name=""primary""&gt;   &lt;area shape=""circle"" coords=""75,75,75"" alt=""Click to go Left""&gt;   &lt;area shape=""circle"" coords=""275,75,75"" alt=""Click to go Right""&gt; &lt;/map&gt; &lt;img usemap=""#primary"" src=""http://placehold.it/350x150"" alt=""350 x 150 pic""&gt;</code></pre><div></div><p></p><h2>Notes</h2> <p>Under the HTML 3.2, 4.0, and 5 specifications, the closing tag <code>&lt;/area&gt;</code> is forbidden.</p> <p>The XHTML 1.0 specification requires a trailing slash: <code>&lt;area /&gt;</code>.</p> <p>The <strong>id</strong>, <strong>class</strong>, and <strong>style</strong>  attributes have the same meaning as the core attributes defined in the  HTML 4 specification, but only Netscape and Microsoft define them.</p> <p>Netscape 1–level browsers do not understand the <strong>target</strong> attribute as it relates to frames.</p> <p>HTML 3.2 defines only <strong>alt</strong>, <strong>coords</strong>, <strong>href</strong>, <strong>nohref</strong>, and <strong>shape</strong>.</p> <p>HTML 5.1 defines obsolete the attribute <strong>type</strong> on this tag.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area	HTML
HTML element <code>&lt;audio&gt;</code>	<small>HTML media element</small><br />is used to <b>embed sound content</b> in documents. It may contain one or more audio sources, represented using the <code>src</code> attribute or the <code>&lt;source&gt;</code> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a <code>MediaStream</code>	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>autoplay</code></strong></dt> <dd>A Boolean attribute:&nbsp;if specified (even if the value is <code>""false""</code>!),  the audio will automatically begin playback as soon as it can do so,  without waiting for the entire audio file to finish downloading.  <div>Sites which automatically play audio (or videos with  an audio track) can be an unpleasant experience for users, so it should  be avoided when possible. If you must offer autoplay functionality, you  should make it opt-in (requiring a user to specifically enable it).  However, this can be useful when creating media elements whose source  will be set at a later time, under user control.</div> </dd> <dt><strong><code>autobuffer</code></strong> Obsolete since Gecko 2.0</dt> <dd>A Boolean attribute:&nbsp;if specified, the audio will automatically  begin being downloaded, even if not set to autoplay. This continues  until the media cache is full, or the entire audio file has been  downloaded, whichever comes first. This should only be used when it is  expected that the user will choose to play the audio; for example, if  the user has navigated to a page using a ""Play this audio"" link. This  attribute was removed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 /  SeaMonkey 2.1) in favor of the <code>preload</code> attribute.</dd> <dt><strong><code>buffered</code></strong></dt> <dd>An attribute you can read to determine which time ranges of the media have been buffered. This attribute contains a <code>TimeRanges</code> object.</dd> <dt><strong><code>controls</code></strong></dt> <dd>If this attribute is present, the browser will offer controls to  allow the user to control audio playback, including volume, seeking, and  pause/resume playback.</dd> <dt><strong><code>loop</code></strong></dt> <dd>A Boolean attribute:&nbsp;if specified, will&nbsp;automatically seek back to the start&nbsp;upon reaching the end of the audio.</dd> <dt><strong><code>mozCurrentSampleOffset</code></strong> <i> </i></dt> <dd>The offset, specified as the number of samples since the beginning of the audio stream, at which the audio is currently playing.</dd> <dt><strong><code>muted</code></strong></dt> <dd>A Boolean attribute which indicates whether the audio will be initially silenced. Its default value is false.</dd> <dt><strong><code>played</code></strong></dt> <dd>A <code>TimeRanges</code> object indicating all the ranges of the audio that have been played.</dd> <dt><strong><code>preload</code></strong></dt> <dd>This enumerated attribute is intended to provide a hint to the  browser about what the author thinks will lead to the best user  experience. It may have one of the following values:  <ul> <li><code>none</code>: indicates that the audio should not be preloaded;</li> <li><code>metadata</code>: indicates that only audio metadata (e.g. length) is fetched;</li> <li><code>auto</code>: indicates that the whole audio file could be downloaded, even if the user is not expected to use it;</li> <li>the <em>empty string</em>: synonym of the <code>auto</code> value.</li> </ul> <p>If not set, its default value is browser-defined (i.e. each browser  may have its own default value). The spec advises it to be set to <code>metadata</code>.</p> <div><strong>Usage notes:</strong> <ul> <li>The <code>autoplay</code> attribute has precedence over&nbsp;<code>preload</code>. If <code>autoplay</code> is specified, the browser would obviously need to start downloading the audio for playback.</li> <li>The browser is not forced by the specification to follow the value of this attribute; it is a mere hint.</li> </ul> </div> </dd> <dt><strong><code>src</code></strong></dt> <dd>The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the <code>&lt;source&gt;</code> element within the audio block to specify the audio to embed.</dd> <dt><strong><code>volume</code></strong></dt> <dd>The playback volume, in the range 0.0 (silent) to 1.0 (loudest).</dd> </dl> <p>Time offsets are specified as float values indicating the number of seconds to offset.</p> <div><strong>Note:</strong> The time offset value definition has not yet been completed in the HTML5 specification and is subject to change.</div> <h2>Events</h2> <p>An audio element can fire various events.</p> <h2>Usage notes</h2> <p>Fallback content for browsers not supporting the <code>&lt;audio&gt;</code> element can be added&nbsp;inside the opening and closing <code>&lt;audio&gt;&lt;/audio&gt;</code> tags.</p> <p>The most basic playback functionality can be made available using the <code>controls</code>  attribute (see below); for more advanced usage, audio playback and  controls can be manipulated using the HTML Media API, and more  specifically the features defined in the <code>HTMLAudioElement</code> interface.</p> <p>You can also use the Web Audio API to directly generate and manipulate audio streams from JavaScript code. See Web Audio API for details.</p> <h2>Examples</h2> <h3>Basic usage</h3> <pre><code>&lt;!-- Simple audio playback --&gt; &lt;audio   src=""http://developer.mozilla.org/@api/deki/files/2926/=AudioTest_(1).ogg""   autoplay&gt;   Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element. &lt;/audio&gt;  &lt;!-- Audio playback with captions --&gt; &lt;audio src=""foo.ogg""&gt;   &lt;track kind=""captions"" src=""foo.en.vtt"" srclang=""en"" label=""English""&gt;   &lt;track kind=""captions"" src=""foo.sv.vtt"" srclang=""sv"" label=""Svenska""&gt; &lt;/audio&gt;</code></pre> <h3>Audio element with source element</h3> <pre><code>&lt;audio controls=""controls""&gt;   Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.   &lt;source src=""foo.wav"" type=""audio/wav""&gt; &lt;/audio&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio	HTML
HTML element <code>&lt;img&gt;</code>	<small>HTML media element</small><br /><b>image</b> in the document	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> Deprecated since HTML4.01, Obsolete since HTML5&nbsp;</dt> <dd>The alignment of the image with respect to its surrounding context. In HTML5, use the&nbsp;<code>float</code> and/or <code>vertical-align</code> CSS properties instead.</dd> <dt><strong><code>alt</code></strong></dt> <dd>This attribute defines the alternative text describing the image.  Users will see this text displayed if the image URL is wrong, the image  is not in one of the supported formats, or if the image is not yet downloaded.  <div> <p>Browsers do not always display the image referenced by the element.  This is the case for non-graphical browsers (including those used by  people with vision impairments), if the user chooses not to display  images, or if the browser cannot display the image because it is invalid  or an unsupported type. In these cases, the browser may replace the image with the text defined in this element's <code>alt</code> attribute. You should, for these reasons and others, provide a useful value for <code>alt</code> whenever possible.</p> </div> <div> <p>Omitting this attribute altogether&nbsp;indicates that the image is a key  part of the content, and no textual equivalent is available. Setting  this attribute to an empty string (<code>alt="""")</code> indicates that this image is <em>not</em> a key part of the content, and that&nbsp;non-visual browsers may omit it from rendering.</p> </div> </dd> <dt><strong><code>border</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>The width of a border around the image. In HTML5, use the <code>border</code> CSS property instead.</dd> <dt><strong><code>crossorigin</code></strong> HTML5</dt> <dd>This enumerated attribute indicates if the fetching of the related image must be done using CORS or not. CORS-enabled images can be reused in the <code>&lt;canvas&gt;</code> element without being ""tainted."" The allowed values are:</dd> <dd> <dl> <dt><code>anonymous</code></dt> <dd>A cross-origin request (i.e., with <code>Origin:</code> HTTP  header) is performed. But no credential is sent (i.e., no cookie, no  X.509 certificate, and no HTTP Basic authentication is sent). If the  server does not give credentials to the origin site (by not setting the <code>Access-Control-Allow-Origin:</code> HTTP header), the image will be tainted and its usage restricted.</dd> <dt><code>use-credentials</code></dt> <dd>A cross-origin request (i.e., with <code>Origin:</code> HTTP  header) performed with credential is sent (i.e., a cookie, a  certificate, and HTTP Basic authentication is performed). If the server  does not give credentials to the origin site (through <code>Access-Control-Allow-Credentials:</code> HTTP header), the image will be tainted and its usage restricted.</dd> </dl>  When not present, the resource is fetched without a CORS request (i.e., without sending the <code>Origin:</code> HTTP header), preventing its non-tainted usage in <code>&lt;canvas&gt;</code> elements. If invalid, it is handled as if the enumerated keyword <strong>anonymous</strong> was used. See CORS settings attributes for additional information.</dd> <dt><strong><code>height</code></strong></dt> <dd>The intrinsic height of the image in&nbsp;pixels.&nbsp;In HTML 4, the height could be defined&nbsp;pixels or as a percentage. In&nbsp;HTML5, however, the value must be in pixels.</dd> <dt><strong><code>hspace</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>The number of pixels of white space to insert to the left and right of the image. In HTML5, use the <code>margin</code> CSS property&nbsp;instead.</dd> <dt><strong><code>ismap</code></strong></dt> <dd>This Boolean attribute indicates that the image is part of a  server-side map. If so, the precise coordinates of a click are sent to  the server.  <div> <p>This attribute is allowed only if the <code>&lt;img&gt;</code> element is a descendant of an <code>&lt;a&gt;</code> element with a valid <code>href</code> attribute.</p> </div> </dd> <dt><strong><code>longdesc</code></strong></dt> <dd>A link to a more detailed description of the image. Possible values are a URL or an element&nbsp;id.</dd> <dt><strong><code>name</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>A name for the element. It is supported in HTML 4 only for backward compatibility. Use the <code>id</code> attribute instead.</dd> <dt><strong><code>referrerpolicy</code></strong> <i> </i></dt> <dd>A string indicating which referrer to use when fetching the resource:  <ul> <li><code>no-referrer:</code>&nbsp;the <code>Referer</code>&nbsp;header will not be sent.</li> <li><code>no-referrer-when-downgrade:</code>&nbsp;no <code>Referer</code>&nbsp;header  will be sent when navigating to an origin without TLS (HTTPS). This is a  user agent’s default behavior&nbsp;if no policy is otherwise specified.</li> <li><code>origin:</code>&nbsp;the <code>Referer</code> header&nbsp;will include the page of origin's&nbsp;scheme, the host and the port.</li> <li><code>origin-when-cross-origin:</code>&nbsp;navigating&nbsp;to other origins  will limit&nbsp;the included referral&nbsp;data&nbsp;to the scheme, the host and the  port, while navigating&nbsp;from the same origin will include the referrer's  full path.</li> <li><code>unsafe-url:</code>&nbsp;the <code>Referer</code> header will  include the origin and the path,&nbsp;but not the fragment, password&nbsp;or  username. This case is unsafe because it can leak origins and paths from  TLS-protected resources to insecure origins.</li> </ul> </dd> <dt><strong><code>sizes</code></strong>HTML5</dt> <dd>A list of one or more strings separated by commas indicating a set of source sizes. Each source size consists of:  <ol> <li>a media condition. This must be omitted for the last item.</li> <li>a source size value.</li> </ol> <p>Source size values specify the intended display size of the image.  User agents use the current source size to select one of the sources  supplied by the <code>srcset</code> attribute, when those sources are described using width ('<code>w</code>')  descriptors. The selected source size affects the intrinsic size of the  image (the image’s display size if no CSS styling is applied). If the <code>srcset</code> attribute is absent, or contains no values with a width (<code>w</code>) descriptor, then the <code>sizes</code> attribute has no effect.</p> </dd> <dt><strong><code>src</code></strong></dt> <dd>The image URL. This attribute is mandatory for the <code>&lt;img&gt;</code> element. On browsers supporting <code>srcset</code>, <code>src</code> is treated like a candidate image with a pixel density descriptor <code>1x</code> unless an image with this pixel density descriptor is already defined in <code>srcset,</code> or unless&nbsp;<code>srcset</code> contains '<code>w</code>' descriptors.</dd> <dt><strong><code>srcset</code></strong>HTML5</dt> <dd>A list of one or more strings separated by commas indicating a set  of possible image sources for the user agent to use. Each string is  composed of:  <ol> <li>a URL to an image,</li> <li>optionally, whitespace followed by one of:    <ul> <li>a width descriptor, or&nbsp;a positive integer directly followed by '<code>w</code>'. The width descriptor is divided by the source size given in the&nbsp;<code>sizes</code> attribute to calculate the effective pixel density.</li> <li>a pixel density descriptor, which is a positive floating point number directly followed by '<code>x</code>'.</li> </ul> </li> </ol> <p>If no descriptor is specified, the source is assigned the default descriptor: <code>1x</code>.</p> <p>It is incorrect&nbsp;to mix width descriptors and pixel density descriptors in the same <code>srcset</code> attribute. Duplicate descriptors (for instance, two sources in the same <code>srcset</code> which are both described with '<code>2x</code>') are invalid, too.</p> <p>The user agent selects any one of the available sources at its  discretion.&nbsp;This provides them with significant leeway to tailor their  selection based on things like user preferences or bandwidth conditions.</p> </dd> <dt><strong><code>width</code></strong></dt> <dd>The intrinsic width of the image in pixels.&nbsp;In HTML 4, either a percentage or pixels were acceptable values. In&nbsp;HTML5, however, only pixels are acceptable.</dd> <dt><strong><code>usemap</code></strong></dt> <dd>The partial URL (starting with '#') of an image map associated with the element.  <div> <p><strong>Usage note: </strong>You cannot use this attribute if the <code>&lt;img&gt;</code> element is a descendant of an <code>&lt;a&gt;</code> or <code>&lt;button&gt;</code> element.</p> </div> </dd> <dt><strong><code>vspace</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>The number of pixels of white space to insert above and below the image. In HTML5, use the <code>margin</code>&nbsp;CSS property&nbsp;instead.</dd> </dl> <h2>Supported image formats</h2> <p>The HTML standard doesn't give a list of image formats that must be  supported, so each user agent supports a different set of formats. Gecko supports:</p> <ul> <li>JPEG</li> <li>GIF, including animated GIFs</li> <li>PNG</li> <li>APNG </li> <li>SVG </li> <li>BMP</li> <li>BMP ICO</li> <li>PNG ICO </li> </ul> <h2>Interaction with CSS</h2> <p>Regarding CSS, <code>&lt;img&gt;</code> is a replaced element. It has no baseline, so when images are used in an inline formatting context with <code>vertical-align</code><code>: baseline</code>, the bottom of the image will be placed on the container's baseline.</p> <p>Depending on its type, an image may have an intrinsic width and  height. For some image types, however, intrinsic dimensions&nbsp;are not  necessary.&nbsp;SVG images, for instance,&nbsp;have no intrinsic dimensions.</p> <h2>Errors</h2> <p>If an error occurs while trying to load or render the image, and an <code>onerror</code> event handler has been configured to handle the <code>error</code> event, that event handler will get called. This can happen in a number of situations, including:</p> <ul> <li>The <code>src</code> attribute is empty or <code>null</code>.</li> <li>The specified <code>src</code> URL is the same as the URL of the page the user is currently on.</li> <li>The specified image is corrupted in some way that prevents it from being loaded.</li> <li>The specified image's metadata is corrupted in such a way that it's  impossible to retrieve its dimensions, and no dimensions were specified  in the <code>&lt;img&gt;</code> element's attributes.</li> <li>The specified image is in a format not supported by the user agent.</li> </ul> <h2>Example 1: &nbsp;Alternative text</h2> <pre><code>&lt;img src=""mdn-logo-sm.png"" alt=""MDN""&gt;</code></pre> <p><img src=""https://developer.cdn.mozilla.net/media/img/mdn-logo-sm.png"" /></p> <h2>Example 2: Image link</h2> <pre><code>&lt;a&gt;MDN&lt;img src=""mdn-logo-sm.png"" alt=""MDN""&gt;&lt;/a&gt;</code></pre> <p><img src=""mdn-logo-sm.png"" /></p> <h2>Example 3: Using the <code>srcset</code> attribute</h2> <p>The <code>src</code> attribute is a <code>1x</code> candidate in user agents that support <code>srcset</code>.</p> <pre><code>&lt;img src=""mdn-logo-sm.png""        alt=""MDN""        srcset=""mdn-logo-HD.png 2x""&gt;</code></pre> <h2>Example 4: Using the <code>srcset</code> and <code>sizes</code> attributes</h2> <p>The <code>src</code> attribute is ignored in user agents that support <code>srcset</code> when using '<code>w</code>' descriptors. When the <code>(min-width: 600px)</code> media condition matches, the image will be 200px wide, otherwise it will be 50vw wide (50% of the viewport width).</p> <pre><code>&lt;img src=""clock-demo-thumb-200.png""        alt=""Clock""        srcset=""clock-demo-thumb-200.png 200w,           clock-demo-thumb-400.png 400w""       sizes=""(min-width: 600px) 200px, 50vw""&gt;</code></pre> <h2></h2>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img	HTML
HTML element <code>&lt;map&gt;</code>	<small>HTML media element</small><br />is used with <code>&lt;area&gt;</code> elements to <b>define an image map</b> (a clickable link area)	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>name</code></strong></dt> <dd>The name attribute gives the map a name so that it can be  referenced. The attribute must be present and must have a non-empty  value with no space characters. The value of the name attribute must not  be a compatibility-caseless match for the value of the name attribute  of another map element in the same document. If the id attribute is also  specified, both attributes must have the same value.</dd> </dl> <h2>Example</h2> <pre><code>&lt;map name=""primary""&gt;   &lt;area shape=""circle"" coords=""75,75,75""&gt;   &lt;area shape=""circle"" coords=""275,75,75""&gt; &lt;/map&gt; &lt;img usemap=""#primary"" src=""http://placehold.it/350x150"" alt=""350 x 150 pic""&gt;</code></pre> <h2></h2>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map	HTML
HTML element <code>&lt;track&gt;</code>	<small>HTML media element</small><br />is used as a child of the media elements <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>. It lets you <b>specify timed text tracks</b> (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (<code>.vtt</code> files) — Web Video Text Tracks	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>default</code></strong></dt> <dd>This attribute indicates that the track should be enabled unless  the user's preferences indicate that another track is more appropriate.  This may only be used on one <code>track</code> element per media element.</dd> <dt><strong><code>kind</code></strong></dt> <dd>How the text track is meant to be used. If omitted the default kind is <code>subtitles</code>. If the attribute is not present, it will use the <code>subtitles</code>. If the attribute contains an invalid value, it will use <code>metadata</code>. (Versions of Chrome earlier than 52 treated an invalid value as <code>subtitles</code>.)&nbsp;The following keywords are allowed:  <ul> <li><code>subtitles</code> <ul> <li>Subtitles provide translation of content that cannot be  understood by the viewer. For example dialogue or text that is not  English in an English language film.</li> <li>Subtitles may contain additional content, usually extra  background information. For example the text at the beginning of the  Star Wars films, or the date, time, and location of a scene.</li> </ul> </li> <li><code>captions</code> <ul> <li>Closed captions provide a transcription and possibly a translation of audio.</li> <li>It may include important non-verbal information such as music  cues or sound effects. It may indicate the cue's source (e.g. music,  text, character).</li> <li>Suitable for users who are deaf or when the sound is muted.</li> </ul> </li> <li><code>descriptions</code> <ul> <li>Textual description of the video content.</li> <li>Suitable for users who are blind or where the video cannot be seen.</li> </ul> </li> <li><code>chapters</code> <ul> <li>Chapter titles are intended to be used when the user is navigating the media resource.</li> </ul> </li> <li><code>metadata</code> <ul> <li>Tracks used by scripts. Not visible to the user.</li> </ul> </li> </ul> </dd> <dt><strong><code>label</code></strong></dt> <dd>A user-readable title of the text track which is used by the browser when listing available text tracks.</dd> <dt><strong><code>src</code></strong></dt> <dd>Address of the track (<code>.vtt</code> file). Must be a valid URL. This attribute must be defined.</dd> <dt><strong><code>srclang</code></strong></dt> <dd>Language of the track text data. It must be a valid BCP 47 language tag. If the <code>kind</code> attribute is set to&nbsp;<code>subtitles,</code> then <code>srclang</code> must be defined.</dd> </dl> <h2>Usage notes</h2> <p>The type of data that <code> track</code> adds to the media is set in the <code>kind</code> attribute, which can take values of <code>subtitles</code>, <code>captions</code>, <code>descriptions</code>, <code>chapters</code> or <code>metadata</code>. The element points to a source file containing timed text that the browser exposes when the user requests additional data.</p> <p>A <code>media</code> element cannot have more than one <code>track</code> with the same <code>kind</code>, <code>srclang</code>, and <code>label</code>.</p> <h2>Examples</h2> <pre><code>&lt;video controls poster=""/images/sample.gif""&gt;    &lt;source src=""sample.mp4"" type=""video/mp4""&gt;    &lt;source src=""sample.ogv"" type=""video/ogv""&gt;    &lt;track kind=""captions"" src=""sampleCaptions.vtt"" srclang=""en""&gt;    &lt;track kind=""descriptions""      src=""sampleDescriptions.vtt"" srclang=""en""&gt;    &lt;track kind=""chapters"" src=""sampleChapters.vtt"" srclang=""en""&gt;    &lt;track kind=""subtitles"" src=""sampleSubtitles_de.vtt"" srclang=""de""&gt;    &lt;track kind=""subtitles"" src=""sampleSubtitles_en.vtt"" srclang=""en""&gt;    &lt;track kind=""subtitles"" src=""sampleSubtitles_ja.vtt"" srclang=""ja""&gt;    &lt;track kind=""subtitles"" src=""sampleSubtitles_oz.vtt"" srclang=""oz""&gt;    &lt;track kind=""metadata"" src=""keyStage1.vtt"" srclang=""en""      label=""Key Stage 1""&gt;    &lt;track kind=""metadata"" src=""keyStage2.vtt"" srclang=""en""      label=""Key Stage 2""&gt;    &lt;track kind=""metadata"" src=""keyStage3.vtt"" srclang=""en""      label=""Key Stage 3""&gt;    &lt;!-- Fallback --&gt;    ... &lt;/video&gt;</code></pre> <h2></h2>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track	HTML
HTML element <code>&lt;video&gt;</code>	<small>HTML media element</small><br />is used to embed <b>video content</b> in a document	"<h2>Attributes</h2> <p>Like all other HTML elements, this element supports the global attributes.</p> <dl> <dt><strong><code>autoplay</code></strong></dt> <dd>A Boolean attribute; if specified, the video automatically begins  to play back as soon as it can do so without stopping to finish loading  the data.</dd> <dd> <p>Sites which automatically play audio (or videos with an  audio track) can be an unpleasant experience for users, so it should be  avoided when possible. If you must offer autoplay functionality, you  should make it opt-in (requiring a user to specifically enable it).  However, this can be useful when creating media elements whose source  will be set at a later time, under user control.</p> </dd> </dl> <dl> <dt><strong><code>buffered</code></strong></dt> <dd>An attribute you can read to determine the time ranges of the buffered media. This attribute contains a <code>TimeRanges</code> object.</dd> <dt><strong><code>controls</code></strong></dt> <dd>If this attribute is present, the browser will offer controls to  allow the user to control video playback, including volume, seeking, and  pause/resume playback.</dd> <dt><strong><code>crossorigin</code></strong></dt> <dd>This enumerated attribute indicates whether to use CORS to fetch the related image. CORS-enabled resources can be reused in the <code>&lt;canvas&gt;</code> element without being <em>tainted</em>. The allowed values are:  <dl> <dt>anonymous</dt> <dd>Sends a cross-origin request without a credential. In other words, it sends the <code>Origin:</code>  HTTP header without a cookie, X.509 certificate, or performing HTTP  Basic authentication. If the server does not give credentials to the  origin site (by not setting the <code>Access-Control-Allow-Origin:</code> HTTP header), the image will be <em>tainted</em>, and its usage restricted.</dd> <dt>use-credentials</dt> <dd>Sends a cross-origin request with a credential. In other words, it sends the <code>Origin:</code>  HTTP header with a cookie, a certificate, or performing HTTP Basic  authentication. If the server does not give credentials to the origin  site (through <code>Access-Control-Allow-Credentials:</code> HTTP header), the image will be <em>tainted</em> and its usage restricted.</dd> </dl>  When not present, the resource is fetched without a CORS request (i.e. without sending the <code>Origin:</code> HTTP header), preventing its non-tainted used in <code>&lt;canvas&gt;</code> elements. If invalid, it is handled as if the enumerated keyword <strong>anonymous</strong> was used. See CORS settings attributes for additional information.</dd> <dt><strong><code>height</code></strong></dt> <dd>The height of the video's display area, in&nbsp;CSS pixels. &nbsp;-- (Absolute values&nbsp;only. &nbsp;NO&nbsp;percentages)</dd> <dt><strong><code>loop</code></strong></dt> <dd>A Boolean attribute; if specified, we will, upon reaching the end of the video, automatically seek back to the start.</dd> <dt><strong><code>muted</code></strong></dt> <dd>A Boolean attribute which indicates the default setting of the  audio contained in the video. If set, the audio will be initially  silenced. Its default value is false, meaning that the audio will be  played when the video is played.</dd> <dt><strong><code>played</code></strong></dt> <dd>A <code>TimeRanges</code> object indicating all the ranges of the video that have been played.</dd> <dt><strong><code>preload</code></strong></dt> <dd>This enumerated attribute is intended to provide a hint to the  browser about what the author thinks will lead to the best user  experience. It may have one of the following values:  <ul> <li><code>none</code>: indicates that the video should not be preloaded.</li> <li><code>metadata</code>: indicates that only video metadata (e.g. length) is fetched.</li> <li><code>auto</code>: indicates that the whole video file could be downloaded, even if the user is not expected to use it.</li> <li>the <em>empty string</em>: synonym of the <code>auto</code> value.</li> </ul> <p>If not set, its default value is browser-defined (i.e. each browser  may have its default value). The spec advises it to be set to <code>metadata</code>.</p> <div><strong>Usage notes:</strong> <ul> <li>The <code>autoplay</code> attribute has precedence over <code>preload</code>. If <code>autoplay</code> is specified, the browser would obviously need to start downloading the video for playback.</li> <li>The specification does not force the browser to follow the value of this attribute; it is a mere hint.</li> </ul> </div> </dd> <dt><strong><code>poster</code></strong></dt> <dd>A URL indicating a poster frame to show until the user plays or  seeks. If this attribute isn't specified, nothing is displayed until the  first frame is available; then the first frame is shown as the poster  frame.</dd> <dt><strong><code>src</code></strong></dt> <dd>The URL of the video to embed. This is optional; you may instead use the <code>&lt;source&gt;</code> element within the video block to specify the video to embed.</dd> <dt><strong><code>width</code></strong></dt> <dd>The width of the video's display area, in&nbsp;CSS pixels. &nbsp;-- (Absolute values&nbsp;only. &nbsp;NO&nbsp;percentages)</dd> </dl> <h2>Events</h2> <p>The <code>&lt;video&gt;</code> element can fire many different events.</p> <h2>Usage notes</h2> <ul> <li>The <code>&lt;video&gt;</code> element contains one or more video sources. To specify a video source, use either the <code>src</code> attribute or the <code>&lt;source&gt;</code> element; the browser will choose the most suitable one. For a list of supported formats, see Media formats supported by the audio and video elements.</li> </ul> <h2>Examples</h2> <pre><code>&lt;!-- Simple video example --&gt; &lt;video src=""videofile.webm"" autoplay poster=""posterimage.jpg""&gt; Sorry, your browser doesn't support embedded videos,  but don't worry, you can &lt;a&gt;download it&lt;/a&gt; and watch it with your favorite video player! &lt;/video&gt;  &lt;!-- Video with subtitles --&gt; &lt;video src=""foo.webm""&gt;   &lt;track kind=""subtitles"" src=""foo.en.vtt"" srclang=""en""     label=""English""&gt;   &lt;track kind=""subtitles"" src=""foo.sv.vtt"" srclang=""sv""     label=""Svenska""&gt; &lt;/video&gt;</code></pre> <p>The first example plays a video, starting playback as soon as enough  of the video has been received to allow playback without pausing to  download more. Until the video starts playing, the image  ""posterimage.jpg"" is displayed in its place.</p> <p>The second example allows the user to choose between different subtitles.</p> <h2>Multiple sources example</h2> <p>This example offers three different sources for the media; this  allows the video to be watched regardless of which video codecs are  supported by the browser; first WebM is tried. If that can't be played,  then MP4 is tried. Finally, OGG is tried.</p> <pre><code>&lt;video width=""480"" controls   poster=""https://archive.org/download/WebmVp8Vorbis/webmvp8.gif"" &gt;   &lt;source     src=""https://archive.org/download/WebmVp8Vorbis/webmvp8.webm""     type=""video/webm""&gt;   &lt;source     src=""https://archive.org/download/WebmVp8Vorbis/webmvp8_512kb.mp4""     type=""video/mp4""&gt;   &lt;source     src=""https://archive.org/download/WebmVp8Vorbis/webmvp8.ogv""     type=""video/ogg""&gt;   Your browser doesn't support HTML5 video tag. &lt;/video&gt;</code></pre> <p>You can try the preceding example on HTML5 video demo example with live preview code editor.</p> <h2>Server support</h2> <p>If the MIME type for the video is not set correctly on the server,  the video may not show or show a gray box containing an X (if JavaScript  is enabled).</p> <p>If you use Apache Web Server to serve Ogg Theora videos, you can fix  this problem by adding the video file type extensions to ""video/ogg""  MIME type. The most common video file type extensions are "".ogm"",  "".ogv"", or "".ogg"". To do this, edit the ""mime.types"" file in  ""/etc/apache"" or use the ""AddType"" configuration directive in  httpd.conf.</p> <pre><code>AddType video/ogg .ogm AddType video/ogg .ogv AddType video/ogg .ogg</code></pre> <p>If you serve your videos as WebM, you can fix this problem for the  Apache Web Server by adding the extension used by your video files  ("".webm"" is the most common one) to the MIME type ""video/webm"" via the  ""mime.types"" file in ""/etc/apache"" or via the ""AddType"" configuration  directive in httpd.conf.</p> <pre><code>AddType video/webm .webm</code></pre> <p>Your web host may provide an easy interface to MIME type  configuration changes for new technologies until a global update  naturally occurs.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video	HTML
HTML element <code>&lt;embed&gt;</code>	<small>HTML embedded content element</small><br />represents an <b>integration point for an external application</b> or interactive content (in other words, a plug-in)	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>height</code></strong></dt> <dd>The displayed height of the resource, in CSS pixels. &nbsp;-- (Absolute values&nbsp;only. &nbsp;NO&nbsp;percentages)</dd> <dt><strong><code>src</code></strong></dt> <dd>The URL&nbsp;of the resource being embedded.</dd> <dt><strong><code>type</code></strong></dt> <dd>The MIME&nbsp;type to use to select the plug-in to instantiate.</dd> <dt><strong><code>width</code></strong></dt> <dd>The displayed width of the resource, in CSS pixels. &nbsp;-- (Absolute values&nbsp;only. &nbsp;NO&nbsp;percentages)</dd> </dl> <h2>Examples</h2> <pre><code>&lt;embed type=""video/quicktime"" src=""movie.mov"" width=""640"" height=""480""&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed	HTML
HTML element <code>&lt;object&gt;</code>	<small>HTML embedded content element</small><br />represents an <b>external resource</b>, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>archive</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>A space-separated list of URIs for archives of resources for the object.</dd> <dt><strong><code>border</code></strong> Deprecated since HTML4.01; Obsolete since HTML5</dt> <dd>The width of a border around the control, in pixels.</dd> <dt><strong><code>classid</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>The URI of the object's implementation. It can be used together with, or in place of, the <strong>data</strong> attribute.</dd> <dt><strong><code>codebase</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>The base path used to resolve relative URIs specified by <strong>classid</strong>, <strong>data</strong>, or <strong>archive</strong>. If not specified, the default is the base URI of the current document.</dd> <dt><strong><code>codetype</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>The content type of the data specified by <strong>classid</strong>.</dd> <dt><strong><code>data</code></strong></dt> <dd>The address of the resource as a valid URL. At least one of <strong>data</strong> and <strong>type</strong> must be defined.</dd> <dt><strong><code>declare</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent <code>&lt;object&gt;</code> element. In HTML5, repeat the &lt;object&gt; element completely each that that the resource is reused.</dd> <dt><strong><code>form</code></strong> HTML5</dt> <dd>The form element, if any, that the object element is associated with (its <em>form owner</em>). The value of the attribute must be an ID of a <code>&lt;form&gt;</code> element in the same document.</dd> <dt><strong><code>height</code></strong></dt> <dd>The height of the displayed resource, in CSS pixels. &nbsp;-- (Absolute values&nbsp;only. &nbsp;NO&nbsp;percentages)</dd> <dt><strong><code>name</code></strong></dt> <dd>The name of valid browsing context (HTML5), or the name of the control (HTML 4).</dd> <dt><strong><code>standby</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>A message that the browser can show while loading the object's implementation and data.</dd> <dt><strong><code>tabindex</code></strong> HTML 4 only; Obsolete since HTML5</dt> <dd>The position of the element in the tabbing navigation order for the current document.</dd> <dt><strong><code>type</code></strong></dt> <dd>The content type of the resource specified by <strong>data</strong>. At least one of <strong>data</strong> and <strong>type</strong> must be defined.</dd> <dt><strong><code>typemustmatch</code></strong> HTML5</dt> <dd>This Boolean attribute indicates if the <strong>type</strong> and the actual content type resource must match in order of this one to be used.</dd> <dt><strong><code>usemap</code></strong></dt> <dd>A hash-name reference to a <code>&lt;map&gt;</code> element; that is a '#' followed by the value of a <code>name</code> of a map element.</dd> <dt><strong><code>width</code></strong></dt> <dd>The width of the display resource, in CSS pixels. &nbsp;-- (Absolute values&nbsp;only. &nbsp;NO&nbsp;percentages)</dd> </dl> <h2>Examples</h2> <h3>Embed a flash movie</h3> <pre><code>&lt;!-- Embed a flash movie --&gt; &lt;object data=""movie.swf""   type=""application/x-shockwave-flash""&gt;&lt;/object&gt;  &lt;!-- Embed a flash movie with parameters --&gt; &lt;object data=""movie.swf"" type=""application/x-shockwave-flash""&gt;   &lt;param name=""foo"" value=""bar""&gt; &lt;/object&gt;</code></pre> <h2></h2>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object	HTML
HTML element <code>&lt;param&gt;</code>	<small>HTML embedded content element</small><br /><b>parameters</b> for an <code>&lt;object&gt;</code> element	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>name</code></strong></dt> <dd>Name of the parameter.</dd> <dt><strong><code>type</code></strong> <i> </i></dt> <dd>Only used if the <code>valuetype</code> is set to ""ref"". Specifies the MIME type of values found at the URI specified by value.</dd> <dt><strong><code>value</code></strong></dt> <dd>Specifies the value of the parameter.</dd> <dt><strong><code>valuetype</code></strong> <i> </i></dt> <dd>Specifies the type of the <code>value</code> attribute. Possible values are:  <ul> <li>data: Default value. The value is passed to the object's implementation as a string.</li> <li>ref: The value is a URI to a resource where run-time values are stored.</li> <li>object: An ID of another <code>&lt;object&gt;</code> in the same document.</li> </ul> </dd> </dl> <h2>Examples</h2> <p>Please see the <code>&lt;object&gt;</code> page for examples on &lt;param&gt;.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param	HTML
HTML element <code>&lt;source&gt;</code>	<small>HTML embedded content element</small><br />specifies multiple <b>media resources</b> for either the <code>&lt;picture&gt;</code>, the <code>&lt;audio&gt;</code> or the <code>&lt;video&gt;</code> element. It is an empty element. It is commonly used to serve the same media content in multiple formats supported by different browsers	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>sizes</code></strong> <i> </i></dt> <dd>Is a list of source sizes that describes the final rendered width  of the image represented by the source. Each source size consists of a  comma-separated list of media condition-length pairs. This information  is used by the browser to determine, before laying the page out, which  image defined in <code>srcset</code> to use.<br />  The <code>sizes</code> attribute has an effect only when the <code>&lt;source&gt;</code> element is the direct child of a <code>&lt;picture&gt;</code> element.</dd> <dt><strong><code>src</code></strong></dt> <dd>Required for <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>, address of the media resource. The value of this attribute is ignored when the <code>&lt;source&gt;</code> element is placed inside a <code>&lt;picture&gt;</code> element.</dd> <dt><strong><code>srcset</code></strong> <i> </i></dt> <dd>A list of one or more strings separated by commas indicating a set  of possible images represented by the source for the browser to use.  Each string is composed of:  <ol> <li>one URL to an image,</li> <li>a width descriptor, that is a positive integer directly followed by <code>'w'</code>. The default value, if missing, is the infinity.</li> <li>a pixel density descriptor, that is a positive floating number directly followed by <code>'x'</code>. The default value, if missing, is <code>1x</code>.</li> </ol> <p>Each string in the list must have at least a width descriptor or a  pixel density descriptor to be valid. Among the list, there must be only  one string containing the same tuple of width descriptor and pixel  density descriptor.<br />   The browser chooses the most adequate image to display at a given point of time.<br />   The <code>srcset</code> attribute has an effect only when the <code>&lt;source&gt;</code> element is the direct child of a <code>&lt;picture&gt;</code> element.</p> </dd> <dt><strong><code>type</code></strong></dt> <dd>The MIME-type of the resource, optionally with a <code>codecs</code> parameter. See RFC 4281 for information about how to specify codecs.</dd> <dt><strong><code>media</code></strong> <i> </i></dt> <dd>Media query of the resource's intended media; this should be used only in a <code>&lt;picture&gt;</code> element.</dd> </dl> <p>If the <strong>type</strong> attribute isn't specified, the media's  type is retrieved from the server and checked to see if Gecko can handle  it; if it can't be rendered, the next <strong>source</strong> is checked. If the <strong>type</strong>  attribute is specified, it's compared against the types Gecko can play,  and if it's not recognized, the server doesn't even get queried;  instead, the next <strong>source</strong> element is checked at once.</p> <h2>Examples</h2> <p>This example demonstrates how to offer a video in Ogg format for  users whose browsers support Ogg format, and a QuickTime format video  for users whose browsers support that. If the<code> audio</code> or <code>video</code>  element is not supported by the browser, a notice is displayed  instead.&nbsp; If the browser supports the element but does not support any  of the specified formats, an <code>error</code> event is raised and the default media controls (if enabled) will indicate an error. See also the list of media formats supported by the audio and video elements in various browsers.</p> <pre><code>&lt;video controls&gt;   &lt;source src=""foo.webm"" type=""video/webm""&gt;   &lt;source src=""foo.ogg"" type=""video/ogg""&gt;    &lt;source src=""foo.mov"" type=""video/quicktime""&gt;   I'm sorry; your browser doesn't support HTML5 video. &lt;/video&gt;</code></pre> <p>For more examples, see Using audio and video in Firefox.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source	HTML
HTML element <code>&lt;canvas&gt;</code>	<small>HTML scripting element</small><br />is used with the <b>canvas scripting</b> API to draw graphics and animations	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>height</code></strong></dt> <dd>The height of the coordinate space in CSS pixels. Defaults to 150.</dd> <dt><strong><code>moz-opaque</code></strong> <i> </i></dt> <dd>Lets the canvas know whether or not translucency will be a factor.  If the canvas knows there's no translucency, painting performance can be  optimized.</dd> <dt><strong><code>width</code></strong></dt> <dd>The width of the coordinate space in CSS pixels. Defaults to 300.</dd> </dl> <h2>Usage notes</h2> <h3>Alternative content</h3> <p>You may (and should) provide alternate content inside the <code>&lt;canvas&gt;</code> block. That content will be rendered both on older browsers that don't support canvas and in browsers with JavaScript disabled.</p> <h3>Required <code>&lt;/canvas&gt;</code> tag</h3> <p>Unlike the <code>&lt;img&gt;</code> element, the <code>&lt;canvas&gt;</code> element <strong>requires</strong> the closing tag (<code>&lt;/canvas&gt;</code>).</p> <h3>Sizing the canvas</h3> <p>The displayed size of the canvas can be changed using a stylesheet.  The image is scaled during rendering to fit the styled size. If your  renderings seem distorted, try specifying your <code>width</code> and <code>height</code> attributes explicitly in the <code>&lt;canvas&gt;</code> attributes, and not using CSS.</p> <h2>Examples</h2> <p>This code snippet adds a canvas element to your HTML document. A  fallback text is provided if a browser is unable to render the canvas,  or if can't read a canvas. Providing a useful fallback text or sub DOM  helps to make the the canvas more accessible.</p> <pre><code>&lt;canvas width=""300"" height=""300""&gt;   An alternative text describing what your canvas displays.  &lt;/canvas&gt;</code></pre> <p>If your canvas does not use transparency&nbsp;set the <code>moz-opaque</code>  attribute on the canvas tag. This information can be used internally to  optimize rendering. However, this attribute has not been standardized  and only works in Mozilla-based rendering engines.</p> <pre><code>&lt;canvas moz-opaque&gt;&lt;/canvas&gt;</code></pre> <h2></h2>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas	HTML
HTML element <code>&lt;noscript&gt;</code>	<small>HTML scripting element</small><br />HTML to be inserted <b>if a script type on the page is unsupported</b> or if scripting is currently turned off in the browser	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <pre><code>&lt;noscript&gt;   &lt;!-- anchor linking to external file --&gt;   &lt;a&gt;External Link&lt;/a&gt; &lt;/noscript&gt; &lt;p&gt;Rocks!&lt;/p&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript	HTML
HTML element <code>&lt;script&gt;</code>	<small>HTML scripting element</small><br />is used to embed or reference an <b>executable script</b>	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>async</code></strong> HTML5</dt> <dd>Set this Boolean attribute to indicate that the browser should, if  possible, execute the script asynchronously. It has no effect on inline  scripts (i.e., scripts that don't have the <strong>src</strong> attribute).</dd> <dd>See Browser compatibility for notes on browser support. See also Async scripts for asm.js.</dd> <dt><strong><code>crossorigin</code></strong></dt> <dd>Normal <code>script</code> elements pass minimal information to the <code>window.onerror</code> for scripts which do not pass the standard CORS checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See&nbsp;CORS settings attributes for a more descriptive explanation of the valid arguments.</dd> <dt><strong><code>defer</code></strong></dt> <dd>This Boolean attribute is set to indicate to a browser that the  script is meant to be executed after the document has been parsed, but  before firing&nbsp;<code>DOMContentLoaded</code>. The <code>defer</code> attribute should only be used on external scripts.</dd> <dt><strong><code>integrity</code></strong></dt> <dd>Contains inline metadata that a user agent can use to verify that a  fetched resource has been delivered free of unexpected manipulation.  See Subresource Integrity.</dd> <dt><strong><code>nomodule</code></strong> <i> </i></dt> <dd>This Boolean attribute is set to indicate that the script should not be executed in browsers that support ES6 modules — in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.</dd> <dt><strong><code>src</code></strong></dt> <dd>This attribute specifies the <abbr>URI</abbr> of an external script; this can be used as an alternative to embedding a script directly within a document. If a <code>script</code> element has a <code>src</code> attribute specified, it should not have a script embedded inside its tags.</dd> <dt><strong><code>text</code></strong></dt> <dd>Like the&nbsp;<code>textContent&nbsp;</code>attribute, this attribute sets the text content of the element. &nbsp;Unlike the&nbsp;<code>textContent&nbsp;</code>attribute, however, this attribute is evaluated as executable&nbsp;code after the node is inserted into the DOM.</dd> <dt><strong><code>type</code></strong></dt> <dd>This attribute identifies the scripting language of code embedded within a <code>script</code> element or referenced via the element’s <code>src</code> attribute. This is specified as a <abbr>MIME</abbr> type; examples of supported <abbr>MIME</abbr> types include <code>text/javascript</code>, <code>text/ecmascript</code>, <code>application/javascript</code>, and <code>application/ecmascript</code>. If this attribute is absent, the script is treated as JavaScript.</dd> <dd>If the <abbr>MIME</abbr>  type specified is not a JavaScript type the content embedded within its  tags is treated as a data block which won't be processed by the  browser.</dd> <dd>If the type specified is <code>module</code> the code is treated as a JavaScript module <i> </i>. See ES6 in Depth: Modules<br /> <br />  Note that in Firefox you can use advanced features such as let statements and other features in later JS versions, by using <code>type=application/javascript;version=1.8</code>&nbsp;<i> </i>.&nbsp;Beware,  however, that&nbsp;as this is a non-standard feature, this will most likely  break support for&nbsp;other browsers, in particular Chromium-based browsers.</dd> <dd>For how to include <em>exotic programming languages</em>, read about Rosetta.</dd> </dl> <h3>Deprecated attributes</h3> <dl> <dt><strong><code>language</code></strong> <i> </i></dt> <dd>Like the <code>type</code> attribute, this attribute identifies the scripting language in use. Unlike the <code>type</code> attribute, however, this attribute’s possible values were never standardized. The <code>type</code> attribute should be used instead.</dd> </dl> <h2>Notes</h2> <p>Scripts without <code>async</code> or <code>defer</code> attributes, as well as inline scripts, are fetched and executed immediately, before the browser continues to parse the page.</p> <p>The script should be served with the <code>text/javascript</code> MIME type, but browsers are lenient and only block them if the script is served with an image type (<code>image/*</code>), a video type (<code>video/*</code>), an audio (<code>audio/*</code>) type, or <code>text/csv</code>. If the script is blocked, an <code>error</code> is sent to the element, if not a <code>load</code> event is sent.</p> <h2>Examples</h2> <pre><code>&lt;!-- HTML4 and (x)HTML --&gt; &lt;script type=""text/javascript"" src=""javascript.js""&gt;&lt;/script&gt;  &lt;!-- HTML5 --&gt; &lt;script src=""javascript.js""&gt;&lt;/script&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script	HTML
HTML element <code>&lt;del&gt;</code>	<small>HTML edit demarcation element</small><br /><b>text that has been deleted</b>, usually as strike-through	<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>cite</code></strong></dt> <dd>A URI for a resource that explains the change (for example, meeting minutes).</dd> <dt><strong><code>datetime</code></strong></dt> <dd>This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp.</dd> </dl> <h2>Examples</h2> <pre><code>&lt;p&gt;&lt;del&gt;This text has been deleted&lt;/del&gt;, here is the rest of the paragraph.&lt;/p&gt; &lt;del&gt;&lt;p&gt;This paragraph has been deleted.&lt;/p&gt;&lt;/del&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del	HTML
HTML element <code>&lt;ins&gt;</code>	<small>HTML edit demarcation element</small><br />represents a range of <b>text that has been added</b> to a document	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>cite</code></strong></dt> <dd>This attribute defines the URI of a resource that explains the  change, such as a link to meeting minutes or a ticket in a  troubleshooting sytem.</dd> <dt><strong><code>datetime</code></strong></dt> <dd>This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp.</dd> </dl> <h2>Examples</h2> <pre><code>&lt;ins&gt;This text has been inserted&lt;/ins&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins	HTML
HTML element <code>&lt;caption&gt;</code>	<small>HTML table content element</small><br /><b>title of a table</b><div>always first descendant of <code>&lt;table&gt;</code></div>	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> Deprecated since HTML4.01 Obsolete since HTML5</dt> <dd>This enumerated attribute indicates how the caption must be aligned with respect to the table. It may have the following values:  <ul> <li><code>left</code>, displayed to the left of the table</li> <li><code>top</code>, displayed before the the table</li> <li><code>right</code>, displayed to the right of the table</li> <li><code>bottom</code>, displayed under the table</li> </ul> <div><strong>Usage note: </strong>Do not use this attribute, as it has been deprecated: the <code>&lt;caption&gt;</code> element should be styled using CSS. To give a similar effect to the <code>align</code> attribute, use the the CSS properties <code>caption-side</code> and <code>text-align</code>.</div> </dd> </dl> <h2>Usage notes</h2> <p>When the <code>&lt;table&gt;</code> element that is the parent of this <code>&lt;caption&gt;</code> is the only descendant of a <code>&lt;figure&gt;</code> element, use the <code>&lt;figcaption&gt;</code> element instead.</p> <h2>Examples</h2> <p>Please see the <code>&lt;table&gt;</code> page for examples on <code>&lt;caption&gt;</code></p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption	HTML
HTML element <code>&lt;col&gt;</code>	<small>HTML table content element</small><br />defines a <b>column within a table</b> and is used for defining common semantics on all common cells. It is generally found within a <code>&lt;colgroup&gt;</code> element	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cell</li> <li><code>center</code>, centering the content in the cell</li> <li><code>right</code>, aligning the content to the right of the cell</li> <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes Unimplemented (see bug&nbsp;2212).</li> </ul> <p>If this attribute is not set, its value is inherited from the <code>align</code> of the <code>&lt;colgroup&gt;</code> element this <code>&lt;col&gt;</code> element belongs too. If there are none, the <code>left</code> value is assumed.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values:     <ul> <li>Do not try to set the <code>text-align</code> property on a selector giving a <code>&lt;col&gt;</code> element. Because <code>&lt;td&gt;</code> elements are not descendant of the <code>&lt;col&gt;</code> element, they won't inherit it.</li> <li>If the table doesn't use a <code>colspan</code> attribute, use the <code>td:nth-child(an+b)</code> CSS selector. Set <code>a</code> to zero and <code>b </code>to the position of the column in the table, e.g. <code>td:nth-child(2) { text-align: right; }</code> to right-align the second column.</li> <li>If the table does use a <code>colspan</code> attribute, the effect can be achieved by combining adequate CSS attribute selectors like <code>[colspan=n]</code>, though this is not trivial.</li> </ul> </li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell of the column. It is one of the 6-digit hexadecimal code as defined in sRGB, prefixed by a '#'. One of the sixteen predefined color strings may be used:  <table style=""width: 80%;""> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>teal</code> = ""#008080""</td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:</strong> Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: the <code>&lt;col&gt;</code> element should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code>, on the relevant <code>&lt;td&gt;</code> elements.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to set the character to align the cells in a  column on. Typical values for this include a period (.) when attempting  to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment characters specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>span</code></strong></dt> <dd>This attribute contains a positive integer indicating the number of consecutive columns the <code>&lt;col&gt;</code> element spans. If not present, its default value is <code>1</code>.</dd> </dl> <dl> <dt><strong><code>valign</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each cell of the column. Possible values for this attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li> <li><code>middle</code>, which will center the text in the cell;</li> <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard:   <ul> <li>Do not try to set the <code>vertical-align</code> property on a selector giving a <code>&lt;col&gt;</code> element. Because <code>&lt;td&gt;</code> elements are not descendant of the <code>&lt;col&gt;</code> element, they won't inherit it.</li> <li>If the table doesn't use a <code>colspan</code> attribute, use the <code>td:nth-child(an+b)</code>  CSS selector where a is the total number of the columns in the table  and b is the ordinal position of the column in the table. Only after  this selector the <code>vertical-align</code> property can be used.</li> <li>If the table does use a <code>colspan</code> attribute, the effect can be achieved by combining adequate CSS attribute selectors like <code>[colspan=n]</code>, though this is not trivial.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>width</code></strong> Obsolete since HTML5</dt> <dd>This attribute specifies a default width for each column in the  current column group. In addition to the standard pixel and percentage  values, this attribute might take the special form <code>0*</code>,  which means that the width of each column in the group should be the  minimum width necessary to hold the column's contents. Relative widths  such as <code>0.5*</code> also can be used.</dd> </dl> <h2>Example</h2> <p>Please see the <code>&lt;table&gt;</code> page for examples on <code>&lt;col&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col	HTML
HTML element <code>&lt;colgroup&gt;</code>	<small>HTML table content element</small><br />defines a <b>group of columns within a table</b>	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>align</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cell</li> <li><code>center</code>, centering the content in the cell</li> <li><code>right</code>, aligning the content to the right of the cell</li> <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes Unimplemented (see bug&nbsp;2212).</li> </ul> <p>If this attribute is not set, the <code>left</code> value is assumed. The descendant <code>&lt;col&gt;</code> elements may override this value using their own <code>align</code> attribute.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values:     <ul> <li>Do not try to set the <code>text-align</code> property on a selector giving a <code>&lt;colgroup&gt;</code> element. Because <code>&lt;td&gt;</code> elements are not descendant of the <code>&lt;colgroup&gt;</code> element, they won't inherit it.</li> <li>If the table doesn't use a <code>colspan</code> attribute, use one <code>td:nth-child(an+b)</code>  CSS selector per column, where a is the total number of the columns in  the table and b is the ordinal position of this column in the table.  Only after this selector the <code>text-align</code> property can be used.</li> <li>If the table does use a <code>colspan</code> attribute, the effect can be achieved by combining adequate CSS attribute selectors like <code>[colspan=n]</code>, though this is not trivial.</li> </ul> </li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell of the  columns member of the column group. It is one of the 6-digit hexadecimal  code as defined in sRGB, prefixed by a '#'. One of the sixteen predefined color strings, as mentioned below, may be used:  <table> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>teal = ""#008080""</code></td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it is non-standard and is only implemented in some versions of Microsoft Internet Explorer; the <code>&lt;colgroup&gt;</code> elements should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code> on the relevant <code>&lt;td&gt;</code> elements.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute specifies the alignment of the content in a column  group to a character. Typical values for this include a period (.) when  attempting to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored, though it will still be used as the default value for the <code>align</code> of the <code>&lt;col&gt;</code> which are members of this column group.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment character specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>span</code></strong></dt> <dd>This attribute contains a positive integer indicating the number of consecutive columns the <code>&lt;colgroup&gt;</code> element spans. If not present, its default value is <code>1</code>.  <div><strong>Note: </strong>This attribute is applied on  the attributes of the column group, it has no effect on the CSS styling  rules associated with it or, even more, to the cells of the column's  members of the group.  <ul> <li>The <code>span</code> attribute may not be present if there are one or more <code>&lt;col&gt;</code> elements within the <code>&lt;colgroup&gt;</code>.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>valign</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each cell of the column. Possible values for this attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li> <li><code>middle</code>, which will center the text in the cell;</li> <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard:   <ul> <li>Do not try to set the <code>vertical-align</code> property on a selector giving a <code>&lt;colgroup&gt;</code> element. Because <code>&lt;td&gt;</code> elements are not descendant of the <code>&lt;colgroup&gt;</code> element, they won't inherit it.</li> <li>If the table doesn't use a <code>colspan</code> attribute, use the <code>td:nth-child(an+b)</code>  CSS selector per column, where a is the total number of the columns in  the table and b is the ordinal position of the column in the table. Only  after this selector the <code>vertical-align</code> property can be used.</li> <li>If the table does use a <code>colspan</code> attribute, the effect can be achieved by combining adequate CSS attribute selectors like <code>[colspan=n]</code>, though this is not trivial.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>width</code></strong> Obsolete since HTML5</dt> <dd>This attribute specifies a default width for each column in the  current column group. In addition to the standard pixel and percentage  values, this attribute might take the special form <code>0*</code>,  which means that the width of each column in the group should be the  minimum width necessary to hold the column's contents. Relative widths  such as <code>0.5*</code> also can be used.</dd> </dl> <h2>Examples</h2> <p>Please see the <code>&lt;table&gt;</code> page for examples on <code>&lt;colgroup&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup	HTML
HTML element <code>&lt;table&gt;</code>	<small>HTML table content element</small><br /><b>two-dimensional data table</b>	"<h2>Attributes</h2> <p>This element includes the global attributes. The following attributes listed on this page are now deprecated.</p> <dl> <dt><strong><code>align</code></strong> <i> </i></dt> <dd>This enumerated attribute indicates how the table must be aligned  inside the containing document. It may have the following values:  <ul> <li>left: the&nbsp;table is displayed on the left side of the document;</li> <li>center:&nbsp;the table is displayed in the center of the document;</li> <li>right:&nbsp;the table is displayed on the right side of the document.</li> </ul> <div><strong>Usage Note</strong> <ul> <li><strong>Do not use this attribute</strong>, as it has been deprecated. The <code>&lt;table&gt;</code> element should be styled using CSS. &nbsp;Set&nbsp;<code>margin-left</code> and <code>margin-right</code> to <code>auto</code>&nbsp;or <code>margin</code> to <code>0 auto</code>&nbsp;to achieve an effect that is similar to the align attribute.</li> <li>Prior to Firefox 4, Firefox also supported the <code>middle</code>, <code>absmiddle</code>, and <code>abscenter</code> values as synonyms of <code>center</code>, in quirks mode only.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of a table. It consists of a 6-digit hexadecimal code as defined in sRGB&nbsp;and is prefixed by&nbsp;'#'. This attribute may be used with one of sixteen predefined color strings&nbsp;:  <table> <tbody> <tr> <td style=""width: 24px; background-color: black;"">&nbsp;</td> <td>black = ""#000000""</td> <td style=""width: 24px; background-color: green;"">&nbsp;</td> <td>green = ""#008000""</td> </tr> <tr> <td style=""width: 24px; background-color: silver;"">&nbsp;</td> <td>silver = ""#C0C0C0""</td> <td style=""width: 24px; background-color: lime;"">&nbsp;</td> <td>lime = ""#00FF00""</td> </tr> <tr> <td style=""width: 24px; background-color: gray;"">&nbsp;</td> <td>gray = ""#808080""</td> <td style=""width: 24px; background-color: olive;"">&nbsp;</td> <td>olive = ""#808000""</td> </tr> <tr> <td style=""width: 24px; background-color: white;"">&nbsp;</td> <td>white = ""#FFFFFF""</td> <td style=""width: 24px; background-color: yellow;"">&nbsp;</td> <td>yellow = ""#FFFF00""</td> </tr> <tr> <td style=""width: 24px; background-color: maroon;"">&nbsp;</td> <td>maroon = ""#800000""</td> <td style=""width: 24px; background-color: navy;"">&nbsp;</td> <td>navy = ""#000080""</td> </tr> <tr> <td style=""width: 24px; background-color: red;"">&nbsp;</td> <td>red = ""#FF0000""</td> <td style=""width: 24px; background-color: blue;"">&nbsp;</td> <td>blue = ""#0000FF""</td> </tr> <tr> <td style=""width: 24px; background-color: purple;"">&nbsp;</td> <td>purple = ""#800080""</td> <td style=""width: 24px; background-color: teal;"">&nbsp;</td> <td>teal = ""#008080""</td> </tr> <tr> <td style=""width: 24px; background-color: fuchsia;"">&nbsp;</td> <td>fuchsia = ""#FF00FF""</td> <td style=""width: 24px; background-color: aqua;"">&nbsp;</td> <td>aqua = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated. The <code>&lt;table&gt;</code> element should be styled using CSS. Use the <code>background-color</code> property &nbsp;in&nbsp;CSS&nbsp;to create an effect that is similar to the <code>bgcolor</code> attribute.</div> </dd> </dl> <dl> <dt><strong><code>border</code></strong> <i> </i></dt> <dd>This integer attribute defines, in pixels, the size of the frame surrounding the table. If set to 0, the <code>frame</code> attribute is set to void.  <div><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated. The <code>&lt;table&gt;</code> element should be styled using CSS. To create&nbsp;an effect similar to the border attribute, the <code>border</code>, <code>border-color</code>, <code>border-width</code> and <code>border-style</code>&nbsp;CSS properties&nbsp; should be used.</div> </dd> </dl> <dl> <dt><strong><code>cellpadding</code></strong> <i> </i></dt> <dd>This attribute defines the space between the content of a cell and  its border, displayed or not. If the cellpadding's length is defined in  pixels, this pixel-sized space will be applied to&nbsp;all four sides of the  cell's content. If the length is defined using a percentage value, the  content will be centered and the total vertical space (top and bottom)  will represent this value. The same is true for the total horizontal  space (left and right).  <div><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated. The <code>&lt;table&gt;</code> element should be styled using CSS. To create an effect similar to the cellpadding attribute, apply the&nbsp;<code>border-collapse</code> property to&nbsp;the <code>&lt;table&gt;</code> element, with its&nbsp;value set to collapse,&nbsp;and&nbsp;the <code>padding</code> property to&nbsp;the&nbsp;<code>&lt;td&gt;</code> element.</div> </dd> </dl> <dl> <dt><strong><code>cellspacing</code></strong> <i> </i></dt> <dd>This attribute defines the size of the space between two cells in  a&nbsp;percentage value or pixels,. The&nbsp;attribute is applied&nbsp;both  horizontally and vertically, to the space between the top of the table  and the cells of the first row, the left of the table and the first  column, the right of the table and the last column and the bottom of the  table and the last row.  <div><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated. The <code>&lt;table&gt;</code> element should be styled using CSS. To create&nbsp;an effect similar to the cellspacing&nbsp;attribute, apply the&nbsp;<code>border-spacing</code> property to&nbsp;the <code>&lt;table&gt;</code> element. Border-spacing does not have any effect if&nbsp;<code>border-collapse</code> is set to collapse.</div> </dd> </dl> <dl> <dt><strong><code>frame</code></strong> <i> </i></dt> <dd>This enumerated attribute defines which side of the frame  surrounding the table must be displayed. It may have the following  values:  <table style=""width: 668px;""> <tbody> <tr> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>above</td> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>below</td> </tr> <tr> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>hsides</td> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>vsides</td> </tr> <tr> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>lhs</td> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>rhs</td> </tr> <tr> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>border</td> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>box</td> </tr> <tr> <td style=""width: 24px; background-color: rgb(224, 224, 224);"">&nbsp;</td> <td>void</td> </tr> </tbody> </table> <div><strong>Usage note:</strong> Do not use this attribute, as it has been deprecated. The <code>&lt;table&gt;</code> element should be styled using CSS. To create&nbsp;an effect similar to the frame attribute, use the <code>border-style</code> and <code>border-width</code> properties.</div> </dd> </dl> <dl> <dt><strong><code>rules</code></strong> <i> </i></dt> <dd>This enumerated attribute defines where rules, i.e. lines, should appear in a table. It can have the following values:  <ul> <li>none, which indicates that no rules will be displayed; it is the default value;</li> <li>groups, which will cause the rules to be displayed between row groups (defined by the <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code> and <code>&lt;tfoot&gt;</code> elements) and between column groups (defined by the <code>&lt;col&gt;</code> and <code>&lt;colgroup&gt;</code> elements) only;</li> <li>rows, which will cause&nbsp;the rules to be displayed between rows;</li> <li>columns, which will cause&nbsp;the rules to be displayed between columns;</li> <li>all, which wil cause&nbsp;the rules to be displayed between rows and columns.</li> </ul> <div><strong>Note</strong>:   <ul> <li>The styling of the rules is browser-dependant and cannot be modified.</li> <li>Do not use this attribute, as it has been deprecated. The&nbsp;rules should be defined and styled using CSS. Apply the <code>border</code> property to&nbsp;the appropriate <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, <code>&lt;tfoot&gt;</code>, <code>&lt;col&gt;</code> or <code>&lt;colgroup&gt;</code> elements.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>summary</code></strong> <i> </i></dt> <dd>This attribute defines an alternative text that summarizes the  content of the table. Typically, it allows visually impaired people&nbsp;who  are browsing the web with&nbsp;a Braille screen, to acquire information about  the table. If the information added by&nbsp;this attribute is also&nbsp;useful to  people who are not visually impaired, consider using the <code>&lt;caption&gt;</code> instead. The summary attribute is not mandatory and may be omitted when a <code>&lt;caption&gt;</code> element fulfills its role.  <div><strong>Usage Note: </strong>Do not use this attribute, as it has been deprecated. Instead, choose one of these methods to add a description of a table:  <ul> <li>Use&nbsp;prose&nbsp;around&nbsp;the table (this method is less&nbsp;semantic).</li> <li>Add a description in the table's <code>&lt;caption&gt;</code> element.</li> <li>Add a description in a <code>&lt;details&gt;</code> element, inside the table's <code>&lt;caption&gt;</code> element.</li> <li>Include the <code>&lt;table&gt;</code> element in a <code>&lt;figure&gt;</code> element and add the description in prose next to it.</li> <li>Include the <code>&lt;table&gt;</code> element in a <code>&lt;figure&gt;</code> element and add the description in prose inside a <code>&lt;figcaption&gt;</code> element.</li> <li>Adjust the table so that a description is not&nbsp;needed (e.g.&nbsp;use&nbsp;<code>&lt;th&gt;</code> and <code>&lt;thead&gt;</code> elements).</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>width</code></strong> <i> </i></dt> <dd>This attribute defines the width of the table. The width may be  defined by pixels or a percentage value. A percentage value will be  defined by the width of the container in which the table is placed.  <div><strong>Usage Note: </strong>Do not use this attribute, as it has been deprecated. The rules should be defined and styled using CSS. Use the <code>width</code> property instead.</div> </dd> </dl> <h2>Examples</h2> <h3>Simple Table</h3> <pre><code>&lt;table&gt;   &lt;tr&gt;     &lt;td&gt;John&lt;/td&gt;     &lt;td&gt;Doe&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Jane&lt;/td&gt;     &lt;td&gt;Doe&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table	HTML
HTML element <code>&lt;tbody&gt;</code>	<small>HTML table content element</small><br />groups one or more <code>&lt;tr&gt;</code> elements as the <b>body of a <code>&lt;table&gt;</code></b> element	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> <i> </i> in HTML 4.01, <i> </i> in HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cell</li> <li><code>center</code>, centering the content in the cell</li> <li><code>right</code>, aligning the content to the right of the cell</li> <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes.</li> </ul> <p>If this attribute is not set, the <code>left</code> value is assumed.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values, use the CSS <code>text-align</code> property on it.</li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell of the column. It is one of the 6-digit hexadecimal code as defined in sRGB, prefixed by a '#'. One of the sixteen predefined color strings may be used:  <table style=""width: 80%;""> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>teal</code> = ""#008080""</td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it is non-standard and only implemented some versions of Microsoft Internet Explorer: the <code>&lt;tbody&gt;</code> element should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code>, on the relevant <code>&lt;td&gt;</code> or <code>&lt;th&gt;</code> elements.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> <i> </i> in HTML 4.01, <i> </i> in HTML5</dt> <dd>This attribute is used to set the character to align the cells in a  column on. Typical values for this include a period (.) when attempting  to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> <i> </i> in HTML 4.01, <i> </i> in HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment characters specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>valign</code></strong> <i> </i> in HTML 4.01, <i> </i> in HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each row of cells of the table header. Possible values for this  attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li> <li><code>middle</code>, which will center the text in the cell;</li> <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS&nbsp;<code>vertical-align</code> property on it.</div> </dd> </dl> <h2>Usage notes</h2> <ul> <li>In conjunction with a preceding <code>&lt;thead&gt;</code> and/or <code>&lt;tfoot&gt;</code> element, the <code>&lt;tbody&gt;</code> element provides additional semantic information for devices such as printers and displays.</li> <li>Of the parent table's child elements, <code>&lt;tbody&gt;</code> represents the content which, when longer than a page, will most likely differ for each page printed; while the content of <code>&lt;thead&gt;</code> and <code>&lt;tfoot&gt;</code> will be the same or similar for each page printed.</li> <li>For displays, <code>&lt;tbody&gt;</code> will enable separate scrolling of the <code>&lt;thead&gt;</code>, <code>&lt;tfoot&gt;</code>, and <code>&lt;caption&gt;</code> elements of the same parent <code>&lt;table&gt;</code> element.</li> <li>Unlike the <code>&lt;thead&gt;</code>, <code>&lt;tfoot&gt;</code>, and <code>&lt;caption&gt;</code> elements, multiple <code>&lt;tbody&gt;</code>  elements are permitted (if consecutive), allowing the rows in long  tables to be divided into different sections, each separately formatted  as needed.</li> </ul> <h2>Examples</h2> <p>Please see the <code>&lt;table&gt;</code> page for examples on <code>&lt;tbody&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody	HTML
HTML element <code>&lt;td&gt;</code>	<small>HTML table content element</small><br />defines a <b>cell of a table</b> that contains data. It participates in the <em>table model</em>	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>abbr</code></strong> Obsolete since HTML5</dt> <dd>This attribute contains a short abbreviated description of the  content of the cell. Some user-agents, such as speech readers, may  present this description before the content itself.  <div><strong>Note: </strong>Do not use this attribute as  it is obsolete in the latest standard: instead either consider starting  the cell content by an independent abbreviated content itself or use the  abbreviated content as the cell content and use the long content as the  description of the cell by putting it in the <strong>title</strong> attribute.</div> </dd> <dt><strong><code>align</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cell</li> <li><code>center</code>, centering the content in the cell</li> <li><code>right</code>, aligning the content to the right of the cell</li> <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes Unimplemented (see bug&nbsp;2212).</li> </ul> <p>If this attribute is not set, the <code>left</code> value is assumed.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code>, or <code>justify</code> values, use the CSS <code>text-align</code> property on it.</li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>axis</code></strong> Obsolete since HTML5</dt> <dd>This attribute contains a list of space-separated strings. Each  string is the ID of a group of cells that this header applies to.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete in the latest standard: instead use the <code>scope</code> attribute.</div> </dd> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell of the  column. It is one of the 6-digit hexadecimal codes as defined in sRGB, prefixed by a '#'. One of the sixteen predefined color strings may be used:  <table style=""width: 80%;""> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>teal</code> = ""#008080""</td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border: 1px solid black;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:</strong> Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: the <code>&lt;td&gt;</code> element should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code> instead.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to set the character to align the cells in a  column. Typical values for this include a period (.) when attempting to  align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> <dt><strong><code>charoff</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment characters specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> <dt><strong><code>colspan</code></strong></dt> <dd>This attribute contains a non-negative integer value that indicates for how many columns the cell extends. Its default value is <code>1</code>. Values higher than 1000 will be considered as incorrect and will be set to the default value (1).</dd> <dt><strong><code>headers</code></strong></dt> <dd>This attribute contains a list of space-separated strings, each corresponding to the <strong>id</strong> attribute of the <code>&lt;th&gt;</code> elements that apply to this element.</dd> <dt><strong><code>rowspan</code></strong></dt> <dd>This attribute contains a non-negative integer value that indicates for how many rows the cell extends. Its default value is <code>1</code>; if its value is set to <code>0</code>, it extends until the end of the table section (<code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, <code>&lt;tfoot&gt;</code>, even if implicitly defined, that the cell belongs to. Values higher than 65534 are clipped down to 65534.</dd> <dt><strong><code>scope</code></strong> Obsolete since HTML5</dt> <dd>&nbsp;</dd> <dt><strong><code>valign</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each row of cells of the table header. Possible values for this  attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the same size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible</li> <li><code>middle</code>, which will center the text in the cell</li> <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS <code>vertical-align</code> property on it.</div> </dd> <dt><strong><code>width</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to define a recommended cell width. &nbsp;Properties&nbsp;cellspacing and cellpadding may add additional space, and element&nbsp;<code>&lt;col&gt;</code>&nbsp;width  may also have some effect. In general, if a column's width is too  narrow to show a particular cell properly, it, and thus the cells in it,  may be widened when displayed.  <div><strong>Note: </strong>Do not use this attribute in the latest standard: instead set the CSS <code>width</code> property.</div> </dd> </dl> <h2>Examples</h2> <p>Please see the <code>&lt;table&gt;</code> page for examples on <code>&lt;td&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td	HTML
HTML element <code>&lt;tfoot&gt;</code>	<small>HTML table content element</small><br />defines a set of <b>rows summarizing the columns</b> of the table	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cell</li> <li><code>center</code>, centering the content in the cell</li> <li><code>right</code>, aligning the content to the right of the cell</li> <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes Unimplemented (see bug&nbsp;2212).</li> </ul> <p>If this attribute is not set,&nbsp; the <code>left</code> value is assumed.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values, use the CSS <code>text-align</code> property on it.</li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell of the column. It is one of the 6-digit hexadecimal code as defined in sRGB, prefixed by a '#'. One of the sixteen predefined color strings may be used:  <table style=""width: 80%;""> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>teal</code> = ""#008080""</td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it is non-standard and only implemented some versions of Microsoft Internet Explorer: the <code>&lt;tfoot&gt;</code> element should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code>, on the relevant <code>&lt;td&gt;</code> or <code>&lt;th&gt;</code> elements.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute is used to set the character to align the cells in a  column on. Typical values for this include a period (.) when attempting  to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment characters specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>valign</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each row of cells of the table header. Possible values for this  attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li> <li><code>middle</code>, which will center the text in the cell;</li> <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS&nbsp;<code>vertical-align</code> property on it.</div> </dd> </dl> <h2>Examples</h2> <p>Please see the <code>&lt;table&gt;</code> page for examples on <code>&lt;tfoot&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot	HTML
HTML element <code>&lt;th&gt;</code>	<small>HTML table content element</small><br />defines a cell as <b>header of a group of table cells</b>. The exact nature of this group is defined by the <code>scope</code> and <code>headers</code> attributes	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>abbr</code></strong> <i> </i> in HTML5</dt> <dd>This attribute contains a short abbreviated description of the  cell's content. A user-agent (e.g.,&nbsp;a speech reader) may be present in  front of&nbsp;the description.  <div><strong>Usage Note: </strong>Do not use this  attribute as it has become&nbsp;obsolete in the latest standard.  Alternatively, you can put the abbreviated description inside the cell  and place the long content in the&nbsp;<strong>title</strong> attribute.</div> </dd> <dt><strong><code>align</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This enumerated attribute specifies how the cell&nbsp;content's horizontal alignment will be handled. Possible values are:  <ul> <li><code>left</code>: The content is aligned to the left of the cell.</li> <li><code>center</code>: The content is centered&nbsp;in the cell.</li> <li><code>right</code>:&nbsp; The content is aligned to the right of the cell.</li> <li><code>justify</code> (with text only): The content&nbsp;is stretched out inside the cell&nbsp;so that it covers its entire width.</li> <li><code>char</code> (with text only): The content is aligned&nbsp;to a character inside the <code>&lt;th&gt;</code> element with minimal offset. This character is&nbsp;defined by the <code>char</code> and <code>charoff</code> attributes.</li> </ul> <p>The default value when this attribute is not specified is <code>left</code>.</p> <div><strong>Usage Note: </strong>Do not use this attribute as it is obsolete in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values, apply&nbsp;the CSS <code>text-align</code> property to the attribute.</li> <li>To achieve the same effect as the <code>char</code> value, give the <code>text-align</code> property the same value you would use for&nbsp;the&nbsp;<code>char</code>.&nbsp;&nbsp;Unimplemented in CSS3.</li> </ul> </div> </dd> <dt><strong><code>axis</code></strong> <i> </i> in HTML5</dt> <dd>This attribute contains a list of space-separated strings. Each string is the <code>id</code> of a group of cells that this header applies&nbsp;to.  <div><strong>Usage Note: </strong>Do not use this attribute as it is obsolete in the latest standard: use the <code>scope</code> attribute instead.</div> </dd> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell in a&nbsp;column. It consists of a 6-digit hexadecimal code as defined in sRGB&nbsp;and is&nbsp;prefixed by&nbsp;'#'. This attribute may be used with one of&nbsp;sixteen predefined color strings:  <table> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>teal</code> = ""#008080""</td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:</strong> Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The <code>&lt;th&gt;</code> element should be styled using CSS. To create a similar effec&nbsp;use the <code>background-color</code> property in&nbsp;CSS.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>The content of a column is aligned to a character in the <code>&lt;th&gt;</code> element. Typical values include a period (.) to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Usage Note: </strong>Do not use this  attribute as it is no longer&nbsp;supported by the latest standard. To  achieve the same effect , you can specify the character as the  first&nbsp;value of&nbsp;the&nbsp;<code>text-align</code> property,&nbsp;&nbsp;Unimplemented in CSS3.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute is used to&nbsp;shift column&nbsp;data to the right of the&nbsp;character specified by&nbsp;the <strong>char</strong> attribute. Its value specifies the length of this shift.  <div><strong>Usage Note: </strong>Do not use this attribute as it is no longer supported&nbsp;by the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>colspan</code></strong></dt> <dd>This attribute contains a positive integer value that indicates over&nbsp;how many columns a cell is&nbsp;extended. Its default value is <code>1.</code> If its value is set to <code>0</code>, the cell is extended&nbsp;to the last element of the <code>&lt;colgroup&gt;</code>. Values higher than 1000 are clipped down to 1000.</dd> <dt><strong><code>headers</code></strong></dt> <dd>This attribute contains&nbsp;a list of space-separated strings, each corresponding to the <code>id</code> attributes of other <code>&lt;th&gt;</code> elements that relate to this element.</dd> <dt><strong><code>rowspan</code></strong></dt> <dd>This attribute contains a positive&nbsp;integer value that indicates over&nbsp;how many rows a cells is extended. Its default value is <code>1.</code> If its value is set to <code>0</code>, the cell is extended to the last element of the&nbsp;table sections (<code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code> or&nbsp;<code>&lt;tfoot&gt;</code>). Values higher than 65534 are clipped down to 65534.</dd> <dt><strong><code>scope</code></strong></dt> <dd>This enumerated attribute defines the cells that the header (defined in the <code>&lt;th&gt;</code>) element relates to. It may have the following values:  <ul> <li><code>row</code>:&nbsp; The header relates to all cells of the row it belongs to.</li> <li><code>col</code>: The header relates to all cells of the column&nbsp;it belongs to.</li> <li><code>rowgroup</code>: The header belongs to a rowgroup and  relates to all of its cells. These cells can be placed to the right or  the left of the header, depending on&nbsp;the value of the <code>dir</code> attribute in&nbsp;the <code>&lt;table&gt;</code> element.</li> <li><code>colgroup</code>: The header belongs to a colgroup and relates to all of its cells.</li> <li><code>auto</code></li> </ul> </dd> <dt><strong><code>valign</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute specifies how a text is vertically aligned inside a cell. Possible values for this attribute are:  <ul> <li><code>baseline</code>: Positions the text near the bottom of the cell&nbsp;and&nbsp;aligns it with the baseline  of the characters instead of the bottom. If characters don't  descend&nbsp;below&nbsp;the baseline, the baseline&nbsp;value achieves the same effect  as <code>bottom</code>.</li> <li><code>bottom</code>: Positions the text near the bottom of the cell.</li> <li><code>middle</code>: Centers the text in the cell.</li> <li>and <code>top</code>: Positions the text near the top&nbsp;of the cell.</li> </ul> <div><strong>Usage Note: </strong>Do not use this attribute as it is no longer supported&nbsp;by&nbsp;the latest standard: use&nbsp;the CSS&nbsp;<code>vertical-align</code> property instead.</div> </dd> <dt><strong><code>width</code></strong> <i> </i> in HTML 4.01</dt> <dd>This attribute is used to define a recommended cell width. &nbsp;Additional space can be added with the&nbsp;cellspacing and cellpadding&nbsp;properties and the width of the <code>&lt;col&gt;</code>&nbsp;element  can also create extra width.&nbsp;But, if a column's width is too narrow to  show a particular cell properly, it will be widened when&nbsp;displayed.  <div><strong>Usage Note: </strong>Do not use this attribute in the latest standard: use the CSS <code>width</code> property instead.</div> </dd> </dl> <h2>Examples</h2> <p>See <code>&lt;table&gt;</code> for examples on <code>&lt;th&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th	HTML
HTML element <code>&lt;thead&gt;</code>	<small>HTML table content element</small><br />defines a set of rows defining the <b>head of the columns of the table</b>	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cell</li> <li><code>center</code>, centering the content in the cell</li> <li><code>right</code>, aligning the content to the right of the cell</li> <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes Unimplemented (see bug&nbsp;2212).</li> </ul> <p>If this attribute is not set,&nbsp; the <code>left</code> value is assumed.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values, use the CSS <code>text-align</code> property on it.</li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> <i> </i></dt> <dd>This attribute defines the background color of each cell of the column. It is one of the 6-digit hexadecimal code as defined in sRGB, prefixed by a '#'. One of the sixteen predefined color strings may be used:  <table style=""width: 80%;""> <tbody> <tr> <td style=""background-color: black; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>black</code> = ""#000000""</td> <td style=""background-color: green; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>green</code> = ""#008000""</td> </tr> <tr> <td style=""background-color: silver; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>silver</code> = ""#C0C0C0""</td> <td style=""background-color: lime; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>lime</code> = ""#00FF00""</td> </tr> <tr> <td style=""background-color: gray; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>gray</code> = ""#808080""</td> <td style=""background-color: olive; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>olive</code> = ""#808000""</td> </tr> <tr> <td style=""background-color: white; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>white</code> = ""#FFFFFF""</td> <td style=""background-color: yellow; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>yellow</code> = ""#FFFF00""</td> </tr> <tr> <td style=""background-color: maroon; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>maroon</code> = ""#800000""</td> <td style=""background-color: navy; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>navy</code> = ""#000080""</td> </tr> <tr> <td style=""background-color: red; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>red</code> = ""#FF0000""</td> <td style=""background-color: blue; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>blue</code> = ""#0000FF""</td> </tr> <tr> <td style=""background-color: purple; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>purple</code> = ""#800080""</td> <td style=""background-color: teal; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>teal</code> = ""#008080""</td> </tr> <tr> <td style=""background-color: fuchsia; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>fuchsia</code> = ""#FF00FF""</td> <td style=""background-color: aqua; width: 24px; height: 24px; border-width: 1px; border-color: black; border-style: solid;"">&nbsp;</td> <td><code>aqua</code> = ""#00FFFF""</td> </tr> </tbody> </table> <div><strong>Usage note:&nbsp;</strong>Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: the <code>&lt;thead&gt;</code> element should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code>, on the relevant <code>&lt;td&gt;</code> or <code>&lt;th&gt;</code> elements.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute is used to set the character to align the cells in a  column on. Typical values for this include a period (.) when attempting  to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment characters specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>valign</code></strong> <i> </i> in HTML 4, <i> </i> in HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each row of cells of the table header. Possible values for this  attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li> <li><code>middle</code>, which will center the text in the cell;</li> <li><code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS&nbsp;<code>vertical-align</code> property on it.</div> </dd> </dl> <h2>Examples</h2> <p>See <code>&lt;table&gt;</code> for examples on<code> &lt;thead&gt;</code>.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead	HTML
HTML element <code>&lt;tr&gt;</code>	<small>HTML table content element</small><br />defines a <b>row of cells</b> in a table. Those can be a mix of <code>&lt;td&gt;</code> and <code>&lt;th&gt;</code> elements	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>align</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:  <ul> <li><code>left</code>, aligning the content to the left of the cells</li> <li><code>center</code>, centering the content in the cells</li> <li><code>right</code>, aligning the content to the right of the cells</li> <li><code>justify</code>, widening the spaces in the textual content so that the content is justified in the cells</li> <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <code>char</code> and <code>charoff</code> attributes Unimplemented (see bug&nbsp;2212)</li> </ul> <p>If this attribute is not set, the parent node's value is inherited.</p> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (not supported) in the latest standard.   <ul> <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values, use the CSS <code>text-align</code> property on it.</li> <li>To achieve the same effect as the <code>char</code> value, in CSS3, you can use the value of the <code>char</code> as the value of the <code>text-align</code> property Unimplemented.</li> </ul> </div> </dd> </dl> <dl> <dt><strong><code>bgcolor</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute defines the background color of each cell of the row. It can be either an hexadecimal <code>#RRGGBB</code> or <code>#RGB</code> value or a color keyword.  <div><strong>Usage note: </strong>the <code>&lt;tr&gt;</code> element should be styled using CSS. To give a similar effect to the <strong>bgcolor</strong> attribute, use the CSS property <code>background-color</code>.</div> </dd> </dl> <dl> <dt><strong><code>char</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to set the character to align the cells in a  column on. Typical values for this include a period (.) when attempting  to align numbers or monetary values. If <code>align</code> is not set to <code>char</code>, this attribute is ignored.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard. To achieve the same effect as the <code>char</code>, in CSS3, you can use the character set using the <code>char</code> attribute as the value of the <code>text-align</code> property Unimplemented.</div> </dd> </dl> <dl> <dt><strong><code>charoff</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute is used to indicate the number of characters to  offset the column data from the alignment characters specified by the <strong>char</strong> attribute.  <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard.</div> </dd> </dl> <dl> <dt><strong><code>valign</code></strong> Deprecated since HTML4.01, Obsolete since HTML5</dt> <dd>This attribute specifies the vertical alignment of the text within  each row of cells of the table header. Possible values for this  attribute are:  <ul> <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the baseline of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li> <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li> <li><code>middle</code>, which will center the text in the cell;</li> <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li> </ul> <div><strong>Note: </strong>Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS&nbsp;<code>vertical-align</code> property on it.</div> </dd> </dl> <h2>Examples</h2> <p>See <code>&lt;table&gt;</code> for examples on <code>&lt;tr&gt;</code>.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr	HTML
HTML element <code>&lt;button&gt;</code>	<small>HTML forms element</small><br />represents a <b>clickable button</b>	"<h2>Attributes</h2> <p>This element's attributes include the global attributes.</p> <dl> <dt><strong><code>autofocus</code></strong> HTML5</dt> <dd>This Boolean attribute lets you specify that the button should have  input focus when the page loads, unless the user overrides it, for  example by typing in a different control. Only one form-associated  element in a document can have this attribute specified.</dd> <dt><strong><code>autocomplete</code></strong> <i> </i></dt> <dd>The use of this attribute on a <code>&lt;button&gt;</code> is nonstandard and Firefox-specific. By default, unlike other browsers, Firefox persists the dynamic disabled state of a <code>&lt;button&gt;</code> across page loads. Setting the value of this attribute to <code>off</code> (i.e. <code>autocomplete=""off""</code>) disables this feature. See bug&nbsp;654072.</dd> <dt><strong><code>disabled</code></strong></dt> <dd> <p>This Boolean attribute indicates that the user cannot interact with  the button. If this attribute is not specified, the button inherits its  setting from the containing element, for example <code>&lt;fieldset&gt;</code>; if there is no containing element with the <strong>disabled</strong> attribute set, then the button is enabled.</p> <p>Firefox will, unlike other browsers, by default, persist the dynamic disabled state of a <code>&lt;button&gt;</code> across page loads. Use the <code>autocomplete</code> attribute to control this feature.</p> </dd> <dt><strong><code>form</code></strong> HTML5</dt> <dd>The form element that the button is associated with (its <em>form owner</em>). The value of the attribute must be the <strong>id</strong> attribute of a <code>&lt;form&gt;</code> element in the same document. If this attribute is not specified, the <code>&lt;button&gt;</code> element will&nbsp;be associated to an&nbsp;ancestor <code>&lt;form&gt;</code>&nbsp;element, if one exists. This attribute enables you to associate&nbsp;<code>&lt;button&gt;</code> elements to&nbsp;<code>&lt;form&gt;</code>&nbsp;elements anywhere&nbsp;within a document, not just as descendants of <code>&lt;form&gt;</code> elements.</dd> <dt><strong><code>formaction</code></strong> HTML5</dt> <dd>The URI of a program that processes the information submitted by the button. If specified, it overrides the <code>action</code> attribute of the button's form owner.</dd> <dt><strong><code>formenctype</code></strong> HTML5</dt> <dd>If the button is a submit button, this attribute specifies the type  of content that is used to submit the form to the server. Possible  values are:  <ul> <li><code>application/x-www-form-urlencoded</code>: The default value if the attribute is not specified.</li> <li><code>multipart/form-data</code>: Use this value if you are using an <code>&lt;input&gt;</code> element with the <code>type</code> attribute set to <code>file</code>.</li> <li><code>text/plain</code></li> </ul> <p>If this attribute is specified, it overrides the <code>enctype</code> attribute of the button's form owner.</p> </dd> <dt><strong><code>formmethod</code></strong> HTML5</dt> <dd>If the button is a submit button, this attribute specifies the HTTP  method that the browser uses to submit the form. Possible values are:  <ul> <li><code>post</code>: The data from the form is included in the body of the form and is sent to the server.</li> <li><code>get</code>: The data from the form are appended to the <strong>form</strong>  attribute URI, with a '?' as a separator, and the resulting URI is sent  to the server. Use this method when the form has no side-effects and  contains only ASCII characters.</li> </ul> <p>If specified, this attribute overrides the <code>method</code> attribute of the button's form owner.</p> </dd> <dt><strong><code>formnovalidate</code></strong> HTML5</dt> <dd>If the button is a submit button, this Boolean attribute specifies  that the form is not to be validated when it is submitted. If this  attribute is specified, it overrides the <code>novalidate</code> attribute of the button's form owner.</dd> <dt><strong><code>formtarget</code></strong> HTML5</dt> <dd>If the button is a submit button, this attribute is a name or  keyword indicating where to display the response that is received after  submitting the form. This is a name of, or keyword for, a <em>browsing context</em> (for example, tab, window, or inline frame). If this attribute is specified, it overrides the <code>target</code> attribute of the button's form owner. The following keywords have special meanings:  <ul> <li><code>_self</code>: Load the response into the same browsing  context as the current one. This value is the default if the attribute  is not specified.</li> <li><code>_blank</code>: Load the response into a new unnamed browsing context.</li> <li><code>_parent</code>: Load the response into the parent browsing  context of the current one. If there is no parent, this option behaves  the same way as <code>_self</code>.</li> <li><code>_top</code>: Load the response into the top-level browsing  context (that is, the browsing context that is an ancestor of the  current one, and has no parent). If there is no parent, this option  behaves the same way as <code>_self</code>.</li> </ul> </dd> <dt><strong><code>name</code></strong></dt> <dd>The name of the button, which is submitted with the form data.</dd> <dt><strong><code>type</code></strong></dt> <dd>The type of the button. Possible values are:  <ul> <li><code>submit</code>: The button submits the form data to the  server. This is the default if the attribute is not specified, or if the  attribute is dynamically changed to an empty or invalid value.</li> <li><code>reset</code>: The button resets all the controls to their initial values.</li> <li><code>button</code>: The button has no default behavior. It can  have client-side scripts associated with the element's events, which are  triggered when the events occur.</li> <li>menu: The button opens a popup menu defined via its designated <code>&lt;menu&gt;</code> element.</li> </ul> </dd> <dt><strong><code>value</code></strong></dt> <dd>The initial value of the button. It defines the value associated  with the button which is submitted with the form data. &nbsp;This value is  passed to the server in params&nbsp;when the form is submitted.</dd> </dl> <h2>Notes</h2> <p><code>&lt;button&gt;</code> elements are much easier to style than <code>&lt;input&gt;</code> elements. You can add inner HTML content (think <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code> or even <code>&lt;img&gt;</code>), and make use of <code>:after</code> and <code>:before</code> pseudo-element to achieve complex rendering while <code>&lt;input&gt;</code> only accepts a text value attribute.</p> <p>IE7 has a bug where when submitting a form with <code>&lt;button type=""submit"" name=""myButton"" value=""foo""&gt;Click me&lt;/button&gt;</code>, the <code>POST</code> data sent will result in <code>myButton=Click me</code> instead of <code>myButton=foo</code>.<br />  IE6 has an even worse bug where submitting a form through a button will  submit ALL buttons of the form, with the same bug as IE7.<br />  This bug has been fixed in IE8.</p> <p>Firefox will add, for accessibility purposes, a small dotted border  on a focused button. This border is declared through CSS, in the browser  stylesheet, but you can override it if necessary to add your own  focused style using <code>button</code><code>::-moz-focus-inner</code> { }</p> <p>Firefox will, unlike other browsers, by default, persist the dynamic disabled state of a <code>&lt;button&gt;</code> across page loads. Setting the value of the <code>autocomplete</code> attribute to <code>off</code> disables this feature. See bug&nbsp;654072.</p> <p>Firefox &lt;35 for Android sets a default <code>background-image</code> gradient on all buttons (see bug&nbsp;763671). This can be disabled using <code>background-image: none</code>.</p> <h3>Clicking and focus</h3> <p>Whether clicking on a <code>&lt;button&gt;</code> causes it to (by default) become focused varies by browser and OS. The results for <code>&lt;input&gt;</code> of <code>type=""button""</code> and <code>type=""submit""</code> were the same.</p> <table> <caption>Does clicking on a <code>&lt;button&gt;</code> give it the focus?</caption> <tbody> <tr> <td>Desktop Browsers</td> <th>Windows 8.1</th> <th>OS X 10.9</th> </tr> <tr> <th>Firefox 30.0</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: red;"">No (even with a <code>tabindex</code>)</td> </tr> <tr> <th>Chrome 35</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: LawnGreen;"">Yes</td> </tr> <tr> <th>Safari 7.0.5</th> <td style=""background-color: silver;"">N/A</td> <td style=""background-color: red;"">No (even with a <code>tabindex</code>)</td> </tr> <tr> <th>Internet Explorer 11</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: silver;"">N/A</td> </tr> <tr> <th>Presto (Opera 12)</th> <td style=""background-color: LawnGreen;"">Yes</td> <td style=""background-color: LawnGreen;"">Yes</td> </tr> </tbody> </table> <table> <caption>Does tapping on a <code>&lt;button&gt;</code> give it the focus?</caption> <tbody> <tr> <td>Mobile Browsers</td> <th>iOS 7.1.2</th> <th>Android 4.4.4</th> </tr> <tr> <th>Safari Mobile</th> <td style=""background-color: red;"">No (even with a <code>tabindex</code>)</td> <td style=""background-color: silver;"">N/A</td> </tr> <tr> <th>Chrome 35</th> <td style=""background-color: red;"">No (even with a <code>tabindex</code>)</td> <td style=""background-color: LawnGreen;"">Yes</td> </tr> </tbody> </table> <h2>Example</h2> <pre><code>&lt;button name=""button""&gt;Click me&lt;/button&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button	HTML
HTML element <code>&lt;datalist&gt;</code>	<small>HTML forms element</small><br />contains a set of <code>&lt;option&gt;</code> elements that represent the <b>values available for other controls</b>	"<h2>Attributes</h2> <p>This element has no other attributes than the global attributes, common to all elements.</p> <h2>Examples</h2> <pre><code>&lt;label&gt;Choose a browser from this list: &lt;input list=""browsers"" name=""myBrowser"" /&gt;&lt;/label&gt; &lt;datalist&gt;   &lt;option value=""Chrome""&gt;   &lt;option value=""Firefox""&gt;   &lt;option value=""Internet Explorer""&gt;   &lt;option value=""Opera""&gt;   &lt;option value=""Safari""&gt;   &lt;option value=""Microsoft Edge""&gt; &lt;/datalist&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist	HTML
HTML element <code>&lt;fieldset&gt;</code>	<small>HTML forms element</small><br />is used to <b>group several controls</b> as well as labels (<code>&lt;label&gt;</code>) within a web form	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>disabled</code></strong> HTML5</dt> <dd>If this Boolean attribute is set, the form controls that are its descendants, except descendants of its first optional <code>&lt;legend&gt;</code>  element, are disabled, i.e., not editable. They won't receive any  browsing events, like mouse clicks or focus-related ones. Often browsers  display such controls as gray.</dd> <dt><strong><code>form</code></strong> HTML5</dt> <dd>This attribute has the value of the <strong>id </strong>attribute of the <code>&lt;form&gt;</code> element it's related to. Its default value is the <strong>id</strong> of the nearest <code>&lt;form&gt;</code> element it is a descendant of.</dd> <dt><strong><code>name</code></strong> HTML5</dt> <dd>The name associated with the group.<br />  &nbsp;  <div>The label for the field set is given by the first <code>&lt;legend&gt;</code> element that is a child of this field set.</div> </dd> </dl> <h2>Examples</h2> <h3>Example #1: Form with fieldset, legend, and label</h3> <pre><code>&lt;form action=""test.php"" method=""post""&gt;   &lt;fieldset&gt;     &lt;legend&gt;Title&lt;/legend&gt;     &lt;input type=""radio""&gt;     &lt;label for=""radio""&gt;Click me&lt;/label&gt;   &lt;/fieldset&gt; &lt;/form&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset	HTML
HTML element <code>&lt;form&gt;</code>	<small>HTML forms element</small><br />document section that contains <b>interactive controls to submit information</b> to a web server	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>accept</code></strong> HTML 4 <i> </i></dt> <dd>A comma-separated list of content types that the server accepts.  <div><strong>Usage note:</strong> This attribute has been removed in HTML5 and should no longer be used. Instead, use the <code>accept</code> attribute of the specific <code>&lt;input&gt;</code> element.</div> </dd> <dt><strong><code>accept-charset</code></strong></dt> <dd>A space- or comma-delimited list of character encodings that the  server accepts. The browser uses them in the order in which they are  listed. The default value, the reserved string <code>""UNKNOWN""</code>, indicates the same encoding as that of the document containing the form element.<br />  In previous versions of HTML, the different character encodings could  be delimited by spaces or commas. In HTML5, only spaces are allowed as  delimiters.</dd> <dt><strong><code>action</code></strong></dt> <dd>The URI of a program that processes the form information. This value can be overridden by a <code>formaction</code> attribute on a <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> element.</dd> <dt><strong><code>autocapitalize</code></strong> <i> </i></dt> <dd>This is a nonstandard attribute used by iOS Safari Mobile which  controls whether and how the text value for textual form control  descendants should be automatically capitalized as it is entered/edited  by the user. If the <code>autocapitalize</code> attribute is specified on an individual form control descendant, it trumps the form-wide <code>autocapitalize</code> setting. The non-deprecated values are available in iOS 5 and later. The default value is <code>sentences</code>. Possible values are:  <ul> <li><code>none</code>: Completely disables automatic capitalization</li> <li><code>sentences</code>: Automatically capitalize the first letter of sentences.</li> <li><code>words</code>: Automatically capitalize the first letter of words.</li> <li><code>characters</code>: Automatically capitalize all characters.</li> <li><code>on</code>: <i> </i> Deprecated since iOS 5.</li> <li><code>off</code>: <i> </i> Deprecated since iOS 5.</li> </ul> </dd> <dt><strong><code>autocomplete</code></strong> HTML5</dt> <dd>Indicates whether input elements can by default have their values  automatically completed by the browser. This setting can be overridden  by an <code>autocomplete</code> attribute on an element belonging to the form. Possible values are:  <ul> <li><code>off</code>: The user must explicitly enter a value into each  field for every use, or the document provides its own auto-completion  method; the browser does not automatically complete entries.</li> <li><code>on</code>: The browser can automatically complete values based on values that the user has previously entered in the form.</li> </ul>  For most modern browsers (including Firefox 38+, Google Chrome 34+, IE  11+) setting the autocomplete attribute will not prevent a browser's  password manager from asking the user if they want to store login fields  (username and password), if the user permits the storage the browser  will autofill the login the next time the user visits the page. See The autocomplete attribute and login fields.</dd> <dd> <div> <p><strong>Note: </strong>If you set <code>autocomplete</code> to <code>off</code> in a form because the document provides its own auto-completion, then you should also set <code>autocomplete</code> to <code>off</code> for each of the form's <code>input</code> elements that the document can auto-complete. For details, see Google Chrome notes.</p> </div> </dd> <dt><strong><code>enctype</code></strong></dt> <dd>When the value of the <code>method</code> attribute is <code>post</code>, enctype is the MIME type of content that is used to submit the form to the server. Possible values are:  <ul> <li><code>application/x-www-form-urlencoded</code>: The default value if the attribute is not specified.</li> <li><code>multipart/form-data</code>: The value used for an <code>&lt;input&gt;</code> element with the <code>type</code> attribute set to ""file"".</li> <li><code>text/plain (HTML5)</code></li> </ul> <p>This value can be overridden by a <code>formenctype</code> attribute on a <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> element.</p> </dd> <dt><strong><code>method</code></strong></dt> <dd>The HTTP method that the browser uses to submit the form. Possible values are:  <ul> <li><code>post</code>: Corresponds to the HTTP POST method ; form data are included in the body of the form and sent to the server.</li> <li><code>get</code>: Corresponds to the HTTP GET method; form data are appended to the <code>action</code>  attribute URI with a '?' as separator, and the resulting URI is sent to  the server. Use this method when the form has no side-effects and  contains only ASCII characters.</li> </ul> <p>This value can be overridden by a <code>formmethod</code> attribute on a <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> element.</p> </dd> <dt><strong><code>name</code></strong></dt> <dd>The name of the form. In HTML 4, its use is deprecated (<code>id</code> should be used instead). It must be unique among the forms in a document and not just an empty string in HTML 5.</dd> <dt><strong><code>novalidate</code></strong> HTML5</dt> <dd>This Boolean attribute indicates that the form is not to be  validated when submitted. If this attribute is not specified (and  therefore the form is validated), this default setting can be overridden  by a <code>formnovalidate</code> attribute on a <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> element belonging to the form.</dd> <dt><strong><code>target</code></strong></dt> <dd>A name or keyword indicating where to display the response that is  received after submitting the form. In HTML 4, this is the name/keyword  for a frame. In HTML5, it is a name/keyword for a <em>browsing context</em> (for example, tab, window, or inline frame). The following keywords have special meanings:  <ul> <li><code>_self</code>: Load the response into the same HTML 4 frame  (or HTML5 browsing context) as the current one. This value is the  default if the attribute is not specified.</li> <li><code>_blank</code>: Load the response into a new unnamed HTML 4 window or HTML5 browsing context.</li> <li><code>_parent</code>: Load the response into the HTML 4 frameset  parent of the current frame, or HTML5 parent browsing context of the  current one. If there is no parent, this option behaves the same way as <code>_self</code>.</li> <li><code>_top</code>: HTML 4: Load the response into the full  original window, and cancel all other frames. HTML5: Load the response  into the top-level browsing context (i.e., the browsing context that is  an ancestor of the current one, and has no parent). If there is no  parent, this option behaves the same way as <code>_self</code>.</li> <li><em>iframename</em>: The response is displayed in a named <code>&lt;iframe&gt;</code>.</li> </ul> <p>HTML5: This value can be overridden by a <code>formtarget</code> attribute on a <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> element.</p> </dd> </dl> <h2>Examples</h2> <h3>HTML Content</h3> <pre><code>&lt;!-- Simple form which will send a GET request --&gt; &lt;form action="""" method=""get""&gt;   &lt;label for=""GET-name""&gt;Name:&lt;/label&gt;   &lt;input type=""text"" name=""name""&gt;   &lt;input type=""submit"" value=""Save""&gt; &lt;/form&gt;  &lt;!-- Simple form which will send a POST request --&gt; &lt;form action="""" method=""post""&gt;   &lt;label for=""POST-name""&gt;Name:&lt;/label&gt;   &lt;input type=""text"" name=""name""&gt;   &lt;input type=""submit"" value=""Save""&gt; &lt;/form&gt;  &lt;!-- Form with fieldset, legend, and label --&gt; &lt;form action="""" method=""post""&gt;   &lt;fieldset&gt;     &lt;legend&gt;Title&lt;/legend&gt;     &lt;input type=""radio"" name=""radio""&gt;     &lt;label for=""radio""&gt;Click me&lt;/label&gt;   &lt;/fieldset&gt; &lt;/form&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form	HTML
HTML element <code>&lt;input&gt;</code>	<small>HTML forms element</small><br />is used to create <b>interactive controls</b> <b>for forms</b> in order to accept data from the user	"<h2>Form <code>&lt;input&gt;</code> types</h2> <p>How an <code>&lt;input&gt;</code> works varies considerably depending on the value of its <code>type</code>  attribute, hence the different types are covered in their own separate  reference pages. If this attributes is not specified, the default type  adopted type is <code>text</code>.</p> <p>The available types are as follows:</p> <ul> <li><code>button</code>: A push button with no default behavior.</li> <li><code>checkbox</code>: A check box. You must use the <strong>value</strong> attribute to define the value submitted by this item. Use the <strong>checked</strong> attribute to indicate whether this item is selected. You can also use the <strong>indeterminate</strong>  attribute (which can only be set programmatically) to indicate that the  checkbox is in an indeterminate state (on most platforms, this draws a  horizontal line across the checkbox).</li> <li><code>color</code>: HTML5 A control for specifying a color. A color picker's UI has no required features other than accepting simple colors as text (more info).</li> <li><code>date</code>: HTML5 A control for entering a date (year, month, and day, with no time).</li> <li><code>datetime-local</code>: HTML5 A control for entering a date and time, with no time zone.</li> <li><code>email</code>: HTML5  A field for editing an e-mail address. The input value is validated to  contain either the empty string or a single valid e-mail address before  submitting. The <code>:valid</code> and <code>:invalid</code> CSS pseudo-classes are applied as appropriate.</li> <li><code>file</code>: A control that lets the user select a file. Use the <strong>accept</strong> attribute to define the types of files that the control can select.</li> <li><code>hidden</code>: A control that is not displayed&nbsp;but whose value is submitted to the server.</li> <li><code>image</code>: A graphical submit button. You must use the <strong>src</strong> attribute to define the source of the image and the <strong>alt</strong> attribute to define alternative text. You can use the <strong>height</strong> and <strong>width</strong> attributes to define the size of the image in pixels.</li> <li><code>month</code>: HTML5 A control for entering a month and year, with no time zone.</li> <li><code>number</code>: HTML5 A control for entering a number.</li> <li><code>password</code>: A single-line text field whose value is obscured. Use the <strong>maxlength</strong> attribute to specify the maximum length of the value that can be entered.   <div><strong>Note</strong>: Any forms involving sensitive  information like passwords (e.g. login forms) should be served over  HTTPS; Firefox now implements multiple mechanisms to warn against  insecure login forms — see Insecure passwords. Other browsers are also implementing similar mechanisms.</div> </li> <li><code>radio</code>: A radio button. You must use the <strong>value</strong> attribute to define the value submitted by this item. Use the <strong>checked</strong> attribute to indicate whether this item is selected by default. Radio buttons that have the same value for the <strong>name</strong> attribute are in the same ""radio button group"". Only one radio button in a group can be selected at a time.</li> <li><code>range</code>: HTML5  A control for entering a number whose exact value is not important.  This type control uses the following default values if the corresponding  attributes are not specified:   <ul> <li><code>min</code>: 0</li> <li><code>max</code>: 100</li> <li><code>value</code>: <code>min</code> + (<code>max -</code>&nbsp;<code>min</code>) / 2, or <code>min</code> if <code>max</code> is less than <code>min</code></li> <li><code>step</code>: 1</li> </ul> </li> <li><code>reset</code>: A button that resets the contents of the form to default values.</li> <li><code>search</code>: HTML5 A single-line text field for entering search strings. Line-breaks are automatically removed from the input value.</li> <li><code>submit</code>: A button that submits the form.</li> <li><code>tel</code>: HTML5  A control for entering a telephone number. Line-breaks are  automatically removed from the input value, but no other syntax is  enforced. You can use attributes such as <strong>pattern</strong> and <strong>maxlength</strong> to restrict values entered in the control. The <code>:valid</code> and <code>:invalid</code> CSS pseudo-classes are applied as appropriate.</li> <li><code>text</code>: A single-line text field. Line-breaks are automatically removed from the input value.</li> <li><code>time</code>: HTML5 A control for entering a time value with no time zone.</li> <li><code>url</code>: HTML5  A field for editing a URL. The input value is validated to contain  either the empty string or a valid absolute URL before submitting. You  can use attributes such as <strong>pattern</strong> and <strong>maxlength</strong> to restrict values entered in the control. The <code>:valid</code> and <code>:invalid</code> CSS pseudo-classes are applied as appropriate.</li> <li><code>week</code>: HTML5 A control for entering a date consisting of a week-year number and a week number with no time zone.</li> </ul> <p>Some input types are now obsolete:</p> <ul> <li><code>datetime</code>: HTML5 <i> </i> <i> </i> A control for entering a date and time (hour, minute, second, and fraction of a second) based on UTC time zone. <strong>This feature has been removed from WHATWG HTML.</strong></li> </ul> <h2>Attributes</h2> <h3>Global <code>&lt;input&gt;</code> attributes</h3> <p>This section lists the attributes available to all form <code>&lt;input&gt;</code> types. Non-global attributes — and global attributes that behave differently when specified on different <code>&lt;input&gt;</code> types — are listed on those types' individual pages.</p> <div> <p><strong>Note</strong>: This includes the global HTML attributes.</p> </div> <dl> <dt><strong><code>type</code></strong></dt> <dd>The type of control to render. See Form &lt;input&gt; types for the individual types, with links to more information about each.</dd> <dt><strong><code>accept</code></strong></dt> <dd>If the value of the <strong>type</strong> attribute is <code>file</code>,  then this attribute will indicate&nbsp;the types of files that the server  accepts,&nbsp;otherwise it will be&nbsp;ignored. The value must be a  comma-separated list of unique content type specifiers:  <ul> <li>A file extension starting with the STOP character (U+002E). (e.g.&nbsp;.jpg, .png, .doc).</li> <li>A valid MIME type with no extensions.</li> <li><code>audio/*</code> representing sound files. HTML5</li> <li><code>video/*</code> representing video files. HTML5</li> <li><code>image/*</code> representing image files. HTML5</li> </ul> </dd> <dt><strong><code>accesskey</code></strong> HTML 4 only, Obsolete since HTML5</dt> <dd>A single-character that the user can press to switch input focus to the control. This attribute is global in HTML5.</dd> <dt><strong><code>mozactionhint</code></strong> <i> </i></dt> <dd>Specifies an ""action hint"" used to determine how to label the enter  key on mobile devices with virtual keyboards. Supported values are <code>go</code>, <code>done</code>, <code>next</code>, <code>search</code>, and <code>send</code>. These automatically get mapped to the appropriate string and are case-insensitive.</dd> <dt><strong><code>autocapitalize</code></strong> <i> </i></dt> <dd>This is a nonstandard attribute used by Chrome  and iOS Safari Mobile, which controls whether and how the text value  should be automatically capitalized as it is entered/edited by the user.  The non-deprecated values are available in iOS 5 and later. Possible  values are:  <ul> <li><code>none</code>: Completely disables automatic capitalisation.</li> <li><code>sentences</code>: Automatically capitalise the first letter of sentences.</li> <li><code>words</code>: Automatically capitalise the first letter of words.</li> <li><code>characters</code>: Automatically capitalise all characters.</li> <li><code>on</code>: <i> </i> Deprecated since iOS 5.</li> <li><code>off</code>: <i> </i> Deprecated since iOS 5.</li> </ul> <code>autocapitalize</code> documentation in the Safari HTML Reference.</dd> <dt><strong><code>autocomplete</code></strong> HTML5</dt> <dd>This attribute indicates whether the value of the control can be automatically completed by the browser.</dd> <dd>Possible values are:  <ul> <li><code>off</code>: The user must explicitly enter a value into this  field for every use, or the document provides its own auto-completion  method. The browser does not automatically complete the entry.</li> <li><code>on</code>: The browser is allowed to automatically complete  the value based on values that the user has entered during previous  uses, however <code>on</code> does not provide any further information about what kind of data the user might be expected to enter.</li> <li><code>name</code>:&nbsp;Full name.</li> <li><code>honorific-prefix:&nbsp;</code>Prefix or title (e.g. ""Mr."", ""Ms."", ""Dr."", ""Mlle"").</li> <li><code>given-name</code>:&nbsp;First name.</li> <li><code>additional-name</code>: Middle name.</li> <li><code>family-name</code>: Last name.</li> <li><code>honorific-suffix</code>:&nbsp;Suffix (e.g. ""Jr."", ""B.Sc."", ""MBASW"", ""II"").</li> <li><code>nickname</code></li> <li><code>email</code></li> <li><code>username</code></li> <li><code>new-password</code>:&nbsp;A new password (e.g. when creating an account or changing a password).</li> <li><code>current-password</code></li> <li><code>organization-title</code>:&nbsp;Job title (e.g. ""Software Engineer"", ""Senior Vice President"", ""Deputy Managing Director"").</li> <li><code>organization</code></li> <li><code>street-address</code></li> <li><code>address-line1</code>,&nbsp;<code>address-line2</code>,&nbsp;<code>address-line3</code>,&nbsp;<code>address-level4</code>,&nbsp;<code>address-level3</code>,&nbsp;<code>address-level2</code>,&nbsp;<code>address-level1</code></li> <li><code>country</code></li> <li><code>country-name</code></li> <li><code>postal-code</code></li> <li><code>cc-name</code>:&nbsp;Full name as given on the payment instrument.</li> <li><code>cc-given-name</code></li> <li><code>cc-additional-name</code></li> <li><code>cc-family-name</code></li> <li><code>cc-number</code>:&nbsp;Code identifying the payment instrument (e.g. the credit card number).</li> <li><code>cc-exp:</code>&nbsp;Expiration date of the payment instrument.</li> <li><code>cc-exp-month</code></li> <li><code>cc-exp-year</code></li> <li><code>cc-csc</code>:&nbsp;Security code for the payment instrument.</li> <li><code>cc-type</code>:&nbsp;Type of payment instrument (e.g.&nbsp;Visa).</li> <li><code>transaction-currency</code></li> <li><code>transaction-amount</code></li> <li><code>language</code>:&nbsp;Preferred language,&nbsp;valid BCP 47 language tag.</li> <li><code>bday</code></li> <li><code>bday-day</code></li> <li><code>bday-month</code></li> <li><code>bday-year</code></li> <li><code>sex</code>:&nbsp;Gender identity (e.g. Female, Fa'afafine), free-form text, no newlines.</li> <li><code>tel</code></li> <li><code>url</code>:&nbsp;Home page or other Web page corresponding to the  company, person, address, or contact information in the other fields  associated with this field.</li> <li><code>photo</code>:&nbsp;Photograph, icon, or other image corresponding  to the company, person, address, or contact information in the other  fields associated with this field.</li> </ul> <p>See the WHATWG Standard for more detailed information.</p> <p>If the <strong>autocomplete</strong> attribute is not specified on an input element&nbsp;then the browser uses the <strong>autocomplete</strong> attribute value of the <code>&lt;input&gt;</code> element's form owner. The form owner is either the <code>form</code> element that this <code>&lt;input&gt;</code> element is a descendant of&nbsp;or the form element whose <strong>id</strong> is specified by the <strong>form</strong> attribute of the input element. For more information, see the <code>autocomplete</code> attribute in <code>&lt;form&gt;</code>.</p> <p>The <strong>autocomplete</strong> attribute also controls whether Firefox will, unlike other browsers, persist the dynamic disabled state and (if applicable) dynamic checkedness of an <code>&lt;input&gt;</code> across page loads. The persistence feature is enabled by default. Setting the value of the <strong>autocomplete</strong> attribute to <code>off</code> disables this feature.&nbsp;This works even when the <strong>autocomplete</strong> attribute would normally not apply to the <code>&lt;input&gt;</code> by virtue of its <strong>type</strong>. See bug&nbsp;654072.</p> <p>For most modern browsers (including Firefox 38+, Google Chrome 34+, IE 11+), setting the <strong>autocomplete</strong> attribute will <em>not</em>  prevent a browser's password manager from asking the user if they want  to store login (username and password) fields and, if they agree, from  autofilling the login the next time the user visits the page. See the autocomplete attribute and login fields.</p> </dd> <dt><strong><code>autofocus</code></strong> HTML5</dt> <dd>This Boolean attribute lets you specify that a form control should  have input focus when the page loads, unless the user overrides it (e.g.  by typing in a different control). Only one form element in a document  can have the <strong>autofocus</strong> attribute, which is a Boolean. It cannot be applied if the <strong>type</strong> attribute is set to <code>hidden</code>  (that is, you cannot automatically set focus to a hidden control). Note  that the focusing of the control may occur before the firing of the <code>DOMContentLoaded</code> event.</dd> <dt><strong><code>capture</code></strong></dt> <dd> <p>When the value of the <strong>type</strong> attribute is <code>file</code>, the presence of this Boolean attribute indicates that capture of media directly from the device's environment using a media capture mechanism is preferred.</p> </dd> <dt><strong><code>checked</code></strong></dt> <dd> <p>When the value of the <strong>type</strong> attribute is <code>radio</code> or <code>checkbox</code>, the presence of this Boolean attribute indicates that the control is selected by default,&nbsp;otherwise it is ignored.</p> <p>Unlike other browsers, Firefox will by default persist the dynamic checked state of an <code>&lt;input&gt;</code> across page loads. Use the <code>autocomplete</code> attribute to control this feature.</p> </dd> <dt><strong><code>disabled</code></strong></dt> <dd> <p>This Boolean attribute indicates that the form control is not available for interaction. In particular, the <code>click</code> event will not be dispatched on disabled controls. Also, a disabled control's value isn't submitted with the form.</p> <p>Unlike other browsers, Firefox will by default persist the dynamic disabled state of an <code>&lt;input&gt;</code> across page loads. Use the <code>autocomplete</code> attribute to control this feature.</p> </dd> <dt><strong><code>form</code></strong> HTML5</dt> <dd>The form element that the input element is associated with (its <em>form owner</em>). The value of the attribute must be an <strong>id</strong> of a <code>&lt;form&gt;</code> element in the same document. If this attribute is not specified, this <code>&lt;input&gt;</code> element must be a descendant of a <code>&lt;form&gt;</code> element. This attribute enables you to place <code>&lt;input&gt;</code>  elements anywhere within a document, not just as descendants of their  form elements. An input can only be associated with one form.</dd> <dt><strong><code>formaction</code></strong> HTML5</dt> <dd>The URI of a program that processes the information submitted by  the input element, if it is a submit button or image. If specified, it  overrides the <code>action</code> attribute of the element's form owner.</dd> <dt><strong><code>formenctype</code></strong> HTML5</dt> <dd>If the input element is a submit button or image, this attribute  specifies the type of content that is used to submit the form to the  server. Possible values are:  <ul> <li><code>application/x-www-form-urlencoded</code>: The default value if the attribute is not specified.</li> <li><code>multipart/form-data</code>: Use this value if you are using an <code>&lt;input&gt;</code> element with the <code>type</code> attribute set to <code>file</code>.</li> <li><code>text/plain</code></li> </ul> <p>If this attribute is specified, it overrides the <code>enctype</code> attribute of the element's form owner.</p> </dd> <dt><strong><code>formmethod</code></strong> HTML5</dt> <dd>If the input element is a submit button or image, this attribute  specifies the HTTP method that the browser uses to submit the form.  Possible values are:  <ul> <li><code>post</code>: The data from the form is included in the body of the form and is sent to the server.</li> <li><code>get</code>: The data from the form are appended to the <strong>form</strong>  attribute URI, with a '?' as a separator, and the resulting URI is sent  to the server. Use this method when the form has no side-effects and  contains only ASCII characters.</li> </ul> <p>If specified, this attribute overrides the <code>method</code> attribute of the element's form owner.</p> </dd> <dt><strong><code>formnovalidate</code></strong> HTML5</dt> <dd>If the input element is a submit button or image, this Boolean  attribute specifies that the form is not to be validated when it is  submitted. If this attribute is specified, it overrides the <code>novalidate</code> attribute of the element's form owner.</dd> <dt><strong><code>formtarget</code></strong> HTML5</dt> <dd>If the input element is a submit button or image, this attribute is  a name or keyword indicating where to display the response that is  received after submitting the form. This is a name of, or keyword for, a  <em>browsing context</em> (e.g. tab, window, or inline frame). If this attribute is specified, it overrides the <code>target</code> attribute of the elements's form owner. The following keywords have special meanings:  <ul> <li>_<code>self</code>: Load the response into the same browsing  context as the current one. This value is the default if the attribute  is not specified.</li> <li><code>_blank</code>: Load the response into a new unnamed browsing context.</li> <li><code>_parent</code>: Load the response into the parent browsing  context of the current one. If there is no parent, this option behaves  the same way as <code>_self</code>.</li> <li><code>_top</code>: Load the response into the top-level browsing  context (i.e.&nbsp;the browsing context that is an ancestor of the current  one, and has no parent). If there is no parent, this option behaves the  same way as <code>_self</code>.</li> </ul> </dd> <dt><strong><code>height</code></strong> HTML5</dt> <dd>If the value of the <strong>type</strong> attribute is <code>image</code>, this attribute defines the height of the image displayed for the button.</dd> <dt><strong><code>inputmode</code></strong> HTML5</dt> <dd>A hint to the browser for which keyboard to display. This attribute applies when the value of the <strong>type</strong> attribute is text, password, email, or url. Possible values are:  <ul> <li><code>verbatim</code>: Alphanumeric, non-prose content such as usernames and passwords.</li> <li><code>latin</code>: Latin-script input in the user's preferred  language with typing aids such as text prediction enabled. For  human-to-computer communication such as search boxes.</li> <li><code>latin-name</code>: As <em>latin</em>, but for human names.</li> <li><code>latin-prose</code>: As <em>latin</em>, but with more aggressive typing aids. For human-to-human communication such as instant messaging or email.</li> <li><code>full-width-latin</code>: As <em>latin-prose</em>, but for the user's secondary languages.</li> <li><code>kana</code>: Kana or romaji input, typically hiragana input,  using full-width characters, with support for converting to kanji.  Intended for Japanese text input.</li> <li><code>katakana</code>: Katakana input, using full-width characters, with support for converting to kanji. Intended for Japanese text input.</li> <li><code>numeric</code>: Numeric input, including keys for the digits  0 to 9, the user's preferred thousands separator character, and the  character for indicating negative numbers. Intended for numeric codes  (e.g. credit card numbers). For actual numbers, prefer using &lt;input  type=""number""&gt;</li> <li><code>tel</code>: Telephone input, including asterisk and pound key. Use &lt;input type=""tel""&gt; if possible instead.</li> <li><code>email</code>: Email input. Use &lt;input type=""email""&gt; if possible instead.</li> <li><code>url</code>: URL input. Use &lt;input type=""url""&gt; if possible instead.</li> </ul> </dd> <dt><strong><code>list</code></strong> HTML5</dt> <dd>Identifies a list of pre-defined options to suggest to the user. The value must be the <strong>id</strong> of a <code>&lt;datalist&gt;</code>  element in the same document. The browser displays only options that  are valid values for this input element. This attribute is ignored when  the <strong>type</strong> attribute's value is <code>hidden</code>, <code>checkbox</code>, <code>radio</code>, <code>file</code>, or a button type.</dd> <dt><strong><code>max</code></strong> HTML5</dt> <dd>The maximum (numeric or date-time) value for this item, which must not be less than its minimum (<strong>min</strong> attribute) value.</dd> <dt><strong><code>maxlength</code></strong></dt> <dd>If the value of the <strong>type</strong> attribute is <code>text</code>, <code>email</code>,<code> search</code>, <code>password</code>, <code>tel</code>, or <code>url</code>,  this attribute specifies the maximum number of characters (in Unicode  code points) that the user can enter.&nbsp;For other control types, it is  ignored. It can exceed the value of the <strong>size</strong> attribute.  If it is not specified, the user can enter an unlimited number of  characters. Specifying a negative number results in the default behavior  (i.e.&nbsp;the user can enter an unlimited number of characters). The  constraint is evaluated only when the value of the attribute has been  changed.</dd> <dt><strong><code>min</code></strong> HTML5</dt> <dd>The minimum (numeric or date-time) value for this item, which must not be greater than its maximum (<strong>max</strong> attribute) value.</dd> <dt><strong><code>minlength</code></strong> HTML5</dt> <dd>If the value of the <strong>type</strong> attribute is <code>text</code>, <code>email</code>,<code> search</code>, <code>password</code>, <code>tel</code>, or <code>url</code>,  this attribute specifies the minimum number of characters (in Unicode  code points) that the user can enter.&nbsp;For other control types, it is  ignored.</dd> <dt><strong><code>multiple</code></strong> HTML5</dt> <dd>This Boolean attribute indicates whether the user can enter more than one value. This attribute applies when the <strong>type</strong> attribute is set to <code>email</code>&nbsp;or <code>file</code>,&nbsp;otherwise it is ignored.</dd> <dt><strong><code>name</code></strong></dt> <dd>The name of the control, which is submitted with the form data.</dd> <dt><strong><code>pattern</code></strong> HTML5</dt> <dd>A regular expression that the control's value is checked against.  The pattern must match the entire value, not just some subset. Use the <strong>title</strong> attribute to describe the pattern to help the user. This attribute applies when the value of the <strong>type</strong> attribute is <code>text</code>, <code>search</code>, <code>tel</code>, <code>url</code>, <code>email</code>, or <code>password</code>,&nbsp;otherwise it is ignored. The regular expression language is the same as JavaScript <code>RegExp</code> algorithm, with the <code>'u'</code>  parameter that makes it treat the pattern as a sequence of unicode code  points. The pattern is not surrounded by forward slashes.</dd> <dt><strong><code>placeholder</code></strong> HTML5</dt> <dd>A hint to the user of what can be entered in the control . The  placeholder text must not contain carriage returns or line-feeds.&nbsp;  <div><strong>Note:</strong> Do not use the <code>placeholder</code> attribute instead of a <code>&lt;label&gt;</code> element, their purposes are different. The <code>&lt;label&gt;</code> attribute describes the role of the form element (i.e.&nbsp;it indicates what kind of information is expected), and the <code>placeholder</code> attribute is a hint about the format that the content should take. There are cases in which the <code>placeholder</code> attribute is never displayed to the user, so the form must be understandable without it.</div> </dd> <dt><strong><code>readonly</code></strong> HTML5</dt> <dd>This attribute indicates that the user cannot modify the value of  the control. The value of the attribute is irrelevant. If you need  read-write access to the input value, <em>do not</em> add the ""<strong>readonly</strong>"" attribute.&nbsp;It is ignored if the value of the <strong>type</strong> attribute is <code>hidden</code>, <code>range</code>, <code>color</code>, <code>checkbox</code>, <code>radio</code>, <code>file</code>, or a button type (such as <code>button</code> or <code>submit</code>).</dd> <dt><strong><code>required</code></strong> HTML5</dt> <dd>This attribute specifies that the user must fill in a value before submitting a form. It cannot be used when the <strong>type</strong> attribute is <code>hidden</code>, <code>image</code>, or a button type (<code>submit</code>, <code>reset</code>, or <code>button</code>). The <code>:optional</code> and <code>:required</code> CSS pseudo-classes will be applied to the field as appropriate.</dd> <dt><strong><code>selectionDirection</code></strong> HTML5</dt> <dd>The direction in which selection occurred. This is <code>""forward""</code> if the selection was made from left-to-right in an LTR locale or right-to-left in an RTL locale, or <code>""backward""</code>  if the selection was made in the opposite direction. On platforms on  which it's possible this value isn't known, the value can be <code>""none""</code>; for example, on macOS, the default direction is <code>""none""</code>,  then as the user begins to modify the selection using the keyboard,  this will change to reflect the direction in which the selection is  expanding.</dd> <dt><strong><code>selectionEnd</code></strong></dt> <dd>The offset into the element's text content of the last selected  character. If there's no selection, this value indicates the offset to  the character following the current text input cursor position (that is,  the position the next character typed would occupy).</dd> <dt><strong><code>selectionStart</code></strong></dt> <dd>The offset into the element's text content of the first selected  character. If there's no selection, this value indicates the offset to  the character following the current text input cursor position (that is,  the position the next character typed would occupy).</dd> <dt><strong><code>size</code></strong></dt> <dd>The initial size of the control. This value is in pixels unless the value of the <strong>type</strong> attribute is <code>text</code> or <code>password</code>, in which case&nbsp;it is an integer number of characters. Starting in HTML5, this attribute applies only when the <strong>type</strong> attribute is set to <code>text</code>, <code>search</code>, <code>tel</code>, <code>url</code>, <code>email</code>, or <code>password</code>,  otherwise it is ignored. In addition, the size must be greater than  zero. If you do not specify a size, a default value of 20 is used. HTML5  simply states&nbsp;""the user agent should ensure that at least that many  characters are visible"", but different characters can have different  widths in certain&nbsp;fonts.&nbsp;In some browsers, a certain string with <em>x</em> characters will not be entirely visible even if size is defined to at least <em>x</em>.</dd> <dt><strong><code>spellcheck</code></strong> HTML5</dt> <dd>Setting the value of this attribute to <code>true</code> indicates that the element needs to have its spelling and grammar checked. The value <code>default</code> indicates that the element is to act according to a default behavior, possibly based on the parent element's own <code>spellcheck</code> value. The value <code>false</code> indicates that the element should not be checked.</dd> <dt><strong><code>src</code></strong></dt> <dd>If the value of the <strong>type</strong> attribute is <code>image</code>,  this attribute specifies a URI for the location of an image to display  on the graphical submit button,&nbsp;otherwise it is ignored.</dd> <dt><strong><code>step</code></strong> HTML5</dt> <dd>Works with the <strong>min</strong> and <strong>max</strong> attributes to limit the increments at which a numeric or date-time value can be set. It can be the string <code>any</code> or a positive floating point number. If this attribute is not set to <code>any</code>, the control accepts only values at multiples of the step value greater than the minimum.</dd> <dt><strong><code>tabindex</code></strong> element-specific in HTML 4, global in HTML5</dt> <dd>The position of the element in the tabbing navigation order for the current document.</dd> <dt><strong><code>usemap</code></strong> HTML 4 only, Obsolete since HTML5</dt> <dd>The name of a <code>&lt;map&gt;</code> element to be used as an image map.</dd> <dt><strong><code>value</code></strong></dt> <dd>The initial value of the control. This attribute is optional except when the value of the <strong>type</strong> attribute is <code>radio</code> or <code>checkbox</code>.<br />  Note that when reloading the page, Gecko and IE will ignore the value specified in the HTML source, if the value was changed before the reload.</dd> <dt><strong><code>width</code></strong> HTML5</dt> <dd>If the value of the <strong>type</strong> attribute is <code>image</code>, this attribute defines the width of the image displayed for the button.</dd> </dl> <h3>Non-standard <code>&lt;input&gt;</code> attributes</h3> <dl> <dt><strong><code>autocorrect</code></strong> <i> </i></dt> <dd>This is a non-standard attribute supported by Safari that is used  to control whether autocorrection should be enabled when the user is  entering/editing the text value of the <code>&lt;input&gt;</code>. Possible attribute values are:  <ul> <li><code>on</code>: Enable autocorrection.</li> <li><code>off</code>: Disable autocorrection.</li> </ul> <code>autocorrect</code> documentation in the Safari HTML Reference.</dd> <dt><strong><code>incremental</code></strong> <i> </i></dt> <dd>This is a nonstandard attribute supported by WebKit (Safari) and Blink (Chrome) that only applies when the <strong>type</strong> is <code>search</code>. If the attribute is present, regardless of what its value is, the <code>&lt;input&gt;</code> fires <code>search</code>  events as the user edits the text value. The event is only fired after  an implementation-defined timeout has elapsed since the most recent  keystroke, and new keystrokes reset the timeout. In other words, the  event firing is debounced. If the attribute is absent, the <code>search</code> event is only fired when the user explicitly initiates a search (e.g. by pressing the Enter key while within field). <code>incremental</code> documentation in the Safari HTML Reference</dd> <dt><strong><code>results</code></strong> <i> </i></dt> <dd>This is a nonstandard attribute supported by Safari that only applies when the <strong>type</strong> is <code>search</code>. It is used to control the maximum number of entries that should be displayed in the <code>&lt;input&gt;</code>'s native dropdown list of past search queries. Its value should be a nonnegative decimal integer.</dd> <dt><strong><code>webkitdirectory</code></strong>&nbsp;<i> </i></dt> <dd>This Boolean attribute indicates if the selector used when the <strong>type</strong> attribute is <code>file</code> has to allow for the selection of directories only.</dd> <dt><strong><code>x-moz-errormessage</code></strong> <i> </i></dt> <dd>This Mozilla extension allows you to specify the error message to display when a field doesn't successfully validate.</dd> </dl> <h2>Examples</h2> <p>You can find multiple examples of <code>&lt;input&gt;</code> element usage on the pages covering each individual type — see Form &lt;input&gt; types, and also see the Live example at the top of the article.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input	HTML
HTML element <code>&lt;label&gt;</code>	<small>HTML forms element</small><br />represents a caption for an item in a user interface	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>for</code></strong></dt> <dd>The ID of a labelable  form-related element in the same document as the label element. The  first such element in the document with an ID matching the value of the <code>for</code> attribute is the <em>labeled control </em>for this label element.<br />  &nbsp;  <div>A label element can have both a <code>for</code> attribute and a contained control element, as long as the <code>for</code> attribute points to the contained control element.</div> </dd> <dt><strong><code>form</code></strong> HTML5 <i> </i></dt> <dd>The form element with which the label is associated (its <em>form owner</em>). If specified, the value of the attribute is the ID of a <code>&lt;form&gt;</code>  element in the same document. This lets you place label elements  anywhere within a document, not just as descendants of their form  elements.<br />  &nbsp;  <div>This content attribute was removed from the HTML specification on April 28, 2016. However, scripts still have access to a read-only <code>HTMLLabelElement.form</code> attribute; it returns the form of which the label's associated control is a member, or <code>null</code> if the label is not associated with a control or the control isn't part of a form.</div> </dd> </dl> <h2>Usage notes</h2> <ul> <li>A <code>&lt;label&gt;</code> can be associated with a control either by placing the control element inside the <code>&lt;label&gt;</code> element, or by using the <code>for</code> attribute. Such a control is called the <em>labeled control</em> of the label element. One input can be associated with multiple labels.</li> <li>Labels are not themselves directly associated with forms. They are  only indirectly associated with forms through the controls with which  they're associated.</li> </ul> <h2>Examples</h2> <h3>Simple label example</h3> <pre><code>&lt;label&gt;Click me &lt;input type=""text""&gt;&lt;/label&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label	HTML
HTML element <code>&lt;legend&gt;</code>	<small>HTML forms element</small><br>represents a caption for the content of its parent <code>&lt;fieldset&gt;</code>	<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Examples</h2> <p>See <code>&lt;form&gt;</code> for examples on <code>&lt;legend&gt;</code>.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend	HTML
HTML element <code>&lt;meter&gt;</code>	<small>HTML forms element</small><br />represents either a <b>scalar value</b> within a known range or a <b>fractional value</b>	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>value</code></strong></dt> <dd>The current numeric value. This must be between the minimum and maximum values (<code>min</code> attribute and <code>max</code>  attribute) if they are specified. If unspecified or malformed, the  value is 0. If specified, but not within the range given by the <code>min</code> attribute and <code>max</code> attribute, the value is equal to the nearest end of the range.  <div><strong>Usage note: </strong>Unless the <code>value</code> attribute is between <code>0</code> and <code>1</code> (inclusive), the <code>min</code> and <code>max</code> attributes should define the range so that the <code>value</code> attribute's value is within it.</div> </dd> <dt><strong><code>min</code></strong></dt> <dd>The lower numeric bound of the measured range. This must be less than the maximum value (<code>max</code> attribute), if specified. If unspecified, the minimum value is 0.</dd> <dt><strong><code>max</code></strong></dt> <dd>The upper numeric bound of the measured range. This must be greater than the minimum value (<code>min</code> attribute), if specified. If unspecified, the maximum value is 1.</dd> <dt><strong><code>low</code></strong></dt> <dd>The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (<code>min</code> attribute), and it also must be less than the high value and maximum value (<code>high</code> attribute and <code>max</code> attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the <code>low</code> value is equal to the minimum value.</dd> <dt><strong><code>high</code></strong></dt> <dd>The lower numeric bound of the high end of the measured range. This must be less than the maximum value (<code>max</code> attribute), and it also must be greater than the low value and minimum value (<code>low</code> attribute and <strong>min</strong> attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the <code>high</code> value is equal to the maximum value.</dd> <dt><strong><code>optimum</code></strong></dt> <dd>This attribute indicates the optimal numeric value. It must be within the range (as defined by the <code>min</code> attribute and <code>max</code> attribute). When used with the <code>low</code> attribute and <code>high</code> attribute, it gives an indication where along the range is considered preferable. For example, if it is between the <code>min</code> attribute and the <code>low</code> attribute, then the lower range is considered preferred.</dd> <dt><strong><code>form</code></strong></dt> <dd>This attribute associates the element with a <code>form</code> element that has ownership of the <code>meter</code> element. For example, a <code>meter</code> might be displaying a range corresponding to an <code>input</code> element of <code>type</code> <em>number</em>. This attribute is only used if the <code>meter</code> element is being used as a form-associated element; even then, it may be omitted if the element appears as a descendant of a <code>form</code> element.</dd> </dl> <h2>Examples</h2> <h3>Simple example</h3> <h4>HTML content</h4> <pre><code>&lt;p&gt;Heat the oven to &lt;meter min=""200"" max=""500""   value=""350""&gt;350 degrees&lt;/meter&gt;.&lt;/p&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter	HTML
HTML element <code>&lt;optgroup&gt;</code>	<small>HTML forms element</small><br />creates a <b>grouping of options within a <code>&lt;select&gt;</code></b> element	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>disabled</code></strong></dt> <dd>If this Boolean attribute is set, none of the items in this option  group is selectable. Often browsers grey out such control and it won't  receive any browsing events, like mouse clicks or focus-related ones.</dd> <dt><strong><code>label</code></strong></dt> <dd>The name of the group of options, which the browser can use when  labeling the options in the user interface. This attribute is mandatory  if this element is used.</dd> </dl> <h2>Example</h2> <pre><code>&lt;select&gt;   &lt;optgroup label=""Group 1""&gt;     &lt;option&gt;Option 1.1&lt;/option&gt;   &lt;/optgroup&gt;    &lt;optgroup label=""Group 2""&gt;     &lt;option&gt;Option 2.1&lt;/option&gt;     &lt;option&gt;Option 2.2&lt;/option&gt;   &lt;/optgroup&gt;   &lt;optgroup label=""Group 3"" disabled&gt;     &lt;option&gt;Option 3.1&lt;/option&gt;     &lt;option&gt;Option 3.2&lt;/option&gt;     &lt;option&gt;Option 3.3&lt;/option&gt;   &lt;/optgroup&gt; &lt;/select&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup	HTML
HTML element <code>&lt;option&gt;</code>	<small>HTML forms element</small><br />is used to define an <b>item contained in a <code>&lt;select&gt;</code></b>, an <code>&lt;optgroup&gt;</code>, or a <code>&lt;datalist&gt;</code> element. As such, this can represent menu items in popups and other lists of items in an HTML document	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>disabled</code></strong></dt> <dd>If this Boolean attribute is set, this option is not checkable.  Often browsers grey out such control and it won't receive any browsing  event, like mouse clicks or focus-related ones. If this attribute is not  set, the element can still be disabled if one its ancestors is a  disabled <code>&lt;optgroup&gt;</code> element.</dd> <dt><strong><code>label</code></strong></dt> <dd>This attribute is text for the label indicating the meaning of the option. If the <code>label</code> attribute isn't defined, its value is that of the element text content.</dd> <dt><strong><code>selected</code></strong></dt> <dd>If present, this Boolean attribute indicates that the option is initially selected. If the <code>&lt;option&gt;</code> element is the descendant of a <code>&lt;select&gt;</code> element whose <code>multiple</code> attribute is not set, only one single <code>&lt;option&gt;</code> of this <code>&lt;select&gt;</code> element may have the <code>selected</code> attribute.</dd> <dt><strong><code>value</code></strong></dt> <dd>The content of this attribute represents the value to be submitted  with the form, should this option be selected.&nbsp;If this attribute is  omitted, the value is taken from the text content of the option element.</dd> </dl> <h2>Examples</h2> <p>See <code>&lt;select&gt;</code> for examples.</p>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option	HTML
HTML element <code>&lt;output&gt;</code>	<small>HTML forms element</small><br /><b>result </b>of a calculation or user action	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>for</code></strong></dt> <dd>A list of IDs of other elements, indicating that those elements  contributed input values to (or otherwise affected) the calculation.</dd> <dt><strong><code>form</code></strong></dt> <dd>The form element that this element is associated with (its ""form  owner""). The value of the attribute must be an ID of a form element in  the same document. If this attribute is not specified, the output  element must be a descendant of a form element. This attribute enables  you to place output elements anywhere within a document, not just as  descendants of their form elements.</dd> <dt><strong><code>name</code></strong></dt> <dd>The name of the element.</dd> </dl> <h2>Example</h2> <pre><code>&lt;form oninput=""result.value=parseInt(a.value)+parseInt(b.value)""&gt;     &lt;input type=""range"" name=""b"" value=""50"" /&gt; +     &lt;input type=""number"" name=""a"" value=""10"" /&gt; =     &lt;output name=""result""&gt;60&lt;/output&gt; &lt;/form&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output	HTML
HTML element <code>&lt;progress&gt;</code>	<small>HTML forms element</small><br />represents the <b>completion progress</b> of a task, typically displayed as a progress bar	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>max</code></strong></dt> <dd>This attribute describes how much work the task indicated by the <code>progress</code> element requires. The <code>max</code> attribute, if present, must have a value greater than zero and be a valid floating point number. The default value is 1.</dd> <dt><strong><code>value</code></strong></dt> <dd>This attribute specifies how much of the task that has been completed. It must be a valid floating point number between 0 and <code>max</code>, or between 0 and 1 if <code>max</code> is omitted. If there is no <code>value</code>  attribute, the progress bar is indeterminate; this indicates that an  activity is ongoing with no indication of how long it is expected to  take.</dd> </dl> <p>Note that the minimum value is always 0 and the min attribute is not allowed for the progress element. You can use the <code>-moz-orient</code> CSS property to specify whether the progress bar should be rendered horizontally (the default) or vertically. The <code>:indeterminate</code> pseudo-class can be used to match against indeterminate progress bars.</p> <h2>Examples</h2> <pre><code>&lt;progress value=""70"" max=""100""&gt;70 %&lt;/progress&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress	HTML
HTML element <code>&lt;select&gt;</code>	<small>HTML forms element</small><br /><b>control</b> that provides a <b>menu of options</b>	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>autofocus</code></strong> HTML5</dt> <dd>This attribute lets you specify that a form control should have  input focus when the page loads, unless the user overrides it, for  example by typing in a different control. Only one form element in a  document can have the <code>autofocus</code> attribute, which is a Boolean.</dd> <dt><strong><code>disabled</code></strong></dt> <dd>This Boolean attribute indicates that the user cannot interact with  the control. If this attribute is not specified, the control inherits  its setting from the containing element, for example <code>fieldset</code>; if there is no containing element with the <code>disabled</code> attribute set, then the control is enabled.</dd> <dt><strong><code>form</code></strong> HTML5</dt> <dd>This attribute lets you specify the form element to&nbsp;which&nbsp;the  select element is associated&nbsp;(that is, its ""form owner""). If this  attribute is specified, its value must be the ID of a form element in  the same document. This enables you to place select elements anywhere  within a document, not just as descendants of their form elements.</dd> <dt><strong><code>multiple</code></strong></dt> <dd>This Boolean attribute indicates that multiple options can be  selected in the list. If it is not specified, then only one option can  be selected at a time.</dd> <dt><strong><code>name</code></strong></dt> <dd>This attribute is used to specify the name of the control.</dd> <dt><strong><code>required</code></strong> HTML5</dt> <dd>A Boolean attribute indicating that an option with a non-empty string value must be selected.</dd> <dt><strong><code>size</code></strong></dt> <dd>If the control is presented as a scrolled list box, this attribute  represents the number of rows in the list that should be visible at one  time. Browsers are not required to present a select element as a  scrolled list box. The default value is 0.</dd> </dl> <div><strong>Firefox note:</strong> According to the HTML5  specification, the default value for size should be 1; however, in  practice, this has been found to break some web sites, and no other  browser currently does that, so Mozilla have opted to continue to return  0 for the time being with Firefox.</div> <h2>Examples</h2> <pre><code>&lt;!-- The second value will be selected initially --&gt; &lt;select name=""select""&gt; &lt;!--Supplement an id here instead of using 'name'--&gt;   &lt;option value=""value1""&gt;Value 1&lt;/option&gt;    &lt;option value=""value2"" selected&gt;Value 2&lt;/option&gt;   &lt;option value=""value3""&gt;Value 3&lt;/option&gt; &lt;/select&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select	HTML
HTML element <code>&lt;textarea&gt;</code>	<small>HTML forms element</small><br />represents a <b>multi-line</b> plain-<b>text</b> editing control	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>autocapitalize</code></strong> <i> </i></dt> <dd>This is a nonstandard attribute supported by WebKit on iOS  (therefore nearly all browsers running on iOS, including Safari,  Firefox, and Chrome) which controls whether and how the text value  should be automatically capitalized as it is entered/edited by the user.  The non-deprecated values are available in iOS 5 and later. Possible  values are:  <ul> <li><code>none</code>: Completely disables automatic capitalization</li> <li><code>sentences</code>: Automatically capitalize the first letter of sentences.</li> <li><code>words</code>: Automatically capitalize the first letter of words.</li> <li><code>characters</code>: Automatically capitalize all characters.</li> <li><code>on</code>: <i> </i> Deprecated since iOS 5.</li> <li><code>off</code>: <i> </i> Deprecated since iOS 5.</li> </ul> </dd> <dt><strong><code>autocomplete</code></strong> HTML5</dt> <dd>This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:  <ul> <li><code>off</code>: The user must explicitly enter a value into this  field for every use, or the document provides its own auto-completion  method; the browser does not automatically complete the entry.</li> <li><code>on</code>: The browser can automatically complete the value based on values that the user has entered during previous uses.</li> </ul> <p>If the <strong>autocomplete</strong> attribute is not specified on a <code>&lt;textarea&gt;</code> element, then the browser uses the <strong>autocomplete</strong> attribute value of the <code>&lt;textarea&gt;</code> element's form owner. The form owner is either the <code>&lt;form&gt;</code> element that this <code>&lt;textarea&gt;</code> element is a descendant of or the form element whose <strong>id</strong> is specified by the <strong>form</strong> attribute of the input element. For more information, see the <code>autocomplete</code> attribute in <code>&lt;form&gt;</code>.</p> </dd> <dt><strong><code>autofocus</code></strong> HTML5</dt> <dd>This Boolean attribute lets you specify that a form control should  have input focus when the page loads, unless the user overrides it, for  example by typing in a different control. Only one form-associated  element in a document can have this attribute specified.&nbsp;</dd> <dt><strong><code>cols</code></strong></dt> <dd>The visible width of the text control, in average character widths.  If it is specified, it must be a positive integer. If it is not  specified, the default value is <code>20</code> (HTML5).</dd> <dt><strong><code>disabled</code></strong></dt> <dd>This Boolean attribute indicates that the user cannot interact with  the control. (If this attribute is not specified, the control inherits  its setting from the containing element, for example <code>&lt;fieldset&gt;</code>; if there is no containing element with the <code>disabled</code> attribute set, then the control is enabled.)</dd> <dt><strong><code>form</code></strong> HTML5</dt> <dd>The form element that the <code>&lt;textarea&gt;</code> element is  associated with (its ""form owner""). The value of the attribute must be  the ID of a form element in the same document. If this attribute is not  specified, the <code>&lt;textarea&gt;</code> element must be a descendant of a form element. This attribute enables you to place <code>&lt;textarea&gt;</code> elements anywhere within a document, not just as descendants of their form elements.</dd> <dt><strong><code>maxlength</code></strong> HTML5</dt> <dd>The maximum number of characters (Unicode code points) that the  user can enter. If this value isn't specified, the user can enter an  unlimited number of characters.</dd> <dt><strong><code>minlength</code></strong> HTML5</dt> <dd>The minimum number of characters (Unicode code points) required that the user should enter.</dd> <dt><strong><code>name</code></strong></dt> <dd>The name of the control.</dd> <dt><strong><code>placeholder</code></strong> HTML5</dt> <dd>A hint to the user of what can be entered in the control. Carriage  returns or line-feeds within the placeholder text must be treated as  line breaks when rendering the hint.</dd> <dt><strong><code>readonly</code></strong></dt> <dd>This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the <code>disabled</code> attribute, the <code>readonly</code>  attribute does not prevent the user from clicking or selecting in the  control. The value of a read-only control is still submitted with the  form.</dd> <dt><strong><code>required</code></strong> HTML5</dt> <dd>This attribute specifies that the user must fill in a value before submitting a form.</dd> <dt><strong><code>rows</code></strong></dt> <dd>The number of visible text lines for the control.</dd> <dt><strong><code>selectionDirection</code></strong> HTML5</dt> <dd>The direction in which selection occurred. This is ""forward"" if the  selection was made from left-to-right in an LTR locale or right-to-left  in an RTL&nbsp;locale, or ""backward"" if the selection was made in the  opposite direction. This can be ""none""&nbsp;if the selection direction is  unknown.</dd> <dt><strong><code>selectionEnd</code></strong></dt> <dd>The index to the last character in the current selection. If  there's no selection, the value is the index of the character following  the position of the text entry cursor.</dd> <dt><strong><code>selectionStart</code></strong></dt> <dd>The index to the first character in the current selection. If  there's no selection, this value is the index of the character following  the position of the text entry cursor.</dd> <dt><strong><code>spellcheck</code></strong> HTML5</dt> <dd>Setting the value of this attribute to <code>true</code> indicates that the element needs to have its spelling and grammar checked. The value <code>default</code> indicates that the element is to act according to a default behavior, possibly based on the parent element's own <code>spellcheck</code> value. The value <code>false</code> indicates that the element should not be checked.</dd> <dt><strong><code>wrap</code></strong> HTML5</dt> <dd>Indicates how the control wraps text. Possible values are:  <ul> <li><code>hard</code>: The browser automatically inserts line breaks (CR+LF) so that each line has no more than the width of the control; the <code>cols</code> attribute must be specified.</li> <li><code>soft</code>: The browser ensures that all line breaks in the value consist of a CR+LF pair, but does not insert any additional line breaks.</li> <li><code>off</code>: <i> </i> Like <code>soft</code> but changes appearance to <code>white-space: pre</code> so line segments exceeding <code>cols</code> are not wrapped and area becomes horizontally scrollable.</li> </ul> <p>If this attribute is not specified, <code>soft</code> is its default value.</p> </dd> </dl> <p></p><div> <h2>Resizable textareas</h2> Requires Gecko 2.0(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) </div><p></p> <p>Gecko&nbsp;2.0 introduced support for resizable textareas. This is controlled by the <code>resize</code> CSS property. Resizing of textareas is enabled by default, but you can explicitly disable it by including the following CSS:</p> <pre><code>textarea {   resize: none; }</code></pre><h2>Interaction with CSS</h2> <p>In regards to CSS, an <code>&lt;textarea&gt;</code> is a replaced element. The HTML specification doesn't define where the baseline of a <code>&lt;textarea&gt;</code> is. So different browsers set it to different positions. For Gecko, the <code>&lt;textarea&gt;</code>  baseline is set on the baseline of the first line of the textarea's  first line, on another browser it may be set on the bottom of the <code>&lt;textarea&gt;</code> box. Don't use <code>vertical-align</code><code>: baseline</code> on it, as the behavior will be unpredictable.</p> <p>A <em>textarea</em> has intrinsic dimensions, like a raster image.</p> <h2>Example</h2> <h3>HTML content</h3> <pre><code>&lt;textarea name=""textarea""    rows=""10"" cols=""50""&gt;Write something here&lt;/textarea&gt;</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea	HTML
HTML element <code>&lt;details&gt;</code>	<small>HTML interactive elements element</small><br />is used as a <b>disclosure widget</b> from which the user can retrieve additional information	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>open</code></strong></dt> <dd>This Boolean attribute indicates whether the details will be shown to the user on page load. Default is <code>false</code> and so details will be hidden.</dd> </dl> <h2>Example</h2> <pre><code>&lt;details&gt;   &lt;summary&gt;Some details&lt;/summary&gt;   &lt;p&gt;More info about the details.&lt;/p&gt; &lt;/details&gt;  &lt;details open&gt;   &lt;summary&gt;Even more details&lt;/summary&gt;   &lt;p&gt;Here are even more details about the details.&lt;/p&gt; &lt;/details&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details	HTML
HTML element <code>&lt;dialog&gt;</code>	<small>HTML interactive elements element</small><br />represents a <b>dialog box</b> or other interactive component, such as an inspector or window	"<h2>Attributes</h2> <p>This element includes the global attributes. The <code>tabindex</code> attribute must not be used on the <code>&lt;dialog&gt;</code> element.</p> <dl> <dt><strong><code>open</code></strong></dt> <dd>Indicates that the dialog is active and available for interaction.  When the open attribute is not set, it shouldn't be shown to the user.</dd> </dl> <h2>Usage notes</h2> <ul> <li><code>&lt;form&gt;</code> elements can be integrated within a dialog by specifying them with the attribute <code>method=""dialog""</code>. When such a form is submitted, the dialog is closed with a <code>returnValue</code> attribute set to the <code>value</code> of the submit button used.</li> <li>The <code>::backdrop</code> CSS pseudo-element can be used to style behind a <code>&lt;dialog&gt;</code> element, for example to dim inaccessible content whilst a modal dialog is active.</li> </ul> <h2>Examples</h2> <h3>Simple example</h3> <pre><code>&lt;dialog open&gt;   &lt;p&gt;Greetings, one and all!&lt;/p&gt; &lt;/dialog&gt;</code></pre><h2>Advanced example</h2> <p>This example opens a pop-up dialog box containing a form when the ""Update details"" button is clicked.</p> <h3>HTML content</h3> <pre><code>&lt;!-- Simple pop-up dialog box, containing a form --&gt; &lt;dialog open&gt;   &lt;form method=""dialog""&gt;     &lt;section&gt;       &lt;p&gt;&lt;label for=""favAnimal""&gt;Favorite animal:&lt;/label&gt;       &lt;select&gt;         &lt;option&gt;&lt;/option&gt;         &lt;option&gt;Brine shrimp&lt;/option&gt;         &lt;option&gt;Red panda&lt;/option&gt;         &lt;option&gt;Spider monkey&lt;/option&gt;       &lt;/select&gt;&lt;/p&gt;     &lt;/section&gt;     &lt;menu&gt;       &lt;button type=""reset""&gt;Cancel&lt;/button&gt;       &lt;button type=""submit""&gt;Confirm&lt;/button&gt;     &lt;/menu&gt;   &lt;/form&gt; &lt;/dialog&gt;  &lt;menu&gt;   &lt;button&gt;Update details&lt;/button&gt; &lt;/menu&gt;</code></pre><h3>JavaScript content</h3> <pre><code>(function() {   var updateButton = document.getElementById('updateDetails');   var cancelButton = document.getElementById('cancel');   var favDialog = document.getElementById('favDialog');    // Update button opens a modal dialog   updateButton.addEventListener('click', function() {     favDialog.showModal();   });    // Form cancel button closes the dialog box   cancelButton.addEventListener('click', function() {     favDialog.close();   }); })();</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog	HTML
HTML element <code>&lt;menu&gt;</code>	<small>HTML interactive elements element</small><br />represents a <b>group of commands that a user can perform</b> or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>label</code></strong></dt> <dd>The name of the menu as shown to the user. Used within nested  menus, to provide a label through which the submenu can be accessed.  Must only be specified when the parent element is a <code>&lt;menu&gt;</code> in the <em>context menu</em> state.</dd> <dt><strong><code>type</code></strong></dt> <dd>This attribute indicates the kind of menu being declared, and can be one of two values.  <ul> <li><code>context</code>: Indicates the <em>popup menu</em> state, which represents a group of commands activated through another element. This might be as a button menu referenced by a <code>menu</code> attribute of a <code>&lt;button&gt;</code> element, or as context menu for an element with a <code>contextmenu</code> attribute. This value is the default if the attribute is missing and the parent element is also a <code>&lt;menu&gt;</code> element.</li> <li><code>toolbar</code>: Indicates the <em>toolbar</em> state, which  represents a toolbar consisting of a series of commands for user  interaction. This might be in the form of an unordered list of <code>&lt;li&gt;</code> elements, or, if the element has no <code>&lt;li&gt;</code> element children, flow content describing available commands. This value is the default if the attribute is missing.</li> </ul> </dd> </dl> <h2>Usage notes</h2> <p>The <code>&lt;menu&gt;</code> and <code>&lt;ul&gt;</code> elements both represent an unordered list of items. The key difference is that <code>&lt;ul&gt;</code> primarily contains items for display, whilst <code>&lt;menu&gt;</code> is intended for interactive items, to act on.</p> <p>An HTML menu can be used to create context menus (typically activated by right-clicking another element) or toolbars.</p> <p><strong>Context menus</strong> consist of a <code>&lt;menu&gt;</code> element which contains <code>&lt;menuitem&gt;</code> elements for each selectable option in the menu, <code>&lt;menu&gt;</code> elements for submenus within the menu, and <code>&lt;hr&gt;</code>  elements for separator lines to break up the menu's content into  sections. Context menus are then attached to the element they're  activated from using either the associated element's <code>contextmenu</code> attribute or, for button-activated menus attached to <code>&lt;button&gt;</code> elements, the <code>menu</code> attribute.</p> <p><strong>Toolbar menus</strong> consist of a <code>&lt;menu&gt;</code> element whose content is described in one of two ways: either as an unordered list of items represented by <code>&lt;li&gt;</code> elements (each representing a command or option the user can utilize), or (if there are no <code>&lt;li&gt;</code> elements), flow content describing the available commands and options.</p> <p>This element was deprecated in HTML4, but reintroduced in HTML5.1&nbsp;  and the HTML living standard. This document describes the current  Firefox implementation. Type 'list' is likely to change to 'toolbar'  according to HTML5.1.</p> <h2>Examples</h2> <h3>Context menu</h3> <h4>HTML content</h4> <pre><code>&lt;!-- A &lt;div&gt; element with a context menu --&gt; &lt;div contextmenu=""popup-menu""&gt;   Right-click to see the adjusted context menu &lt;/div&gt;  &lt;menu type=""context""&gt;   &lt;menuitem&gt;Action&lt;/menuitem&gt;   &lt;menuitem&gt;Another action&lt;/menuitem&gt;   &lt;hr&gt;   &lt;menuitem&gt;Separated action&lt;/menuitem&gt; &lt;/menu&gt;</code></pre><h4>CSS content</h4> <pre><code>div {   width: 300px;   height: 80px;   background-color: lightgreen; }</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu	HTML
HTML element <code>&lt;menuitem&gt;</code>	"<small>HTML interactive elements element</small><br />represents a <b>command that a user is able to invoke</b> through a popup menu. This includes context menus, as well as menus that might be attached to a menu button.<div><br /></div><div>A command can either be defined explicitly, with a textual label and  optional icon to describe its appearance, or alternatively as an <em>indirect command</em>  whose behavior is defined by a separate element. Commands can also  optionally include a checkbox or be grouped to share radio buttons.  (Menu items for indirect commands gain checkboxes or radio buttons when  defined against elements <code>&lt;input type=""checkbox""&gt;</code> and <code>&lt;input type=""radio""&gt;</code>.)</div>"	"<h2>Attributes</h2> <p>This element includes the global attributes; in particular <code>title</code> can be used to describe the command, or provide usage hints.</p> <dl> <dt><strong><code>checked</code></strong></dt> <dd>Boolean attribute which indicates whether the command is selected. May only be used when the <code>type</code> attribute is <code>checkbox</code> or <code>radio</code>.</dd> <dt><strong><code>command</code></strong></dt> <dd>Specifies the ID of a separate element, indicating a command to be  invoked indirectly. May not be used within a menu item that also  includes the attributes <code>checked</code>, <code>disabled</code>, <code>icon</code>, <code>label</code>, <code>radiogroup</code> or <code>type</code>.</dd> <dt><strong><code>default</code></strong></dt> <dd>This Boolean attribute indicates use of the same command as the menu's subject element (such as a <code>button</code> or <code>input</code>).</dd> <dt><strong><code>disabled</code></strong></dt> <dd>Boolean attribute which indicates that the command is not available in the current state. Note that <code>disabled</code> is distinct from <code>hidden</code>; the <code>disabled</code> attribute is appropriate in any context where a change in circumstances might render the command relevant.</dd> <dt><strong><code>icon</code></strong></dt> <dd>Image URL, used to provide a picture to represent the command.</dd> <dt><strong><code>label</code></strong></dt> <dd>The name of the command as shown to the user. Required when a <code>command</code> attribute is not present.</dd> <dt><strong><code>radiogroup</code></strong></dt> <dd>This attribute specifies the name of a group of commands to be  toggled as radio buttons when selected. May only be used where the <code>type</code> attribute is <code>radio</code>.</dd> <dt><strong><code>type</code></strong></dt> <dd>This attribute indicates the kind of command, and can be one of three values.  <ul> <li><code>command</code>: A regular command with an associated action. This is the missing value default.</li> <li><code>checkbox</code>: Represents a command that can be toggled between two different states.</li> <li><code>radio</code>: Represent one selection from a group of commands that can be toggled as radio buttons.</li> </ul> </dd> </dl> <h2>Example</h2> <h3>HTML content</h3> <pre><code>&lt;!-- A &lt;div&gt; element with a context menu --&gt; &lt;div contextmenu=""popup-menu""&gt;   Right-click to see the adjusted context menu &lt;/div&gt;  &lt;menu type=""context""&gt;   &lt;menuitem type=""checkbox"" onclick=""toggleOption()""     checked=""true""&gt;Checkbox&lt;/menuitem&gt;   &lt;menuitem type=""command"" label=""Command"" icon=""icon.png""     onclick=""doSomething()""&gt;Checkbox&lt;/menuitem&gt;   &lt;menuitem type=""radio"" name=""group1"" onclick=""option()""     checked=""true""&gt;Radio button 1&lt;/menuitem&gt;   &lt;menuitem type=""radio"" name=""group1""     onclick=""option()""&gt;Radio button 2&lt;/menuitem&gt; &lt;/menu&gt;</code></pre><h3>CSS content</h3> <pre><code>div {   width: 300px;   height: 80px;   background-color: lightgreen; }</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem	HTML
HTML element <code>&lt;summary&gt;</code>	<small>HTML interactive elements element</small><br />is used as a summary, caption, or legend for the content of a <code>&lt;details&gt;</code> element	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Usage notes</h2> <p>If the <code>&lt;summary&gt;</code> element is omitted, the heading ""details"" will be used.</p> <p>The default style for <code>&lt;summary&gt;</code> is <code>display:list-item</code> per HTML standard.&nbsp; If the style is being changed to <code>display:block</code>, the disclosure triangle will be dismissed, which is expected. See Bug 1283989 for more information.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary	HTML
HTML element <code>&lt;content&gt;</code>	<small><b>Obsolete</b> HTML web components element (use&nbsp;<code>&lt;slot&gt;</code>)</small><br />was used inside of Shadow DOM as an insertion point, and wasn't meant to be used in ordinary HTML	"<h2 name=""Attributes"">Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><code>select</code></dt> <dd>A comma-separated list of selectors. These have the same syntax as  CSS selectors. They select the content to insert in place of the <code>&lt;content&gt;</code> element.</dd></dl>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/content	HTML
HTML element <code>&lt;element&gt;</code>	<small><b>Obsolete</b> HTML web components element</small><br />was part of Web Components; this element was intended to be used to <b>define new custom DOM elements</b>. It was removed in favor of a JavaScript-driven methodology for creating new custom elements; however, that technology is not mature and no browers fully implement it	"<h2 name=""Attributes"">Attributes</h2> <p>This element includes the global attributes.</p>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/element	HTML
HTML element <code>&lt;shadow&gt;</code>	<small><b>Obsolete</b> HTML web components element</small><br />was intended to be used as a <b>shadow DOM insertion point</b>. You might have used it if you have created multiple shadow roots under a shadow host. It is not useful in ordinary HTML	<h2>Attributes</h2> <p>This element includes the global attributes.</p> <h2>Example</h2> <p>Here is a simple example of using the <code>&lt;shadow&gt;</code> element. It is an HTML file with everything needed in it.</p> <div> <p><strong>Note:</strong>&nbsp;This is an experimental technology. For this code to work, the browser you display it in must support Web Components. See Enabling Web Components in Firefox.</p> </div> <pre><code>&lt;html&gt;   &lt;head&gt;&lt;/head&gt;   &lt;body&gt;    &lt;!-- This &lt;div&gt; will hold the shadow roots. --&gt;   &lt;div&gt;     &lt;!-- This heading will not be displayed --&gt;     &lt;h4&gt;My Original Heading&lt;/h4&gt;   &lt;/div&gt;    &lt;script&gt;     // Get the &lt;div&gt; above with its content     var origContent = document.querySelector('div');     // Create the first shadow root     var shadowroot1 = origContent.createShadowRoot();     // Create the second shadow root     var shadowroot2 = origContent.createShadowRoot();      // Insert something into the older shadow root     shadowroot1.innerHTML =       '&lt;p&gt;Older shadow root inserted by           &amp;lt;shadow&amp;gt;&lt;/p&gt;';     // Insert into younger shadow root, including &lt;shadow&gt;.     // The previous markup will not be displayed unless     // &lt;shadow&gt; is used below.     shadowroot2.innerHTML =       '&lt;shadow&gt;&lt;/shadow&gt; &lt;p&gt;Younger shadow        root, displayed because it is the youngest.&lt;/p&gt;';   &lt;/script&gt;    &lt;/body&gt; &lt;/html&gt;</code></pre>	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/shadow	HTML
HTML element <code>&lt;slot&gt;</code>	<small>HTML web components element</small><br />is a <b>placeholder</b> inside a web component that you can fill with your own markup, which lets you create <b>separate DOM trees</b> and present them together	"<h2>Attributes</h2> <p>This element includes the global attributes.</p> <dl> <dt><strong><code>name</code></strong></dt> <dd>The slot's name.</dd> <dd>A <strong><dfn>named slot</dfn></strong> is a <code>&lt;slot&gt;</code> element with a <code>name</code> attribute.</dd> </dl> <h2>Example</h2> <p>Let’s make an example using the <code>&lt;slot&gt;</code> element along with the <code>&lt;template&gt;</code> element.</p> <h3 name=""Partnering_&lt;slot&gt;_with_&lt;template&gt;"">Partnering &lt;slot&gt; with &lt;template&gt;</h3> <p>The following set of code snippets show how to use the <code>&lt;slot&gt;</code> element together with the <code>&lt;template&gt;</code> element and some JavaScript to:</p> <ul> <li>create a <strong><code>&lt;element-details&gt;</code></strong> element with named slots in its shadow root</li> <li>design the <strong><code>&lt;element-details&gt;</code></strong>  element in such a way that, when used in documents, it is rendered from  composing the element’s content together with content from its shadow root—that is, pieces of the element’s content are used to fill in named slots in its shadow root</li> </ul> <h4>Use &lt;slot&gt; in &lt;template&gt; to make a doc fragment with named slots</h4> <p>First let’s use the <code>&lt;slot&gt;</code> element within a <code>&lt;template&gt;</code> element to create a new “element-details-template” document fragment containing some named slots.</p> <pre><code>&lt;template&gt;   &lt;style&gt;   details {font-family: ""Open Sans Light"",Helvetica,Arial}   .name {font-weight: bold; color: #217ac0; font-size: 120%}   h4 { margin: 10px 0 -8px 0; }   h4 span { background: #217ac0; padding: 2px 6px 2px 6px }   h4 span { border: 1px solid #cee9f9; border-radius: 4px }   h4 span { color: white }   .attributes { margin-left: 22px; font-size: 90% }   .attributes p { margin-left: 16px; font-style: italic }   &lt;/style&gt;   &lt;details&gt;     &lt;summary&gt;       &lt;span&gt;         &lt;code&gt;&amp;lt;&lt;slot name=""element-name""&gt;NEED NAME&lt;/slot&gt;&amp;gt;&lt;/code&gt;         &lt;i&gt;&lt;slot name=""description""&gt;NEED DESCRIPTION&lt;/slot&gt;&lt;/i&gt;       &lt;/span&gt;     &lt;/summary&gt;     &lt;div&gt;       &lt;h4&gt;&lt;span&gt;Attributes&lt;/span&gt;&lt;/h4&gt;       &lt;slot name=""attributes""&gt;&lt;p&gt;None&lt;/p&gt;&lt;/slot&gt;     &lt;/div&gt;   &lt;/details&gt;   &lt;hr&gt; &lt;/template&gt;</code></pre><p>That <code>&lt;template&gt;</code> element has several features:</p> <ul> <li>The <code>&lt;template&gt;</code> has a&nbsp;<code>&lt;style&gt;</code> element with a set of CSS styles that are scoped just to the document fragment the&nbsp; <code>&lt;template&gt;</code> creates.</li> <li>The&nbsp;<code>&lt;template&gt;</code> uses <code>&lt;slot&gt;</code> and its <code>name</code> attribute to make three named slots:   <ul> <li><code>&lt;slot name=""element-name""&gt;</code></li> <li><code>&lt;slot name=""description""&gt;</code></li> <li><code>&lt;slot name=""attributes""&gt;</code></li> </ul> </li> <li>The <code>&lt;template&gt;</code> wraps the&nbsp;named slots in a <code>&lt;details&gt;</code> element.</li> </ul> <h4>Create a new &lt;element-details&gt; element from a &lt;template&gt; element</h4> <p>Next, let’s create a new custom element named <strong><code>&lt;element-details&gt;</code></strong> and use <code>Element.attachShadow</code> to attach to it, as its shadow root, that document fragment we created with our <code>&lt;template&gt;</code> element above.</p> <pre><code>customElements.define('element-details',   class extends HTMLElement {     constructor() {       super();       var template = document         .getElementById('element-details-template')         .content;       const shadowRoot = this.attachShadow({mode: 'open'})         .appendChild(template.cloneNode(true));   } })</code></pre><h4>Use the &lt;element-details&gt; custom element with named slots</h4> <p>Now let’s take that <strong><code>&lt;element-details</code>&gt;</strong> element and actually use it in our document.</p> <pre><code>&lt;element-details&gt;   &lt;span slot=""element-name""&gt;slot&lt;/span&gt;   &lt;span slot=""description""&gt;A placeholder inside a web     component that users can fill with their own markup,     with the effect of composing different DOM trees     together.&lt;/span&gt;   &lt;dl slot=""attributes""&gt;     &lt;dt&gt;name&lt;/dt&gt;     &lt;dd&gt;The name of the slot.&lt;/dd&gt;   &lt;/dl&gt; &lt;/element-details&gt;  &lt;element-details&gt;   &lt;span slot=""element-name""&gt;template&lt;/span&gt;   &lt;span slot=""description""&gt;A mechanism for holding client-     side content that is not to be rendered when a page is     loaded but may subsequently be instantiated during     runtime using JavaScript.&lt;/span&gt; &lt;/element-details&gt;</code></pre><p>About that snippet, notice these points:</p> <ul> <li>The snippet has two instances of <strong><code>&lt;element-details&gt;</code></strong> elements which both use the <code>slot</code> attribute to reference the named slots <code>""element-name""</code> and <code>""description""</code> we put in the&nbsp;<code>&lt;element-details&gt;</code> shadow root .</li> <li>Only the first of those two <strong><code>&lt;element-details&gt;</code></strong> elements references the <code>""attributes""</code> named slot. The second <code><strong>&lt;element-details</strong>&gt;</code> element lacks any reference to the <code>""attributes""</code> named slot.</li> <li>The first <code>&lt;<strong>element-details&gt;</strong></code> element references the <code>""attributes""</code> named slot using a <code>&lt;dl&gt;</code> element with <code>&lt;dt&gt;</code> and <code>&lt;dd&gt;</code> children.</li> </ul> <h4>Add a final bit of style</h4> <p>Finishing touch: A tiny bit more CSS for the&nbsp;<code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, and <code>&lt;dd&gt;</code> elements in our doc.</p> <pre><code>  dl { margin-left: 6px; }   dt { font-weight: bold; color: #217ac0; font-size: 110% }   dt { font-family: Consolas, ""Liberation Mono"", Courier }   dd { margin-left: 16px }</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot	HTML
HTML element <code>&lt;template&gt;</code>	<small>HTML web components element</small><br />is a mechanism for holding client-side <b>content that is not to be rendered</b> when a page is loaded but may subsequently be instantiated during runtime using JavaScript.<div><br /></div><div>While parser does process the  contents of this<strong>&nbsp;</strong>element  while loading the page, it does so only to ensure that those contents  are valid; the element's contents are not rendered, however.</div>	"<h2>Attributes</h2> <p>This element only includes the global attributes.</p> <h2>Example</h2> <p>First we start with the HTML portion of the example.</p> <pre><code>&lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;td&gt;UPC_Code&lt;/td&gt;       &lt;td&gt;Product_Name&lt;/td&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;!-- existing data could optionally be included here --&gt;   &lt;/tbody&gt; &lt;/table&gt;  &lt;template&gt;   &lt;tr&gt;     &lt;td&gt;&lt;/td&gt;     &lt;td&gt;&lt;/td&gt;   &lt;/tr&gt; &lt;/template&gt;</code></pre><p>First,  we have a table into which we will later insert content using  JavaScript code. Then comes the template, which describes the structure  of an HTML fragment representing a single table row.</p> <p>Now that the table has been created and the template defined, we use  JavaScript to insert rows into the table, with each row being  constructed using the template as its basis.</p> <pre><code>// Test to see if the browser supports the HTML template element by checking // for the presence of the template element's content attribute. if ('content' in document.createElement('template')) {    // Instantiate the table with the existing HTML tbody   // and the row with the template   var t = document.querySelector('#productrow'),   td = t.content.querySelectorAll(""td"");   td[0].textContent = ""1235646565"";   td[1].textContent = ""Stuff"";    // Clone the new row and insert it into the table   var tb = document.querySelector(""tbody"");   var clone = document.importNode(t.content, true);   tb.appendChild(clone);      // Create a new row   td[0].textContent = ""0384928528"";   td[1].textContent = ""Acme Kidney Beans"";    // Clone the new row and insert it into the table   var clone2 = document.importNode(t.content, true);   tb.appendChild(clone2);  } else {   // Find another way to add the rows to the table because    // the HTML template element is not supported. }</code></pre>"	reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template	HTML
HTML element <code>&lt;acronym&gt;</code>	<small><b>Obsolete</b> HTML element (use&nbsp;<code>&lt;abbr&gt;</code>)</small><br />indicates an <b>acronym or abbreviation</b><div>removed in HTML5</div>		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym	HTML
HTML element <code>&lt;applet&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />identifies the inclusion of a <b>Java applet</b>		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet	HTML
HTML element <code>&lt;basefont&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />establishes a <b>default font size</b> for a document. Font size then can be varied relative to the base font size using the <code>&lt;font&gt;</code> element		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/basefont	HTML
HTML element <code>&lt;big&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>makes the text <em>font size</em> one size bigger (for example, from small to medium, or from large to x-large) up to the browser's maximum font size		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big	HTML
HTML element <code>&lt;blink&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>cause the enclosed text to flash slowly		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink	HTML
HTML element <code>&lt;center&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />is a block-level element that can contain paragraphs and other block-level and inline elements. The entire content of this element is <b>centered horizontally</b> within its containing element (typically, the <code>&lt;body&gt;</code>)		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center	HTML
HTML element <code>&lt;command&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>represents a command which the user can invoke		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/command	HTML
HTML element <code>&lt;dir&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>represents a directory, namely a collection of filenames		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dir	HTML
HTML element <code>&lt;font&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>defines the font size, color and face for its content		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font	HTML
HTML element <code>&lt;frame&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>defines a particular area in which another HTML document can be displayed. A frame should be used within a <code>&lt;frameset&gt;</code>		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame	HTML
HTML element <code>&lt;frameset&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>is used to contain <code>&lt;frame&gt;</code> elements		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset	HTML
HTML element <code>&lt;isindex&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>puts a text field in a page for querying the document		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex	HTML
HTML element <code>&lt;keygen&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>exists to facilitate generation of key material, and submission of the public key as part of an HTML form. This mechanism is designed for use with Web-based certificate management systems. It is expected this&nbsp;element will be used in an HTML form along with other information needed to construct a certificate request, and that the result of the process will be a signed certificate		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen	HTML
HTML element <code>&lt;listing&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />enclosed HTML <b>not interpreted</b>, shown in <b>monospace</b><i>,&nbsp;</i>should be rendered wide enough to allow&nbsp;<b>132 characters&nbsp;per line</b>		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/listing	HTML
HTML element <code>&lt;marquee&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />is used to insert a <b>scrolling area </b>of text. You can control what happens when the text reaches the edges of its content area using its attributes		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee	HTML
HTML element <code>&lt;multicol&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />was an experimental element designed to allow <b>multi-column layouts</b>. It never got any significant traction and is not implemented in any major browsers		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/multicol	HTML
HTML element <code>&lt;nextid&gt;</code>	<small><b>Obsolete</b> HTML element</small><br>served to enable the NeXT web designing tool to generate automatic NAME labels for its anchors		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nextid	HTML
HTML element <code>&lt;noembed&gt;</code>	"<small><b>Obsolete</b> HTML element</small><br />is a deprecated and non-standard way to provide alternative, or ""fallback"", <b>content for browsers that do not support&nbsp;<code>&lt;embed&gt;&nbsp;</code></b>or do not support embedded content an author wishes to use"		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noembed	HTML
HTML element <code>&lt;plaintext&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />renders everything following the start tag as <b>raw text</b>, without interpreting any HTML. There is no closing tag, since everything after it is considered raw text		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext	HTML
HTML element <code>&lt;spacer&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />allowed insertion of <b>empty spaces</b> on pages. It was devised by Netscape to accomplish the same effect as a single-pixel layout image, which was something web designers used to use to add white spaces to web pages without actually using an image. However, this element&nbsp;is no longer supported by any major browser and the same effects can now be achieved using simple CSS.		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/spacer	HTML
HTML element <code>&lt;strike&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />places a <b>strikethrough</b> (horizontal line) over text		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike	HTML
HTML element <code>&lt;tt&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />produces an inline element displayed in the browser's default monotype font. This element was intended to style text as it would display on a <b>fixed width display, such as a teletype</b>. It probably is more common to display fixed width type using the <code>&lt;code&gt;</code> element		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt	HTML
HTML element <code>&lt;xmp&gt;</code>	<small><b>Obsolete</b> HTML element</small><br />enclosed HTML<b> not interpreted</b>, shown in <b>monospace</b>,&nbsp;should be rendered wide enough to allow <b>80 characters per line</b>		reverse		https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp	HTML
bash Bourne Shell builtin pwd -L	pwd		-L			<div><div>Print the absolute pathname, which may contain symbolic links, of the current working directory.</div></div>			bash
bash Bourne Shell builtin pwd -P	pwd		-P			<div><div><div>Print the absolute pathname, which will not contain symbolic links, of the current working directory.</div></div></div>			bash
bash shorthand for&nbsp;<code>2&gt;&amp;1 |</code>	<samp><code>|&amp;</code></samp>	If&nbsp;<samp><code>|&amp;</code></samp>&nbsp;is used,&nbsp;<var>command1</var>’s standard error, in addition to its standard output, is connected to&nbsp;<var>command2</var>’s standard input through the pipe; it is shorthand for&nbsp;<code>2&gt;&amp;1 |</code>. This implicit redirection of the standard error to the standard output is performed after any redirections specified by the command.				bash
shell comment within command	abuse backticks <code>`#comment`</code>&nbsp;or use parameter substitution <code>${IFS# comment}</code>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #24909d"">echo </span>CommandName InputFiles <span style=""color: #ed9d13"">`</span><span style=""color: #999999; font-style: italic"">#1st comment` \</span>     --option1 arg1 <span style=""color: #ed9d13"">`</span><span style=""color: #999999; font-style: italic"">#2nd comment` \</span>     --option2 arg2 <span style=""color: #ed9d13"">`</span><span style=""color: #999999; font-style: italic"">#3rd comment`</span> some_cmd --opt1 <span style=""color: #ed9d13"">`</span><span style=""color: #999999; font-style: italic"">#1st comment` --opt2 `#2nd comment` --opt3 `#3rd comment`</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY3MDMzMzYsICJpZCI6ICIxNDk2NzAyODEyNjQ4LTAwMiIsICJtZCI6ICIgICAgOjo6c2hcbiAgICBlY2hvIENvbW1hbmROYW1lIElucHV0RmlsZXMgYCMxc3QgY29tbWVudGAgXFxcbiAgICAgICAgLS1vcHRpb24xIGFyZzEgYCMybmQgY29tbWVudGAgXFxcbiAgICAgICAgLS1vcHRpb24yIGFyZzIgYCMzcmQgY29tbWVudGBcbiAgICBzb21lX2NtZCAtLW9wdDEgYCMxc3QgY29tbWVudGAgLS1vcHQyIGAjMm5kIGNvbW1lbnRgIC0tb3B0MyBgIzNyZCBjb21tZW50YFxuIn0=---->"			https://stackoverflow.com/a/12797512/172602	
bash shebang	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #999999;font-style: italic"">#!/usr/bin/env bash</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTY3MDcxMzgsICJpZCI6ICIxNDk2NzA3MTI2NDUxLTAwMSIsICJtZCI6ICIgICAgOjo6c2hcbiAgICAjIS91c3IvYmluL2VudiBiYXNoXG4ifQ==---->"					
GNU pronunciation	"<span class=""st"" data-hveid=""74"" data-ved=""0ahUKEwj6qqiIlqrUAhVhVWMKHWUnBqkQ4EUISjAG"">The name “<em>GNU</em>” is a recursive acronym for “<em>GNU's Not Unix</em>!”; it is pronounced as one syllable with a hard g, like “grew” but with the letter “n” instead of “r”. The combination of <em>GNU</em> and Linux is the <em>GNU</em>/Linux operating system, now used by millions and sometimes incorrectly called simply “Linux”.</span>"					
tar -c -f new.tar --include='*foo*' @old.tgz	tar -c -f&nbsp;<u>new.tar</u>&nbsp;--include='*<u>foo</u>*' @<u>old.tgz</u>					create new archive&nbsp;<u><code>new.tar</code></u>&nbsp;containing only the entries from&nbsp;<u><code>old.tgz</code></u>&nbsp;containing the string <code>foo</code>		y	tar
tar -s substitution ~	tar -s	pattern substitution			~	the match			tar
tar -s substitution 1-9	tar -s	pattern substitution			1-9	the content of the corresponding captured group			tar
tar -s specifier g	tar -s	trailing specifier			g	matching should continue after the matched part and stopped on the first unmatched pattern			tar
tar -s specifier s	tar -s	trailing specifier			s	pattern applies to the value of symbolic links			tar
tar -s specifier p	tar -s	trailing specifier			p	print to&nbsp;<i>stderr</i>&nbsp;original and new path names after successful substitutions			tar
tar --no-null	tar			--no-null		Disable the effect of any previous <code>--null</code> option	"<p>The <code>--no-null</code> option can be used if you need to read both <code>NUL</code>-terminated and newline-terminated files on the same command line. For example, if <code>flist</code> is a newline-terminated file, then the following command can be used to combine it with the above command:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">find . -size +800 -print0 <span style=""color: #d0d0d0"">|</span> tar -c -f big.tar --null -T - --no-null -T flist </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTcwMzk1OTQsICJpZCI6ICIxNDk3MDM5NTA4NjIzLTAwNyIsICJtZCI6ICJUaGUgYC0tbm8tbnVsbGAgb3B0aW9uIGNhbiBiZSB1c2VkIGlmIHlvdSBuZWVkIHRvIHJlYWQgYm90aCBgTlVMYC10ZXJtaW5hdGVkIGFuZCBuZXdsaW5lLXRlcm1pbmF0ZWQgZmlsZXMgb24gdGhlIHNhbWUgY29tbWFuZCBsaW5lLiBGb3IgZXhhbXBsZSwgaWYgYGZsaXN0YCBpcyBhIG5ld2xpbmUtdGVybWluYXRlZCBmaWxlLCB0aGVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZCBjYW4gYmUgdXNlZCB0byBjb21iaW5lIGl0IHdpdGggdGhlIGFib3ZlIGNvbW1hbmQ6XG4gIFxuICAgIDo6OnNoXG4gICAgZmluZCAuIC1zaXplICs4MDAgLXByaW50MCB8XG4gICAgdGFyIC1jIC1mIGJpZy50YXIgLS1udWxsIC1UIC0gLS1uby1udWxsIC1UIGZsaXN0XG4ifQ==---->"		tar
extended attributes	       Extended attributes are <code>name:value</code> pairs associated permanently with        files and directories, similar to the environment strings associated        with a process.  An attribute may be defined or undefined.  If it is        defined, its value may be empty or non-empty.<div><br /></div><div>Extended attributes are extensions to the normal attributes which are        associated with all inodes in the system (i.e., the <code>stat</code> data).        They are often used to provide additional functionality to a        filesystem—for example, additional security features such as Access        Control Lists (ACLs) may be implemented using extended attributes.         Users with search access to a file or directory may use <code>listxattr</code>&nbsp;to retrieve a list of attribute names defined for that file or        directory.         Extended attributes are accessed as atomic objects.  Reading        (<code>getxattr</code>) retrieves the whole value of an attribute and stores it        in a buffer.  Writing (<code>setxattr</code>) replaces any previous value with        the new value.         Space consumed for extended attributes may be counted towards the        disk quotas of the file owner and file group.</div>					
Why most regex flavors don't have anchors for both start and end of word	Any position between characters can never be both at the start and at the end of a word. Using only one operator makes things easier.					regex
git: revert (reset) a single file	<div><code>git checkout -- filename</code></div>	"<p>This one is hard to find out there so here it is. If you have an <strong>uncommitted</strong> change (its only in your working copy) that you wish to revert (in SVN terms) to the copy in your latest commit, do the following:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">git checkout filename </pre></div> <p>This will checkout the file from HEAD, overwriting your change. This command is also used to checkout branches, and you could happen to have a file with the same name as a branch. All is not lost, you will simply need to type:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">git checkout -- filename </pre></div> <p>You can also do this with files from other branches, and such. <code>man git-checkout</code> has the details.<br /> The rest of the Internet will tell you to use <code>git reset --hard</code>, but this resets <strong>all</strong> uncommitted changes you’ve made in your working copy. Type this with care.</p><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTczMzk5NzQsICJpZCI6ICIxNDk3MzM5ODg4ODg3LTAwMiIsICJtZCI6ICJUaGlzIG9uZSBpcyBoYXJkIHRvIGZpbmQgb3V0IHRoZXJlIHNvIGhlcmUgaXQgaXMuIElmIHlvdSBoYXZlIGFuICoqdW5jb21taXR0ZWQqKiBjaGFuZ2UgKGl0cyBvbmx5IGluIHlvdXIgd29ya2luZyBjb3B5KSB0aGF0IHlvdSB3aXNoIHRvIHJldmVydCAoaW4gU1ZOIHRlcm1zKSB0byB0aGUgY29weSBpbiB5b3VyIGxhdGVzdCBjb21taXQsIGRvIHRoZSBmb2xsb3dpbmc6XG4gIFxuICAgIDo6OmJhc2hcbiAgICBnaXQgY2hlY2tvdXQgZmlsZW5hbWVcbiAgXG5UaGlzIHdpbGwgY2hlY2tvdXQgdGhlIGZpbGUgZnJvbSBIRUFELCBvdmVyd3JpdGluZyB5b3VyIGNoYW5nZS4gVGhpcyBjb21tYW5kIGlzIGFsc28gdXNlZCB0byBjaGVja291dCBicmFuY2hlcywgYW5kIHlvdSBjb3VsZCBoYXBwZW4gdG8gaGF2ZSBhIGZpbGUgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIGEgYnJhbmNoLiBBbGwgaXMgbm90IGxvc3QsIHlvdSB3aWxsIHNpbXBseSBuZWVkIHRvIHR5cGU6XG4gIFxuICAgIDo6OmJhc2hcbiAgICBnaXQgY2hlY2tvdXQgLS0gZmlsZW5hbWVcbiAgXG5Zb3UgY2FuIGFsc28gZG8gdGhpcyB3aXRoIGZpbGVzIGZyb20gb3RoZXIgYnJhbmNoZXMsIGFuZCBzdWNoLiBgbWFuIGdpdC1jaGVja291dGAgaGFzIHRoZSBkZXRhaWxzLlxuVGhlIHJlc3Qgb2YgdGhlIEludGVybmV0IHdpbGwgdGVsbCB5b3UgdG8gdXNlIGBnaXQgcmVzZXQgLS1oYXJkYCwgYnV0IHRoaXMgcmVzZXRzICoqYWxsKiogdW5jb21taXR0ZWQgY2hhbmdlcyB5b3VcdTIwMTl2ZSBtYWRlIGluIHlvdXIgd29ya2luZyBjb3B5LiBUeXBlIHRoaXMgd2l0aCBjYXJlLlxuIn0=---->"			http://www.norbauer.com/rails-consulting/notes/git-revert-reset-a-single-file.html	
commands having&nbsp;<code>-f</code> = <code>--force</code>	<code>cp</code>, <code>mv</code>, <code>rm</code>				http://tldp.org/LDP/abs/html/standard-options.html	
commands having&nbsp;<code>-f</code> = <code>--file</code>	<code>tar</code>, <code>gawk</code>				http://tldp.org/LDP/abs/html/standard-options.html	
ls -F indicator @	ls -F	indicator			@	symbolic link or file has extended attributes			ls
ls -F indicator *	ls -F	indicator			*	executable			ls
ls -F indicator =	ls -F	indicator			=	socket			ls
ls -F indicator |	ls -F	indicator			|	named pipe			ls
ls -F indicator &gt;	ls -F	indicator			&gt;	door			ls
ls -F indicator /	ls -F	indicator			/	directory			ls
find primary -newermm	find	primary			-newermm <u>file</u>	<i>Longest of three meaning:&nbsp;</i>True if the current file has a more recent&nbsp;<b>last modification time</b>&nbsp;than&nbsp;<u>file</u>.	Equivalent&nbsp;to&nbsp;<code>-newer&nbsp;<u>file</u></code>&nbsp;and&nbsp;<code>-mnewer&nbsp;<u>file</u></code>		find
find primary -newerBm	find	primary			-newerBm&nbsp;<u>file</u>	<i>Longer of two meaning:</i> True if the current file has a more recent <b>inode creation time</b> than the <b>modification time</b> of <u>file</u>.	Equivalent to <code>-Bnewer <u>file</u></code>		find
find primary -neweram	find	primary			-neweram&nbsp;<u>file</u>	<i></i><i>Longer of two meaning:</i>&nbsp;True if the current file has a more recent&nbsp;<b>access time</b>&nbsp;than the&nbsp;<b>modification time</b>&nbsp;of&nbsp;<u>file</u>.	Equivalent to <code>-anewer <u>file</u></code>		find
find primary -newercm	find	primary			-newercm&nbsp;<u>file</u>	<i></i><i>Longer of two meaning:</i>&nbsp;True if the current file has a more recent&nbsp;<b>change time</b>&nbsp;than the&nbsp;<b>modification time</b>&nbsp;of&nbsp;<u>file</u>.	Equivalent to <code>-cnewer <u>file</u></code>		find
find primary -neweraa	find	primary			-neweraa&nbsp;<u>file</u>	<i></i>True if the current file has a more recent&nbsp;<b>last access time</b>&nbsp;than&nbsp;<u>file</u>.			find
find primary -newerBB	find	primary			-newerBB&nbsp;<u>file</u>	<i></i>True if the current file has a more recent&nbsp;<b>inode creation time</b>&nbsp;than&nbsp;<u>file</u>.			find
find primary -newercc	find	primary			-newercc&nbsp;<u>file</u>	<i></i>True if the current file has a more recent&nbsp;<b>change time</b>&nbsp;than&nbsp;<u>file</u>.			find
find primary -neweraB	find	primary			-neweraB&nbsp;<u>file</u>	<i></i>True if the current file has a more recent&nbsp;<b>last access time</b>&nbsp;than the<b> inode creation&nbsp;</b><b>time</b>&nbsp;of&nbsp;<u>file</u>.			find
find primary -newerac	find	primary			-newerac&nbsp;<u>file</u>	<i></i>True if the current file has a more recent&nbsp;<b>last access time</b>&nbsp;than the<b> change&nbsp;</b><b>time</b>&nbsp;of&nbsp;<u>file</u>.			find
find primary -newerBc	find	primary			-newerBc&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>inode creation&nbsp;time</b>&nbsp;than the<b> change&nbsp;</b><b>time</b>&nbsp;of&nbsp;<u>file</u>.			find
find primary -newerBa	find	primary			-newerBa&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>inode creation&nbsp;time</b>&nbsp;than the<b>&nbsp;</b><b>last access</b>&nbsp;<b>time</b>&nbsp;of&nbsp;<u>file</u>.			find
find primary -newerca	find	primary			-newerca&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>change&nbsp;time</b>&nbsp;than the<b>&nbsp;</b><b>last access</b>&nbsp;<b>time</b> of&nbsp;<u>file</u>.			find
find primary -newercB	find	primary			-newercB&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>change&nbsp;time</b>&nbsp;than the<b>&nbsp;</b><b></b><b>inode creation</b>&nbsp;<b>time </b>of&nbsp;<u>file</u>.			find
find primary -newerma	find	primary			-newerma&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>modification&nbsp;time</b>&nbsp;than the&nbsp;<b>last access</b>&nbsp;<b>time </b>of&nbsp;<u>file</u>.			find
find primary -newermB	find	primary			-newermB&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>modification&nbsp;time</b>&nbsp;than the&nbsp;<b>inode creation</b>&nbsp;<b>time </b>of&nbsp;<u>file</u>.			find
find primary -newermc	find	primary			-newermc&nbsp;<u>file</u>	<i></i>True if the current file has a more recent <b>modification&nbsp;time</b>&nbsp;than the&nbsp;<b>change</b>&nbsp;<b>time </b>of&nbsp;<u>file</u>.			find
<code>ps -aux</code> = <code>ps aux</code> ?	No.	The POSIX and UNIX standards require that <code>ps -aux</code>&nbsp;print all processes owned by a user named <i>x</i>, as well as printing all processes that would be selected by the <code>-a</code> option. If the user named <i>x</i>&nbsp;does not exist, some versions of&nbsp;<code>ps</code> may interpret the command as&nbsp;<code>ps aux</code>&nbsp;instead and print a warning. This  behavior is intended to aid in transitioning old scripts and habits. It  is fragile, subject to change, and thus should not be relied upon.	reverse		https://linux.die.net/man/1/ps	ps
Delete lines 5–10, 12 using <code>sed</code>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">sed -i.bak -e <span style=""color: #ed9d13"">'5,10d;12d'</span> file </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTgzNTA1MzgsICJpZCI6ICIxNDk4MzUwNDgwNjg3LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIHNlZCAtaS5iYWsgLWUgJmFwb3M7NSwxMGQ7MTJkJmFwb3M7IGZpbGVcbiAgXG4ifQ==---->"		reverse		https://stackoverflow.com/questions/2112469/delete-specific-line-numbers-from-a-text-file-using-sed	sed
Delete lines 5–10, 12 using <code>awk</code>	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">awk <span style=""color: #ed9d13"">'NR!~/^(5|10|25)$/'</span> file &gt; temp </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTgzNTA1OTQsICJpZCI6ICIxNDk4MzUwNTU3NzMwLTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIGF3ayAmYXBvcztOUiF+L14oNXwxMHwyNSkkLyZhcG9zOyBmaWxlICZndDsgdGVtcFxuICBcbiJ9---->"		reverse		https://stackoverflow.com/questions/2112469/delete-specific-line-numbers-from-a-text-file-using-sed	awk
find files and print only filenames	"<div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%"">find ./dir1 -type f -printf <span style=""color: #ed9d13"">""%f\n""</span> find ./dir1 -type f -exec basename <span style=""color: #d0d0d0"">{}</span> <span style=""color: #ed9d13"">\;</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTgzNTE4MjEsICJpZCI6ICIxNDk4MzUxNjk2NDA0LTAwMSIsICJtZCI6ICIgICAgOjo6YmFzaFxuICAgIGZpbmQgLi9kaXIxIC10eXBlIGYgLXByaW50ZiAmcXVvdDslZlxcbiZxdW90O1xuICAgIGZpbmQgLi9kaXIxIC10eXBlIGYgLWV4ZWMgYmFzZW5hbWUge30gXFw7XG4ifQ==---->"		reverse		https://stackoverflow.com/questions/5456120/how-to-only-get-file-name-with-linux-find	find
Quote by L. Peter Deutsch	“‘Software engineering’ is something of an oxymoron. It’s very difficult to have real engineering before you have physics, and there isn’t anything even close to physics for software.”	Deutsch is a software veteran of the Xerox Palo Alto Research Center in the ‘70s and ‘80s.	reverse		“Dreaming in Code: Two Dozen Programmers, Three Years, 4,732 Bugs, and One Quest for Transcendent Software” by Scott Rosenberg	
<code>.git/branches</code>	A deprecated way to store shorthands that specify URL to the <code>git fetch</code>, <code>git pull</code> and <code>git push</code> commands is to store a file in <code><strike>branches</strike>/&lt;name&gt;</code> and give the name to the command in the place of the repository argument.		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/COMMIT_EDITMSG</code>	This is the last commit message. It’s not actually used by Git at all, but it is for your reference after you have made a commit.		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/config</code>	<div>This is the main Git configuration file. It keeps specific Git options for your project, such as your remotes, push configurations, tracking branches and more. Your configuration will be loaded first from this file, then from a <code>~/.gitconfig</code> file and then from an <code>/etc/gitconfig</code> file, if they exist.</div>	"<p>A exemplary content of this file is:</p> <div class=""codehilite"" style=""background: #202020"" align=""left""><pre style=""line-height: 125%""><span style=""color: #6ab825;font-weight: bold"">[core]</span>       <span style=""color: #bbbbbb"">repositoryformatversion</span> <span style=""color: #d0d0d0"">=</span> <span style=""color: #ed9d13"">0</span> <span style=""color: #ed9d13"">      filemode = false</span> <span style=""color: #ed9d13"">      bare = false</span> <span style=""color: #ed9d13"">      logallrefupdates = true [remote ""origin""]</span> <span style=""color: #ed9d13"">      url = git@github.com:user/test.git</span> <span style=""color: #ed9d13"">      fetch = +refs/heads/*:refs/remotes/origin/*</span> </pre></div><!----SBAdata:eyJpc2NvbnZlcnRlZCI6ICJUcnVlIiwgImxhc3Rtb2RpZmllZCI6IDE0OTg3MTQwNTksICJpZCI6ICIxNDk4NzEzOTM0ODU3LTAwMiIsICJtZCI6ICJBIGV4ZW1wbGFyeSBjb250ZW50IG9mIHRoaXMgZmlsZSBpczpcbiAgXG4gIFxuICAgIFtjb3JlXVxuICAgICAgICAgIHJlcG9zaXRvcnlmb3JtYXR2ZXJzaW9uID0gMFxuICAgICAgICAgIGZpbGVtb2RlID0gZmFsc2VcbiAgICAgICAgICBiYXJlID0gZmFsc2VcbiAgICAgICAgICBsb2dhbGxyZWZ1cGRhdGVzID0gdHJ1ZSBbcmVtb3RlICZxdW90O29yaWdpbiZxdW90O11cbiAgICAgICAgICB1cmwgPSBnaXRAZ2l0aHViLmNvbTp1c2VyL3Rlc3QuZ2l0XG4gICAgICAgICAgZmV0Y2ggPSArcmVmcy9oZWFkcy8qOnJlZnMvcmVtb3Rlcy9vcmlnaW4vKlxuIn0=---->"	reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/description</code>	<div>If you’re using gitweb or invoking git instaweb, this will show when you have viewed your repository or the list of all versioned repositories.</div>	<div><br /></div>	reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/gitweb</code>	<div>A folder with the GIT web scripts. They allow you to browse the git repository using a web browser.</div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/HEAD</code>	<div>This file holds a reference to the branch you are currently on. This tells Git what to use as the parent of your next commit.</div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/hooks/</code>	<div>This directory contains shell scripts that are invoked after the corresponding Git commands. For example, after you run a commit, Git will try to execute the post-commit script.</div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/index</code>	<div>The Git index is used as a staging area between your working directory and your repository. You can use the index to build up a set of changes that you want to commit together. When you create a commit, what is committed is what is currently in the index, not what is in your working directory. It is a binary file containing a sorted list of path names, each with permissions and the SHA-1 of a blob object.</div><div><br /></div><div>Its content can be listed through:</div><div><pre>git ls-files --stage 100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0 &nbsp; &nbsp;README</pre></div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/logs/</code>	<div>Keeps records of changes made to refs.</div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/objects/</code>	<div>In this directory the data of your Git objects is stored – all the contents of the files you have ever checked in, your commits, trees and tag objects. The files are stored by their SHA-1 values. The first two characters are for the subdirectory and the next 38 are the filename.&nbsp;</div>	For example, if the SHA-1 for a blob we’ve checked in is <code>a576fac355dd17e39fd2671b010e36299f713b4d</code> the path to the corresponding file is:<div><code><br /></code></div><div><code>[GIT_DIR]/objects/a5/76fac355dd17e39fd2671b010e36299f713b4d</code></div>	reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/ORIG_HEAD</code>	<div>This is the previous state of <code>HEAD</code>.</div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/packed-refs</code>	<div>The file consists of packed heads and tags. It is useful for an efficient repository access.</div>		reverse		https://www.siteground.com/tutorials/git/directory.htm	git
<code>.git/refs/</code>	<div>This directory normally contains three subfolders – <code>heads</code>, <code>remotes</code> and <code>tags</code>. There you will find the corresponding local branches, remote branches and tags files.</div>	For example, if you create a production branch, the file <code>.git/refs/heads/production</code> will be created and will contain the SHA-1 of the latest branch commit.	reverse		https://www.siteground.com/tutorials/git/directory.htm	git
sort -c	sort	alt long option	-c	--check	sort --check=diagnose-first	check for sorted input; do not sort			sort
sort -C	sort	alt long option	-C	--check=quiet		like -c, but do not report first bad line			sort
sort -b	sort		-b	--ignore-leading-blanks		ignore leading blanks			sort
sort -d	sort		-d	--dictionary-order		consider only blanks and alphanumeric characters			sort
sort -f	sort		-f	--ignore-case		fold lower case to upper case characters			sort
sort -g	sort		-g	--general-numeric-sort		compare according to general numerical value			sort
sort -i	sort		-i	--ignore-nonprinting		consider only printable characters			sort
sort -M	sort		-M	--month-sort		compare (unknown) < 'JAN' < ... < 'DEC'			sort
sort -h	sort		-h	--human-numeric-sort		compare human readable numbers (e.g., 2K 1G)			sort
sort -n	sort		-n	--numeric-sort		compare according to string numerical value			sort
sort -R	sort		-R	--random-sort		shuffle, but group identical keys.  See shuf(1)			sort
sort --random-source	sort			--random-source=FILE		get random bytes from FILE			sort
sort -r	sort		-r	--reverse		reverse the result of comparisons			sort
sort --sort	sort			--sort=WORD		sort according to WORD: general-numeric -g, human-numeric -h, month -M, numeric -n, random -R, version -V			sort
sort -V	sort		-V	--version-sort		natural sort of (version) numbers within text			sort
sort --batch-size	sort			--batch-size=NMERGE		merge at most NMERGE inputs at once; for more use temp files			sort
sort --compress-program	sort			--compress-program=PROG		compress temporaries with PROG; decompress them with PROG -d			sort
sort --debug	sort			--debug		annotate the part of the line used to sort, and warn about questionable usage to stderr			sort
sort --files0-from	sort			--files0-from=F		read input from the files specified by NUL-terminated names in file F; If F is - then read names from standard input			sort
sort -k	sort		-k&nbsp;<i>KEYDEF</i>	--key=<i>KEYDEF</i>		sort via a key; <code><i>KEYDEF</i></code> gives location and type			sort
sort -m	sort		-m	--merge		merge already sorted files; do not sort			sort
sort -o	sort		-o&nbsp;<i>FILE</i>	--output=<i>FILE</i>		write result to <code><i>FILE</i></code> instead of standard output			sort
sort -s	sort		-s	--stable		stabilize sort by disabling last-resort comparison			sort
sort -S	sort		-S&nbsp;<i>SIZE</i>	--buffer-size=<i>SIZE</i>		use <code><i>SIZE</i></code> for main memory buffer			sort
sort -t	sort		-t&nbsp;<i>SEP</i>	--field-separator=<i>SEP</i>		use <code><i>SEP</i></code> instead of non-blank to blank transition			sort
sort -T	sort		-T&nbsp;<i>DIR</i>	--temporary-directory=<i>DIR</i>		use <code><i>DIR</i></code> for temporaries, not <code>$TMPDIR</code> or <code>/tmp</code>; multiple options specify multiple directories			sort
sort --parallel	sort			--parallel<b>=</b><i>N</i>		change the number of sorts run concurrently to <code><i>N</i></code>			sort
sort -u	sort		-u	--unique		with <code>-c</code>, check for strict ordering; without <code>-c</code>, output only the first of an equal run			sort
sort -z	sort		-z	--zero-terminated		line delimiter is NUL, not newline			sort
sort --help	sort			--help		display this help and exit			sort
sort --version	sort			--version		output version information and exit			sort
du -a	du		-a			Display an entry for each file in a file hierarchy.			du
du -c	du		-c			Display a grand total.			du
du -d	du		-d <u>depth</u>			Display an entry for all files and directories <u><code>depth</code></u> directories deep.			du
du -H	du		-H			Symbolic links on the command line are followed, symbolic links in file hierarchies are not followed.			du
du -h	du		-h			"""Human-readable"" output. &nbsp;Use unit suffixes: Byte, Kilobyte, Megabyte, Gigabyte, Terabyte and Petabyte."			du
du -I	du		-I <u>mask</u>			Ignore files and directories matching the specified <u><code>mask</code></u>.			du
du -g	du		-g			Display block counts in 1073741824-byte (1-Gbyte) blocks.			du
du -k	du		-k			Display block counts in 1024-byte (1-Kbyte) blocks.			du
du -L	du		-L			Symbolic links on the command line and in file hierarchies are followed.			du
du -m	du		-m			Display block counts in 1048576-byte (1-Mbyte) blocks.			du
du -P	du		-P			No symbolic links are followed. &nbsp;This is the default.			du
du -r	du		-r			Generate messages about directories that cannot be read, files that cannot be opened, and so on.  This              is the default case.  This option exists solely for conformance with X/Open Portability Guide Issue 4              (XPG4).			du
du -s	du	equivalent	-s		-d 0	Display an entry for each specified file.			du
du -x	du		-x			File system mount points are not traversed.			du
du	du					    This utility displays the file system block usage for each file argument and for each directory in the file      hierarchy rooted in each directory argument.  If no file is specified, the block usage of the hierarchy rooted      in the current directory is displayed. <br /><br />      This utility counts the storage used by symbolic links and not the files they reference unless the <code>-H</code> or <code>-L</code>      option is specified.  If either the <code>-H</code> or <code>-L</code> options are specified, storage used by any symbolic links which      are followed is not counted or displayed.  If more than one of the <code>-H</code>, <code>-L</code>, and <code>-P</code> options is specified, the      last one given is used. <br /><br />      Files having multiple hard links are counted (and displayed) a single time per execution.  Directories having multiple hard links (typically Time Machine backups) are counted a single time per execution.	<code>du [-H | -L | -P] [-a | -s | -d <u>depth</u>] [-c] [-h | -k | -m | -g] [-x] [-I <u>mask</u>] [<u>file</u> ...]</code>	y	du
sort folders by size	&nbsp; &nbsp; :::bash<div>&nbsp; &nbsp; du --max-depth=1 /home/ | sort -n -r<div>&nbsp; &nbsp; du -h --summarize * | sort -h</div><div>&nbsp; &nbsp; du -h --max-depth=1 /home/ | sort -h -r</div></div>	On non-Linux, you'll need to use <b>GNU</b> <code>sort</code> to get the <code>-h</code> option.  This is  part of the <b>GNU</b> <code>coreutils</code> package, and might be called <code>gsort</code> on your  system.	reverse		http://www.ducea.com/2006/05/14/tip-how-to-sort-folders-by-size-with-one-command-line-in-linux/	du
date format flag %-	date	format flag			%-	(hyphen) do not pad the field			date
date format flag %_	date	format flag			%_	(underscore) pad with spaces			date
date format flag %0	date	format flag			%0	(zero) pad with zeros			date
date format flag %^	date	format flag			%^	use upper case if possible			date
date format flag %#	date	format flag			%#	use opposite case if possible			date
date format %%	date	format sequence			%%	a literal <code>%</code>			date
date format %a	date	format sequence			%a	locale's abbreviated weekday name (e.g., Sun)			date
date format %A	date	format sequence			%A	locale's full weekday name (e.g., Sunday)			date
date format %b	date	format sequence			%b	locale's abbreviated month name (e.g., Jan). same as&nbsp;<code>%h</code>			date
date format %B	date	format sequence			%B	locale's full month name (e.g., January)			date
date format %c	date	format sequence			%c	locale's date and time (e.g., Thu Mar 3 23:05:25 2005)			date
date format %C	date	format sequence			%C	century; like <code>%Y</code>, except omit last two digits (e.g., 20)			date
date format %d	date	format sequence			%d	day of month (e.g, 01)			date
date format %D	date	format sequence			%D	date; same as&nbsp;<code>%m/%d/%y</code>			date
date format %e	date	format sequence			%e	day of month, space padded; same as <code>%_d</code>			date
date format %F	date	format sequence			%F	full date; same as <code>%Y-%m-%d</code>			date
date format %g	date	format sequence			%g	last two digits of year of ISO week number (see <code>%G</code>)			date
date format %G	date	format sequence			%G	year of ISO week number (see <code>%V</code>); normally useful only with <code>%V</code>			date
date format %h	date	format sequence			%h	locale's abbreviated month name (e.g., Jan). same as <code>%b</code>			date
date format %H	date	format sequence			%H	hour (00..23)			date
date format %I	date	format sequence			%I	hour (01..12)			date
date format %j	date	format sequence			%j	day of year (001..366)			date
date format %k	date	format sequence			%k	hour ( 0..23)			date
date format %l	date	format sequence			%l	hour ( 1..12)			date
date format %m	date	format sequence			%m	month (01..12)			date
date format %M	date	format sequence			%M	minute (00..59)			date
date format %n	date	format sequence			%n	a newline			date
date format %N	date	format sequence			%N	nanoseconds (000000000..999999999)			date
date format %p	date	format sequence			%p	locale's equivalent of either AM or PM; blank if not known			date
date format %P	date	format sequence			%P	like <code>%p</code>, but lower case			date
date format %r	date	format sequence			%r	locale's 12-hour clock time (e.g., 11:11:04 PM)			date
date format %R	date	format sequence			%R	24-hour hour and minute; same as <code>%H:%M</code>			date
date format %s	date	format sequence			%s	seconds since 1970-01-01 00:00:00 UTC			date
date format %S	date	format sequence			%S	second (00..60)			date
date format %t	date	format sequence			%t	a tab			date
date format %T	date	format sequence			%T	time; same as <code>%H:%M:%S</code>			date
date format %u	date	format sequence			%u	day of week (1..7); 1 is Monday			date
date format %U	date	format sequence			%U	week number of year, with Sunday as first day of week (00..53)			date
date format %V	date	format sequence			%V	ISO week number, with Monday as first day of week (01..53)			date
date format %w	date	format sequence			%w	day of week (0..6); 0 is Sunday			date
date format %W	date	format sequence			%W	week number of year, with Monday as first day of week (00..53)			date
date format %x	date	format sequence			%x	locale's date representation (e.g., 12/31/99)			date
date format %X	date	format sequence			%X	locale's time representation (e.g., 23:13:48)			date
date format %y	date	format sequence			%y	last two digits of year (00..99)			date
date format %Y	date	format sequence			%Y	year			date
date format %z	date	format sequence			%z	+hhmm numeric timezone (e.g., -0400)			date
date format %:z	date	format sequence			%:z	+hh:mm numeric timezone (e.g., -04:00)			date
date format %::z	date	format sequence			%::z	+hh:mm:ss numeric time zone (e.g., -04:00:00)			date
date format %:::z	date	format sequence			%:::z	numeric time zone with : to necessary precision (e.g., -04, +05:30)			date
date format %Z	date	format sequence			%Z	alphabetic time zone abbreviation (e.g., EDT)			date
date -d	date		-d&nbsp;<i>STRING</i>	--date=<i>STRING</i>		display time described by <i><code>STRING</code></i>, not 'now'&nbsp;			date
date -f	date		-f&nbsp;<i>DATEFILE</i>	--file=<i>DATEFILE</i>		like <code>--date</code> once for each line of <code><i>DATEFILE</i></code>			date
date -r	date		-r&nbsp;<i>FILE</i>	--<b>reference</b>=<i>FILE</i>		display the last modification time of&nbsp;<code><i>FILE</i></code>			date
date -R	date		-R	--<b>rfc-2822</b>		output date and time in <b>RFC 2822</b> format. Example: Mon, 07 Aug 2006 12:34:56 <b>-0600</b>			date
date&nbsp;--rfc-3339	date			<dt><b>--rfc-3339</b>=<i>TIMESPEC</i> </dt>		output date and time in <b>RFC 3339</b> format. <code><i>TIMESPEC</i></code>='date', 'seconds', or  'ns' for date and time to the indicated precision. Date and time  components are separated by a single space: <code>2006-08-07 12:34:56-06:00</code>			date
date -s	date		-s&nbsp;<b><i>STRING</i></b>	<dt><b>--set=<i>STRING</i></b></dt>		set time described by <code><i>STRING</i></code>			date
date -u	date	long option alias	-u	<dt><b>--utc</b></dt>	date --universal	print or set Coordinated Universal Time			date
date&nbsp;--help	date			<dt><b><br /></b></dt>		display this help and exit			date
date&nbsp;--version	date			<dt><b><br /></b></dt>		output version information and exit			date
date	date			<dt><b><br /></b></dt>		Display the current time in the given FORMAT, or set the system date. <div><br /></div><div>After any flags comes an optional field width, as a decimal number; then  an optional modifier, which is either E to use the locale's alternate representations if available, or O to use the locale's alternate numeric  symbols if available.&nbsp;</div>	<code>date [<i>OPTION</i>]... [+<i>FORMAT</i>]</code><div><code>date [-u|--utc|--universal] [<i>MMDDhhmm</i>[[<i>CC</i>]<i>YY</i>][.<i>ss</i>]]&nbsp;</code></div>	y	date
date string	The <code>--date=<i>STRING</i></code> is a mostly free format human readable <code>date</code> string  such as <code>Sun, 29 Feb 2004 16:21:42 -0800</code> or <code>2004-02-29 16:21:42</code>&nbsp;or even <code>next Thursday</code>. A <code>date</code>  string may contain items indicating calendar date, time of day, time  zone, day of week, relative time, relative date, and numbers. An empty string  indicates the beginning of the day. The <code>date</code> string format is more  complex than is easily documented here but is fully described in the info documentation. 			<dt><b><br /></b></dt>	https://linux.die.net/man/1/date	date